@model MVCPresentationLayer.Models.SupplierApplicantViewModel

@{
    ViewBag.Title = "Apply";
}

<h2>Apply</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Supplier</h4>
        
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <hr />
        @*<div class="form-group">
            @Html.LabelFor(model => model.SupplierID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SupplierID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.IsApproved, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsApproved)
                    @Html.ValidationMessageFor(model => model.IsApproved, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ApprovedBy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ApprovedBy, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ApprovedBy, "", new { @class = "text-danger" })
            </div>
        </div>*@
        <div id="supplierApplyLeft">
            <div class="form-group">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2 fullWidth"})
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control nudgeRight"} })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AddressLineOne, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.AddressLineOne, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.AddressLineOne, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AddressLineTwo, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.AddressLineTwo, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.AddressLineTwo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Zip, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control nudgeRight" })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control nudgeRight" })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div id="supplierApplyRight">
            <div class="form-group">
                @Html.LabelFor(model => model.FarmTaxID, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.FarmTaxID, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.FarmTaxID, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                @Html.LabelFor(model => model.UserId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UserId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                </div>
            </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.FarmName, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.FarmName, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.FarmName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FarmAddress, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.FarmAddress, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.FarmAddress, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FarmCity, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.FarmCity, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.FarmCity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FarmState, htmlAttributes: new { @class = "control-label col-md-2 fullWidth" })
                <div class="col-md-10 clearPadding">
                    @Html.EditorFor(model => model.FarmState, new { htmlAttributes = new { @class = "form-control nudgeRight" } })
                    @Html.ValidationMessageFor(model => model.FarmState, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Active)
                        @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.Agreements, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="list-group" data-toggle="items">
                        @Html.ListBoxFor(model => model.ProductIDs, new MultiSelectList(Model.Agreements, "ProductId", "ProductName", Model.ProductIDs), new { Multiple = "multiple", @class = "list-group", @id = "supplierAgg" })
                        @*@foreach (var agreement in Model.Agreements)
                        {
                            <a href="#" class="list-group-item">@agreement.ProductName</a>
                        }*@
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" id="submitSupplierApp"/>
                <p>@ViewBag.Message</p>
            </div>
        </div>
    </div>
}

@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/listgroup.min.js"></script>
}

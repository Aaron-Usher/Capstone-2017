using DataObjects;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataAccessLayer
{
    /// <summary>
    /// Aaron Usher
    /// Updated: 2017/04/14
    /// 
    /// Class to handle database interactions involving product order lines.
    /// </summary>
    public class OrderLineAccessor
    {

        /// <summary>
        /// Eric Walton
        /// Created: 2017/03/10
        /// Invokes a stored procedure to create a new order line in the database.
        /// </summary>
        /// 
        /// <remarks>
        /// Aaron Usher
        /// Updated: 2017/04/14
        /// 
        /// Standardized method.
        /// </remarks>
        /// 
        /// <param name="orderLine">The order line to create.</param>
        /// <returns>The new order line number that is auto generated by the database.</returns>
        public static int CreateOrderLine(OrderLine orderLine)
        {
            int orderLineID = 0;

            var conn = DBConnection.GetConnection();
            var cmdText = @"sp_create_order_line";
            var cmd = new SqlCommand(cmdText, conn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@PRODUCT_ORDER_ID", orderLine.ProductOrderID);
            cmd.Parameters.AddWithValue("@PRODUCT_ID", orderLine.ProductID);
            cmd.Parameters.AddWithValue("@PRODUCT_NAME", orderLine.ProductName);
            cmd.Parameters.AddWithValue("@QUANTITY", orderLine.Quantity);
            cmd.Parameters.AddWithValue("@GRADE_ID", orderLine.GradeID);
            cmd.Parameters.AddWithValue("@PRICE", orderLine.Price);
            cmd.Parameters.AddWithValue("@UNIT_DISCOUNT", orderLine.UnitDiscount);

            try
            {
                conn.Open();
                int.TryParse(cmd.ExecuteScalar().ToString(), out orderLineID);
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                conn.Close();
            }

            return orderLineID;
        }

        /// <summary>
        /// Eric Walton
        /// 2017/10/3
        /// Invokes a stored procedure to retrieve order line by order id and
        /// update the amount on the order
        /// </summary>
        /// 
        /// <remarks>
        /// Aaron Usher
        /// Updated: 2017/04/14
        /// 
        /// Standardized method.
        /// </remarks>
        /// 
        /// <param name="productOrderId">The id to search on.</param>
        /// <param name="orderAmount">The amount to update.</param>
        /// <returns>List of order lines associated with the given product order.</returns>
        public static List<OrderLine> RetrieveOrderLinesByProductOrderId(int productOrderId, Decimal orderAmount)
        {
            var orderLines = new List<OrderLine>();

            var conn = DBConnection.GetConnection();
            var cmdText = @"sp_retrieve_product_orderline_list_by_order_id";
            var cmd = new SqlCommand(cmdText, conn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue(@"PRODUCT_ORDER_ID", productOrderId);
            cmd.Parameters.AddWithValue(@"ORDER_AMOUNT", orderAmount);

            try
            {
                conn.Open();
                var reader = cmd.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        orderLines.Add(new OrderLine()
                        {
                            OrderLineID = reader.GetInt32(0),
                            ProductOrderID = reader.GetInt32(1),
                            ProductID = reader.IsDBNull(2) ? (int?)null : reader.GetInt32(2),
                            ProductName = reader.GetString(3),
                            Quantity = reader.GetInt32(4),
                            GradeID = reader.GetString(5),
                            Price = reader.GetDecimal(6),
                            UnitDiscount = reader.GetDecimal(7)
                        });
                    }
                    reader.Close();
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                conn.Close();
            }

            return orderLines;
        }
    }
}

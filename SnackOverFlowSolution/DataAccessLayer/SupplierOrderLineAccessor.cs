using DataObjects;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataAccessLayer
{
    public class SupplierOrderLineAccessor
    {
        /// <summary>
        /// Laura Simmonds
        /// Created: 
        /// 2017/05/08
        /// 
        /// Invokes a stored procedure to create a new order line in the database.
        /// </summary>
        /// <param name="supplierOrderLine">The order line to create.</param>
        /// <returns>The new order line number that is auto generated by the database.</returns>
        public static int CreateSupplierOrderLine(SupplierOrderLine supplierOrderLine)
        {
            int rowsAffected = 0;

            var conn = DBConnection.GetConnection();
            var cmdText = @"sp_create_supplier_order_line";
            var cmd = new SqlCommand(cmdText, conn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@COMPANY_ORDER_ID", supplierOrderLine.SupplierProductOrderID);
            cmd.Parameters.AddWithValue("@PRODUCT_ID", supplierOrderLine.ProductID);
            cmd.Parameters.AddWithValue("@PRODUCT_NAME", (object)supplierOrderLine.ProductName ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@QUANTITY", supplierOrderLine.Quantity);

            try
            {
                conn.Open();
                //int.TryParse(cmd.ExecuteScalar().ToString(), out orderLineID);
                //decimal id = (decimal)cmd.ExecuteScalar();
                //orderLineID = (int)id;
                rowsAffected = cmd.ExecuteNonQuery();

            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                conn.Close();
            }

            return rowsAffected;
        }

        /// <summary>
        /// Laura Simmonds
        /// Created:
        /// 2017/05/08
        /// 
        /// Invokes a stored procedure to retrieve supplier order line by order id and
        /// update the amount on the order
        /// 
        /// <param name="productOrderId">The id to search on.</param>
        /// <returns>List of order lines associated with the given product order.</returns>
        public static List<SupplierOrderLine> RetrieveOrderLinesBySupplierOrderId(int supplierProductOrderId)
        {
            var orderLines = new List<SupplierOrderLine>();

            var conn = DBConnection.GetConnection();
            var cmdText = @"sp_retrieve_supplier_order_line";
            var cmd = new SqlCommand(cmdText, conn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue(@"SUPPLIER_ORDER_ID", supplierProductOrderId);

            try
            {
                conn.Open();
                var reader = cmd.ExecuteReader();
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        orderLines.Add(new SupplierOrderLine()
                        {
                            OrderLineID = reader.GetInt32(0),
                            SupplierProductOrderID = reader.GetInt32(1),
                            ProductID = reader.IsDBNull(2) ? (int?)null : reader.GetInt32(2),
                            ProductName = reader.GetString(3),
                            Price = reader.GetDecimal(4),
                            Quantity = reader.GetInt32(5)


                        });
                    }
                    reader.Close();
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                conn.Close();
            }

            return orderLines;
        }
    }
}

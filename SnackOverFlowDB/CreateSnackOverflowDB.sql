IF EXISTS(SELECT 1 FROM master.dbo.sysdatabases WHERE name = 'SnackOverflowDB')

BEGIN
  print '' print  '*** Dropping database SnackOverflowDB'
  DROP DATABASE SnackOverflowDB
END
GO

print '' print '*** Creating database SnackOverflowDB'
GO
CREATE DATABASE SnackOverflowDB
GO

print '' print '*** using database SnackOverflowDB'
GO
USE [SnackOverflowDB]
GO


print '' print '*** Creating TABLE AGREEMENT'
GO
CREATE TABLE [dbo].[AGREEMENT] (
	[AGREEMENT_ID]	[INT]IDENTITY(10000, 1) NOT NULL				  ,
	[PRODUCT_ID]    [INT] 					NOT NULL				  ,
	[SUPPLIER_ID]   [INT] 					NOT NULL				  ,
	[DATE_SUBMITTED][DATETIME] 				NOT NULL DEFAULT GETDATE(),
	[IS_APPROVED]	[BIT] 					NOT NULL DEFAULT 0		  ,
	[APPROVED_BY]	[INT] 											  ,
	[ACTIVE]		[BIT] 					NOT NULL DEFAULT 1		  ,

	CONSTRAINT [PK_AGREEMENT] PRIMARY KEY ([AGREEMENT_ID] ASC)
)
GO
CREATE INDEX AGREEMENT_PRODUCT_ID ON AGREEMENT([PRODUCT_ID])
GO
CREATE INDEX AGREEMENT_SUPPLIER_ID ON AGREEMENT([SUPPLIER_ID])
GO

print '' print '*** Creating TABLE APP_USER'
GO
CREATE TABLE [dbo].[APP_USER] (
	[USER_ID]			  [INT]IDENTITY(10000, 1)					  NOT NULL			,
	[FIRST_NAME]		  [NVARCHAR](150) 							  NOT NULL			,
	[LAST_NAME]			  [NVARCHAR](100)		 						  	  			,
	[PHONE]				  [NVARCHAR](15) 							  NOT NULL			,
	[PREFERRED_ADDRESS_ID][INT]							  						     	,--Will be removed later, but could break things now if it is.
	[ADDRESS1]	 		  [NVARCHAR](100) 												,
	[ADDRESS2]	 		  [NVARCHAR](100)											    ,
	[CITY]		  		  [NVARCHAR](50) 											    ,
	[STATE]				  [NCHAR](2) 												    ,
	[ZIP]				  [NVARCHAR](10) 											    ,
	[E_MAIL_ADDRESS]	  [NVARCHAR](50) 		  					  NOT NULL			,
	[E_MAIL_PREFERENCES]  [BIT] 				  					  NOT NULL DEFAULT 0,
	[PASSWORD_HASH]		  [NVARCHAR](64) 		  				      NOT NULL			,
	[PASSWORD_SALT]		  [NVARCHAR](64) 		  					  NOT NULL			,
	[USER_NAME]			  [NVARCHAR](50) COLLATE Latin1_General_CS_AS NOT NULL    		, --The COLLATE makes the column case sensitive.
	[ACTIVE]			  [BIT] 				  					  NOT NULL			, --Similar COLLATE statements may need to be added to stored procedures; they may not.

	CONSTRAINT [AK_USER_NAME] UNIQUE([USER_NAME] ASC)									,
	CONSTRAINT [AK_E_MAIL_ADDRESS] UNIQUE([E_MAIL_ADDRESS] ASC)							,
	CONSTRAINT [PK_APP_USER] PRIMARY KEY ([USER_ID] ASC)
)
GO

print '' print '*** Creating TABLE BACKORDER_PREORDER'
GO
CREATE TABLE [dbo].[BACKORDER_PREORDER] (
	[BACKORDER_PREORDER_ID][INT]IDENTITY(10000, 1) NOT NULL,
	[ORDER_ID]			   [INT] 				   NOT NULL,
	[CUSTOMER_ID]		   [INT] 				   NOT NULL,
	[AMOUNT]			   [DECIMAL](10,2) 		   NOT NULL,
	[DATE_PLACED]		   [DATETIME] 			   NOT NULL,
	[DATE_EXPECTED]		   [DATETIME] 			   NOT NULL,
	[HAS_ARRIVED]		   [BIT]				   NOT NULL,
	[ADDRESS_1]			   [NVARCHAR](50) 		   NOT NULL,
	[ADDRESS_2]			   [NVARCHAR](50) 		   NOT NULL,
	[CITY]				   [NVARCHAR](50) 		   NOT NULL,
	[STATE]				   [NCHAR](2) 			   NOT NULL,
	[ZIP]				   [NVARCHAR](10) 		   NOT NULL,

	CONSTRAINT [PK_BACKORDER_PREORDER] PRIMARY KEY ([BACKORDER_PREORDER_ID] ASC)
)
GO
CREATE INDEX BACKORDER_PREORDER_ORDER_ID ON BACKORDER_PREORDER([ORDER_ID])
GO
CREATE INDEX BACKORDER_PREORDER_CUSTOMER_ID ON BACKORDER_PREORDER([CUSTOMER_ID])
GO
CREATE INDEX BACKORDER_PREORDER_DATE_PLACED ON BACKORDER_PREORDER([DATE_PLACED])
GO
CREATE INDEX BACKORDER_PREORDER_DATE_EXPECTED ON BACKORDER_PREORDER([DATE_EXPECTED])
GO
CREATE INDEX BACKORDER_PREORDER_HAS_ARRIVED ON BACKORDER_PREORDER([HAS_ARRIVED])
GO


print '' print '*** Creating TABLE CATEGORY'
GO
CREATE TABLE [dbo].[CATEGORY] (
	[CATEGORY_ID][NVARCHAR](200) NOT NULL,
	[DESCRIPTION][NVARCHAR](750) NOT NULL,

	CONSTRAINT [PK_CATEGORY_ID] PRIMARY KEY ([CATEGORY_ID] ASC)
)
GO

print '' print '*** Creating TABLE CHARITY'
GO
CREATE TABLE [dbo].[CHARITY] (
	[CHARITY_ID]		[INT]IDENTITY(10000, 1) NOT NULL				  ,
	[USER_ID]			[INT] 					NOT NULL				  ,
	[EMPLOYEE_ID]		[INT] 						NULL				  ,
	[CHARITY_NAME]		[NVARCHAR](200) 		NOT NULL				  ,
	[CONTACT_FIRST_NAME][NVARCHAR](150) 		NOT NULL				  ,
	[CONTACT_LAST_NAME]	[NVARCHAR](150) 		NOT NULL				  ,
	[PHONE_NUMBER]		[NVARCHAR](20)			NOT NULL				  ,
	[EMAIL]				[NVARCHAR](100)			NOT NULL				  ,
	[CONTACT_HOURS]		[NVARCHAR](150) 		NOT NULL				  ,
	[STATUS]			[NVARCHAR](10) 			NOT NULL DEFAULT "PENDING",

	CONSTRAINT [PK_CHARITY] PRIMARY KEY ([CHARITY_ID] ASC)
)
GO
CREATE INDEX CHARITY_USER_ID ON CHARITY([USER_ID])
GO
CREATE INDEX CHARITY_EMPLOYEE_ID ON CHARITY([EMPLOYEE_ID])
GO

print '' print '*** Creating TABLE CHARITY_PRODUCTS'
GO
CREATE TABLE [dbo].[CHARITY_PRODUCTS] (
	[CHARITY_ID]	[INT] NOT NULL,
	[PRODUCT_LOT_ID][INT] NOT NULL,
	[QUANTITY]		[INT] NOT NULL,

	CONSTRAINT [PK_CHARITY_PRODUCTS] PRIMARY KEY ([CHARITY_ID] ASC, [PRODUCT_LOT_ID] ASC)
)
GO

print '' print '*** Creating TABLE COMMERCIAL'
GO
CREATE TABLE [dbo].[COMMERCIAL] (
	[COMMERCIAL_ID]	[INT]IDENTITY(10000, 1) NOT NULL,
	[USER_ID]		[INT] 					NOT NULL,
	[IS_APPROVED]	[BIT] 					NOT NULL,
	[APPROVED_BY]	[INT] 					NOT NULL,
	[FEDERAL_TAX_ID][INT]					NOT NULL,
	[ACTIVE]		[BIT] 					NOT NULL,

	CONSTRAINT [AK_USER_ID] UNIQUE ([USER_ID] ASC)	,
	CONSTRAINT [PK_COMMERCIAL] PRIMARY KEY ([COMMERCIAL_ID] ASC)
)
GO

print '' print '*** Creating TABLE COMPANY_ORDER'
GO
CREATE TABLE [dbo].[COMPANY_ORDER] (
	[COMPANY_ORDER_ID]		[INT]IDENTITY(10000, 1) NOT NULL,
	[EMPLOYEE_ID]			[INT]					NOT NULL,
	[SUPPLIER_ID]			[INT]					NOT NULL,
	[AMOUNT]				[DECIMAL](6,2)			NOT NULL,
	[ORDER_DATE]			[DATETIME]				NOT NULL,
	[HAS_ARRIVED]			[BIT]					NOT NULL DEFAULT 0,
	[ACTIVE]				[BIT]					NOT NULL DEFAULT 1,
	
	CONSTRAINT [PK_COMPANY_ORDER] PRIMARY KEY ([COMPANY_ORDER_ID] ASC)
)
GO
CREATE INDEX COMPANY_ORDER_EMPLOYEE_ID ON COMPANY_ORDER([EMPLOYEE_ID])
GO
CREATE INDEX COMPANY_ORDER_SUPPLIER_ID ON COMPANY_ORDER([SUPPLIER_ID])
GO
CREATE INDEX COMPANY_ORDER_HAS_ARRIVED ON COMPANY_ORDER([HAS_ARRIVED])
GO

print '' print '*** Creating TABLE COMPANY_ORDER_LINE'
GO
CREATE TABLE [dbo].[COMPANY_ORDER_LINE] (
	[COMPANY_ORDER_ID]		[INT]			NOT NULL,
	[PRODUCT_ID]			[INT]			NOT NULL,
	[PRODUCT_NAME]			[NVARCHAR](100)	NOT NULL,
	[QUANTITY]				[INT]			NOT NULL,
	[UNIT_PRICE]			[DECIMAL](6,2)	NOT NULL,
	[TOTAL_PRICE]			[DECIMAL](6,2)	NOT NULL,
	
	CONSTRAINT [PK_COMPANY_ORDER_LINE] PRIMARY KEY ([COMPANY_ORDER_ID] ASC, [PRODUCT_ID] ASC)
)
GO

print '' print '*** Creating TABLE CUSTOMER'
GO
CREATE TABLE [dbo].[CUSTOMER] (
	[CUSTOMER_ID][INT] NOT NULL,

	CONSTRAINT [PK_CUSTOMER] PRIMARY KEY ([CUSTOMER_ID] ASC)
)
GO

print '' print '*** Creating TABLE DEAL'
GO
CREATE TABLE [dbo].[DEAL] (
	[DEAL_ID]	 [INT]IDENTITY(10000, 1) NOT NULL,
	[DESCRIPTION][NVARCHAR](200) 		 NOT NULL,
	[CODE]		 [NCHAR](10)					 ,
	[AMOUNT]	 [DECIMAL](5,2)					 ,
	[PERCENT_OFF][DECIMAL](5,2)					 ,

	CONSTRAINT [AK_CODE] UNIQUE([CODE] ASC)		 ,
	CONSTRAINT [PK_DEAL] PRIMARY KEY ([DEAL_ID] ASC)
)
GO

CREATE INDEX DEAL_CODE ON DEAL([CODE])
GO

print '' print '*** Creating TABLE DEAL_CATEGORY'
GO
CREATE TABLE [dbo].[DEAL_CATEGORY] (
	[DEAL_ID]	 [INT] 			 NOT NULL,
	[CATEGORY_ID][NVARCHAR](200) NOT NULL,
	[ACTIVE]	 [BIT] 			 NOT NULL,

	CONSTRAINT [PK_DEAL_CATEGORY] PRIMARY KEY ([DEAL_ID] ASC, [CATEGORY_ID] ASC)
)
GO

print '' print '*** Creating TABLE DEAL_PRODUCT'
GO
CREATE TABLE [dbo].[DEAL_PRODUCT] (
	[DEAL_ID]	[INT] NOT NULL,
	[PRODUCT_ID][INT] NOT NULL,
	[ACTIVE]	[BIT] NOT NULL,

	CONSTRAINT [PK_DEAL_PRODUCT] PRIMARY KEY ([DEAL_ID] ASC, [PRODUCT_ID] ASC)
)
GO

print '' print '*** Creating TABLE DELIVERY'
GO
CREATE TABLE [dbo].[DELIVERY] (
	[DELIVERY_ID]	  [INT]IDENTITY(10000, 1) NOT NULL,
	[ROUTE_ID]		  [INT]							  ,
	[DELIVERY_DATE]  [DATETIME] 			  NOT NULL,
	[VERIFICATION] 	  [VARBINARY]					  ,
	[STATUS_ID]		  [NVARCHAR](50) 		  NOT NULL,
	[DELIVERY_TYPE_ID][NVARCHAR](50) 		  NOT NULL,
	[ORDER_ID]		  [INT] 				  NOT NULL,

	CONSTRAINT [PK_DELIVERY] PRIMARY KEY ([DELIVERY_ID] ASC)
)
GO
CREATE INDEX DELIVERY_ROUTE_ID ON DELIVERY([ROUTE_ID])
GO
CREATE INDEX DELIVERY_STATUS_ID ON DELIVERY([STATUS_ID])
GO
CREATE INDEX DELIVERY_DELIVERY_TYPE_ID ON DELIVERY([DELIVERY_TYPE_ID])
GO
CREATE INDEX DELIVERY_ORDER_ID ON DELIVERY([ORDER_ID])
GO

print '' print '*** Creating TABLE DELIVERY_TYPE'
GO
CREATE TABLE [dbo].[DELIVERY_TYPE] (
	[DELIVERY_TYPE_ID][NVARCHAR](50) NOT NULL		   ,
	[ACTIVE]		  [BIT]			 NOT NULL DEFAULT 1,

	CONSTRAINT [PK_DELIVERY_TYPE] PRIMARY KEY ([DELIVERY_TYPE_ID] ASC)
)
GO

print '' print '*** Creating TABLE DISPATCHER_MESSAGE'
GO
CREATE TABLE [dbo].[DISPATCHER_MESSAGE] (
	[DISPATCHER_MESSAGE_ID][INT]IDENTITY(10000, 1) NOT NULL,
	[EMPLOYEE_ID]		   [INT] 				   NOT NULL,
	[MESSAGE_NAME]		   [NVARCHAR](100) 		   NOT NULL,
	[DRIVER_ID]			   [INT]				   NOT NULL,

	CONSTRAINT [PK_DISPATCHER_MESSAGE] PRIMARY KEY ([DISPATCHER_MESSAGE_ID] ASC)
)
GO
CREATE INDEX DISPATCHER_MESSAGE_EMPLOYEE_ID ON DISPATCHER_MESSAGE([EMPLOYEE_ID])
GO
CREATE INDEX DISPATCHER_MESSAGE_DRIVER_ID ON DISPATCHER_MESSAGE([DRIVER_ID])
GO

print '' print '*** Creating TABLE DRIVER'
GO
CREATE TABLE [dbo].[DRIVER] (
	[DRIVER_ID]			   [INT] 		 NOT NULL,
	[DRIVER_LICENSE_NUMBER][NVARCHAR](9) NOT NULL,
	[LICENSE_EXPIRATION]   [DATETIME] 	 NOT NULL,
	[ACTIVE]			   [BIT] 		 NOT NULL DEFAULT 1,

	CONSTRAINT [PK_DRIVER] PRIMARY KEY ([DRIVER_ID] ASC)
)
GO

print '' print '*** Creating TABLE EMPLOYEE'
GO
CREATE TABLE [dbo].[EMPLOYEE] (
	[EMPLOYEE_ID]  [INT]IDENTITY(10000, 1) NOT NULL			 ,
	[USER_ID]	   [INT] 				   NOT NULL			 ,
	[SALARY]	   [DECIMAL](8,2)				   			 ,
	[ACTIVE]	   [BIT] 				   NOT NULL	DEFAULT 1,
	[DATE_OF_BIRTH][DATE] 				   NOT NULL			 ,

	CONSTRAINT [AK_USER_ID_UNIQUE] UNIQUE([USER_ID] ASC)	 ,
	CONSTRAINT [PK_EMPLOYEE] PRIMARY KEY ([EMPLOYEE_ID] ASC)
)
GO
CREATE INDEX EMPLOYEE_USER_ID ON EMPLOYEE([USER_ID])
GO

print '' print '*** Creating TABLE EMPLOYEE_MESSAGE'
GO
CREATE TABLE [dbo].[EMPLOYEE_MESSAGE] (
	[MESSAGE_ID] [INT]IDENTITY(10000, 1) NOT NULL,
	[SENDER_ID]	 [INT]					 NOT NULL,
	[RECEIVER_ID][INT] 				 	 NOT NULL,
	[SENT]		 [DATETIME] 			 NOT NULL,
	[VIEWED]	 [BIT] 				     NOT NULL,
	[MESSAGE]	 [NVARCHAR](4000)		 NOT NULL,

	CONSTRAINT [PK_EMPLOYEE_MESSAGE] PRIMARY KEY ([MESSAGE_ID] ASC)
)
GO
CREATE INDEX EMPLOYEE_MESSAGE_SENDER_ID ON EMPLOYEE_MESSAGE([SENDER_ID])
GO
CREATE INDEX EMPLOYEE_MESSAGE_RECEIVER_ID ON EMPLOYEE_MESSAGE([RECEIVER_ID])
GO

print '' print '*** Creating TABLE EMPLOYEE_ORDER_RESPONSIBILITY'
GO
CREATE TABLE [dbo].[EMPLOYEE_ORDER_RESPONSIBILITY] (
	[ORDER_ID]	 [INT] 			 NOT NULL,
	[EMPLOYEE_ID][INT] 			 NOT NULL,
	[DESCRIPTION][NVARCHAR](200) NOT NULL,

	CONSTRAINT [PK_EMPLOYEE_ORDER_RESPONSIBILITY] PRIMARY KEY ([ORDER_ID] ASC, [EMPLOYEE_ID] ASC)
)
GO

print '' print '*** Creating TABLE EMPLOYEE_ROLE'
GO
CREATE TABLE [dbo].[EMPLOYEE_ROLE] (
	[EMPLOYEE_ID][INT] 			 NOT NULL,
	[ROLE_ID]	 [NVARCHAR](250) NOT NULL,

	CONSTRAINT [PK_EMPLOYEE_ROLE] PRIMARY KEY ([EMPLOYEE_ID] ASC, [ROLE_ID] ASC)
)
GO

print '' print '*** Creating TABLE GRADE'
GO
CREATE TABLE [dbo].[GRADE] (
	[GRADE_ID] [NVARCHAR](250) NOT NULL,

	CONSTRAINT [PK_GRADE] PRIMARY KEY ([GRADE_ID] ASC)
)
GO

print '' print '*** Creating TABLE INSPECTION'
GO
CREATE TABLE [dbo].[INSPECTION] (
	[INSPECTION_ID]	 [INT]IDENTITY(10000, 1) NOT NULL,
	[EMPLOYEE_ID]	 [INT] 					 NOT NULL,
	[PRODUCT_LOT_ID] [INT] 					 NOT NULL,
	[GRADE_ID]		 [NVARCHAR](250)		 NOT NULL,
	[DATE_PERFORMED] [DATETIME]				 NOT NULL,
	[EXPIRATION_DATE][DATETIME]				 NOT NULL,

	CONSTRAINT [PK_INSPECTION] PRIMARY KEY ([INSPECTION_ID] ASC)
)
GO
CREATE INDEX INSPECTION_GRADE_ID ON INSPECTION([GRADE_ID])
GO
CREATE INDEX INSPECTION_DATE_PERFORMED ON INSPECTION([DATE_PERFORMED])
GO

print '' print '*** Creating TABLE LOCATION'
GO
CREATE TABLE [dbo].[LOCATION] (
	[LOCATION_ID][INT]IDENTITY(10000, 1) NOT NULL		   ,
	[DESCRIPTION][NVARCHAR](250) 		 NOT NULL		   ,
	[IS_ACTIVE]	 [BIT] 					 NOT NULL DEFAULT 1,

	CONSTRAINT [PK_LOCATION] PRIMARY KEY ([LOCATION_ID] ASC)
)
GO

print '' print '*** Creating TABLE MAINTENANCE_SCHEDULE'
GO
CREATE TABLE [dbo].[MAINTENANCE_SCHEDULE] (
	[MAINTENANCE_SCHEDULE_ID][INT]IDENTITY(10000, 1) NOT NULL,
	[VEHICLE_ID]			 [INT] 					 NOT NULL,

	CONSTRAINT [PK_MAINTENANCE_SCHEDULE] PRIMARY KEY ([MAINTENANCE_SCHEDULE_ID] ASC)
)
GO

print '' print '*** Creating TABLE MAINTENANCE_SCHEDULE_LINE'
GO
CREATE TABLE [dbo].[MAINTENANCE_SCHEDULE_LINE] (
	[MAINTENANCE_SCHEDULE_LINE_ID][INT]IDENTITY(10000, 1) NOT NULL,
	[MAINTENANCE_SCHEDULE_ID]	  [INT] 				  NOT NULL,
	[DESCRIPTION]				  [NVARCHAR](250) 		  NOT NULL,
	[MAINTENANCE_DATE]			  [DATE] 				  NOT NULL,

	CONSTRAINT [PK_MAINTENANCE_SCHEDULE_LINE] PRIMARY KEY ([MAINTENANCE_SCHEDULE_LINE_ID] ASC)
)
GO

print '' print '*** Creating TABLE MESSAGE_LINE'
GO
CREATE TABLE [dbo].[MESSAGE_LINE] (
	[MESSAGE_LINE_ID]	   [INT]IDENTITY(10000, 1) NOT NULL,
	[DISPATCHER_MESSAGE_ID][INT] 				   NOT NULL,
	[MESSAGE_LINE_TEXT]	   [NVARCHAR](250) 		   NOT NULL,

	CONSTRAINT [PK_MESSAGE_LINE] PRIMARY KEY ([MESSAGE_LINE_ID] ASC)
)
GO

print '' print '*** Creating TABLE ORDER_STATUS'
GO
CREATE TABLE [dbo].[ORDER_STATUS] (
	[ORDER_STATUS_ID][NVARCHAR](50) NOT NULL,

	CONSTRAINT [PK_ORDER_STATUS] PRIMARY KEY ([ORDER_STATUS_ID] ASC)
)
GO

print '' print '*** Creating TABLE ORDER_LINE'
GO
CREATE TABLE [dbo].[ORDER_LINE] (
	[ORDER_LINE_ID]	  	   [INT] IDENTITY(10000, 1) NOT NULL,
	[PRODUCT_ORDER_ID]	   [INT] 				    NOT NULL,
	[PRODUCT_ID]	  	   [INT] 					NOT NULL,
	[PRODUCT_NAME]	  	   [NVARCHAR](100) 			NOT NULL,
	[QUANTITY]		  	   [INT] 					NOT NULL,
	[GRADE_ID]		  	   [NVARCHAR](250) 			NOT NULL,
	[PRICE]			  	   [DECIMAL](5,2) 			NOT NULL,
	[UNIT_DISCOUNT]	  	   [DECIMAL](5,2) 			NOT NULL,
  --[TOTAL_DELIVERY_CHARGE][DECIMAL](5,2) 			NOT NULL,

	CONSTRAINT [PK_ORDER_LINE] PRIMARY KEY ([ORDER_LINE_ID] ASC)
)
GO


print '' print '*** Creating TABLE ORDER_TYPE'
GO
CREATE TABLE [dbo].[ORDER_TYPE] (
	[ORDER_TYPE_ID][NVARCHAR](250) NOT NULL,

	CONSTRAINT [PK_ORDER_TYPE] PRIMARY KEY ([ORDER_TYPE_ID] ASC)
)
GO

print '' print '*** Creating TABLE PACKAGE'
GO
CREATE TABLE [dbo].[PACKAGE] (
	[PACKAGE_ID] [INT]IDENTITY(10000, 1) NOT NULL,
	[DELIVERY_ID][INT]							 ,
	[ORDER_ID]   [INT] 					 NOT NULL,

	CONSTRAINT [PK_PACKAGE] PRIMARY KEY ([PACKAGE_ID] ASC)
)
GO
CREATE INDEX PACKAGE_DELIVERY_ID ON PACKAGE([DELIVERY_ID])
GO
CREATE INDEX PACKAGE_ORDER_ID ON PACKAGE([ORDER_ID])
GO

print '' print '*** Creating TABLE PACKAGE_LINE'
GO
CREATE TABLE [dbo].[PACKAGE_LINE] (
	[PACKAGE_LINE_ID][INT]IDENTITY(10000, 1) NOT NULL,
	[PACKAGE_ID]	 [INT] 					 NOT NULL,
	[PRODUCT_LOT_ID] [INT] 					 NOT NULL,
	[QUANTITY]	 	 [INT] 					 NOT NULL,
	[PRICE_PAID]	 [DECIMAL](5,2) 		 NOT NULL,

	CONSTRAINT [PK_PACKAGE_LINE] PRIMARY KEY ([PACKAGE_LINE_ID] ASC)
)
GO
CREATE INDEX PACKAGE_LINE_PACKAGE_ID ON PACKAGE_LINE([PACKAGE_ID])
GO
CREATE INDEX PACKAGE_LINE_PRODUCT_LOT_ID ON PACKAGE_LINE([PRODUCT_LOT_ID])
GO

print '' print '*** Creating TABLE PICKUP'
GO
CREATE TABLE [dbo].[PICKUP] (
	[PICKUP_ID]   [INT]IDENTITY(10000, 1) NOT NULL,
	[SUPPLIER_ID] [INT] 				  NOT NULL,
	[WAREHOUSE_ID][INT]					  NOT NULL,
	[DRIVER_ID]	  [INT]							  ,
	[EMPLOYEE_ID] [INT]							  ,

	CONSTRAINT [PK_PICKUP] PRIMARY KEY ([PICKUP_ID] ASC)
)
GO
CREATE INDEX PICKUP_SUPPLIER_ID ON PICKUP([SUPPLIER_ID])
GO
CREATE INDEX PICKUP_WAREHOUSE_ID ON PICKUP([WAREHOUSE_ID])
GO
CREATE INDEX PICKUP_DRIVER_ID ON PICKUP([DRIVER_ID])
GO
CREATE INDEX PICKUP_EMPLOYEE_ID ON PICKUP([EMPLOYEE_ID])
GO

print '' print '*** Creating TABLE PICKUP_LINE'
GO
CREATE TABLE [dbo].[PICKUP_LINE] (
	[PICKUP_LINE_ID][INT]IDENTITY(10000, 1) NOT NULL,
	[PICKUP_ID]		[INT] 					NOT NULL,
	[PRODUCT_LOT_ID][INT] 					NOT NULL,
	[QUANTITY]		[INT] 					NOT NULL,
	[PICK_UP_STATUS][BIT] 					NOT NULL,

	CONSTRAINT [PK_PICKUP_LINE] PRIMARY KEY ([PICKUP_LINE_ID] ASC)
)
GO
CREATE INDEX PICKUP_LINE_PICKUP_ID ON PICKUP_LINE([PICKUP_ID])
GO
CREATE INDEX PICKUP_LINE_PRODUCT_LOT_ID ON PICKUP_LINE([PRODUCT_LOT_ID])
GO

print '' print '*** Creating TABLE PRODUCT'
GO
CREATE TABLE [dbo].[PRODUCT] (
	[PRODUCT_ID]			  [INT]IDENTITY(10000, 1) NOT NULL,
	[NAME]					  [NVARCHAR](50) 		  NOT NULL,
	[DESCRIPTION]			  [NVARCHAR](200) 		  NOT NULL,
	[UNIT_PRICE]			  [DECIMAL](16,2) 		  NOT NULL,
	[IMAGE_NAME]			  [VARCHAR](50) DEFAULT '',
	[ACTIVE]				  [BIT] 				  NOT NULL,
	[UNIT_OF_MEASUREMENT]	  [NVARCHAR](20) 		  NOT NULL,
	[DELIVERY_CHARGE_PER_UNIT][DECIMAL](16,2) 		  NOT NULL,
	[IMAGE_BINARY]			  [IMAGE]						  ,

	CONSTRAINT [PK_PRODUCT] PRIMARY KEY ([PRODUCT_ID] ASC)
)
GO
CREATE INDEX PRODUCT_UNIT_PRICE ON PRODUCT([UNIT_PRICE])
GO
CREATE INDEX PRODUCT_DELIVERY_CHARGE_PER_UNIT ON PRODUCT([DELIVERY_CHARGE_PER_UNIT])
GO

print '' print '*** Creating TABLE PRODUCT_CATEGORY'
GO
CREATE TABLE [dbo].[PRODUCT_CATEGORY] (
	[PRODUCT_ID] [INT] 			 NOT NULL,
	[CATEGORY_ID][NVARCHAR](200) NOT NULL,

	CONSTRAINT [PK_PRODUCT_CATEGORY] PRIMARY KEY ([PRODUCT_ID] ASC, [CATEGORY_ID] ASC)
)
GO

print '' print '*** Creating TABLE PRODUCT_GRADE_PRICE'
GO
CREATE TABLE [dbo].[PRODUCT_GRADE_PRICE] (
	[PRODUCT_ID][INT] 			NOT NULL,
	[GRADE_ID]	[NVARCHAR](250) NOT NULL,
	[PRICE]		[DECIMAL](5,2)  NOT NULL,

	CONSTRAINT [PK_PRODUCT_GRADE_PRICE] PRIMARY KEY ([PRODUCT_ID] ASC, [GRADE_ID] ASC)
)
GO

print '' print '*** Creating TABLE PRODUCT_LOT'
GO
CREATE TABLE [dbo].[PRODUCT_LOT] (
	[PRODUCT_LOT_ID]	[INT]IDENTITY(10000, 1) NOT NULL						,
	[WAREHOUSE_ID]		[INT] 					NOT NULL						,
	[SUPPLIER_ID]		[INT] 					NOT NULL						,
	[LOCATION_ID]		[INT] 					NOT NULL						,
	[PRODUCT_ID]		[INT] 					NOT NULL						,
	[SUPPLY_MANAGER_ID] [INT]					NOT NULL						,
	[QUANTITY]			[INT] 					NOT NULL						,
	[AVAILABLE_QUANTITY][INT] 					NOT NULL						,
	[DATE_RECEIVED]		[DATETIME] 				NOT NULL DEFAULT GETDATE()	 	,
	[EXPIRATION_DATE]	[DATETIME] 				NOT NULL					    ,
	[GRADE]				[NVARCHAR](250) 				 DEFAULT 'Not Inspected',
	[PRICE] 			[DECIMAL] (5,2)											,

	CONSTRAINT [PK_PRODUCT_LOT] PRIMARY KEY ([PRODUCT_LOT_ID] ASC)
)
GO
CREATE INDEX PRODUCT_LOT_WAREHOUSE_ID ON PRODUCT_LOT([WAREHOUSE_ID])
GO
CREATE INDEX PRODUCT_LOT_SUPPLIER_ID ON PRODUCT_LOT([SUPPLIER_ID])
GO
CREATE INDEX PRODUCT_LOT_LOCATION_ID ON PRODUCT_LOT([LOCATION_ID])
GO
CREATE INDEX PRODUCT_LOT_PRODUCT_ID ON PRODUCT_LOT([PRODUCT_ID])
GO
CREATE INDEX PRODUCT_LOT_SUPPLY_MANAGER_ID ON PRODUCT_LOT([SUPPLY_MANAGER_ID])
GO
CREATE INDEX PRODUCT_LOT_DATE_RECEIVED ON PRODUCT_LOT([DATE_RECEIVED])
GO

print '' print '*** Creating TABLE PRODUCT_ORDER'
GO
CREATE TABLE [dbo].[PRODUCT_ORDER] (
	[ORDER_ID]	      [INT]IDENTITY(10000, 1) NOT NULL,
	[EMPLOYEE_ID]     [INT]							  ,
	[CUSTOMER_ID]     [INT] 				  NOT NULL,
	[ORDER_TYPE_ID]   [NVARCHAR](250)				  ,
	[ADDRESS_TYPE] 	  [NVARCHAR](50)				  ,
	[DELIVERY_TYPE_ID][NVARCHAR](50)				  ,
	[AMOUNT]          [DECIMAL](6,2)				  ,
	[ORDER_DATE]      [DATETIME] 			  NOT NULL,
	[DATE_EXPECTED]   [DATETIME] 			  NOT NULL,
	[DISCOUNT]        [DECIMAL](5,2) 		  NOT NULL,
	[ORDER_STATUS_ID] [NVARCHAR](50) 		  NOT NULL,
	[USER_ADDRESS_ID] [INT] 			      NOT NULL,
	[HAS_ARRIVED]     [BIT] 				  NOT NULL,

	CONSTRAINT [PK_PRODUCT_ORDER] PRIMARY KEY ([ORDER_ID] ASC)
)
GO
CREATE INDEX PRODUCT_ORDER_CUSTOMER_ID ON PRODUCT_ORDER([CUSTOMER_ID])
GO
CREATE INDEX PRODUCT_ORDER_ORDER_TYPE_ID ON PRODUCT_ORDER([ORDER_TYPE_ID])
GO
CREATE INDEX PRODUCT_ORDER_DELIVERY_TYPE_ID ON PRODUCT_ORDER([DELIVERY_TYPE_ID])
GO
CREATE INDEX PRODUCT_ORDER_ORDER_DATE ON PRODUCT_ORDER([ORDER_DATE])
GO
CREATE INDEX PRODUCT_ORDER_DATE_EXPECTED ON PRODUCT_ORDER([DATE_EXPECTED])
GO
CREATE INDEX PRODUCT_ORDER_USER_ADDRESS_ID ON PRODUCT_ORDER([USER_ADDRESS_ID])
GO

print '' print '*** Creating TABLE PRODUCT_REVIEW'
GO
CREATE TABLE [dbo].[PRODUCT_REVIEW] (
	[REVIEW_ID]	 [INT]IDENTITY(10000, 1) NOT NULL,
	[PRODUCT_ID] [INT] 				     NOT NULL,
	[USER_ID]	 [INT] 					 NOT NULL,
	[SUPPLIER_ID][INT] 					 NOT NULL,
	[RATING]	 [INT] 				     NOT NULL,
	[NOTES]		 [NVARCHAR](1000) 		 NOT NULL,

	CONSTRAINT [PK_PRODUCT_REVIEW] PRIMARY KEY ([REVIEW_ID] ASC)
)
GO
CREATE INDEX PRODUCT_REVIEW_PRODUCT_ID ON PRODUCT_REVIEW([PRODUCT_ID])
GO
CREATE INDEX PRODUCT_REVIEW_USER_ID ON PRODUCT_REVIEW([USER_ID])
GO
CREATE INDEX PRODUCT_REVIEW_SUPPLIER_ID ON PRODUCT_REVIEW([SUPPLIER_ID])
GO

print '' print '*** Creating TABLE REPAIR'
GO
CREATE TABLE [dbo].[REPAIR] (
	[REPAIR_ID] [INT]IDENTITY(10000, 1) NOT NULL,
	[VEHICLE_ID][INT] 					NOT NULL,

	CONSTRAINT [PK_REPAIR] PRIMARY KEY ([REPAIR_ID] ASC)
)
GO
CREATE INDEX REPAIR_VEHICLE_ID ON REPAIR([VEHICLE_ID])
GO

print '' print '*** Creating TABLE REPAIR_LINE'
GO
CREATE TABLE [dbo].[REPAIR_LINE] (
	[REPAIR_LINE_ID]	[INT]IDENTITY(10000, 1) NOT NULL,
	[REPAIR_ID]			[INT] 					NOT NULL,
	[REPAIR_DESCRIPTION][NVARCHAR](250)			 NOT NULL,

	CONSTRAINT [PK_REPAIR_LINE] PRIMARY KEY ([REPAIR_LINE_ID] ASC)
)
GO
CREATE INDEX REPAIR_LINE_REPAIR_ID ON REPAIR_LINE([REPAIR_ID])
GO

print '' print '*** Creating TABLE ROLE'
GO
CREATE TABLE [dbo].[ROLE] (
	[ROLE_ID]	 [NVARCHAR](250)  NOT NULL,
	[DESCRIPTION][NVARCHAR](1000) NOT NULL,

	CONSTRAINT [PK_ROLE] PRIMARY KEY ([ROLE_ID] ASC)
)
GO

print '' print '*** Creating TABLE ROUTE'
GO
CREATE TABLE [dbo].[ROUTE] (
	[ROUTE_ID]	   [INT]IDENTITY(10000, 1) NOT NULL,
	[VEHICLE_ID]   [INT] 				   NOT NULL,
	[DRIVER_ID]	   [INT] 				   NOT NULL,
	[ASSIGNED_DATE][DATETIME] 			   NOT NULL,

	CONSTRAINT [PK_ROUTE] PRIMARY KEY ([ROUTE_ID] ASC)
)
GO
CREATE INDEX ROUTE_VEHICLE_ID ON ROUTE([VEHICLE_ID])
GO
CREATE INDEX ROUTE_DRIVER_ID ON ROUTE([DRIVER_ID])
GO

print '' print '*** Creating TABLE SHIPPING_ADDRESS'
GO
CREATE TABLE [dbo].[SHIPPING_ADDRESS] (
	[ADDRESS_ID]  [INT]IDENTITY(10000, 1) NOT NULL,
	[USER_ID]	  [INT] 				  NOT NULL,
	[ADDRESS1]	  [NVARCHAR](100) 		  NOT NULL,
	[ADDRESS2]	  [NVARCHAR](100)				  ,
	[CITY]		  [NVARCHAR](50) 		  NOT NULL,
	[STATE]		  [NCHAR](2) 			  NOT NULL,
	[ZIP]		  [NVARCHAR](10) 		  NOT NULL,
	[ADDRESS_NAME][NVARCHAR](50) 		  NOT NULL,

	CONSTRAINT [PK_SHIPPING_ADDRESS] PRIMARY KEY ([ADDRESS_ID] ASC)
)
GO
CREATE INDEX SHIPPING_ADDRESS_USER_ID ON SHIPPING_ADDRESS([USER_ID])
GO
CREATE INDEX SHIPPING_ADDRESS_ADDRESS1 ON SHIPPING_ADDRESS([ADDRESS1])
GO

print '' print '*** Creating TABLE STATUS'
GO
CREATE TABLE [dbo].[STATUS] (
	[STATUS_ID][NVARCHAR](50) NOT NULL,

	CONSTRAINT [PK_STATUS] PRIMARY KEY ([STATUS_ID] ASC)
)
GO

print '' print '*** Creating TABLE SUPPLIER'
GO
CREATE TABLE [dbo].[SUPPLIER] (
	[SUPPLIER_ID] [INT]IDENTITY(10000, 1) NOT NULL			,
	[USER_ID]	  [INT] 				  NOT NULL			,
	[IS_APPROVED] [BIT] 				  NOT NULL DEFAULT 0,
	[APPROVED_BY] [INT] 					  	  			,
	[FARM_NAME]	  [NVARCHAR](300) 		  NOT NULL			,
	[FARM_ADDRESS][NVARCHAR](300) 		  NOT NULL			,
	[FARM_CITY]	  [NVARCHAR](50) 		  NOT NULL			,
	[FARM_STATE]  [NCHAR](2)			  NOT NULL			,
	[FARM_TAX_ID] [NVARCHAR](64) 		  NOT NULL			,
	[ACTIVE]	  [BIT]					  NOT NULL DEFAULT 1,

	CONSTRAINT [PK_SUPPLIER] PRIMARY KEY ([SUPPLIER_ID] ASC),
	CONSTRAINT [ak_SUPPLIER_USER_ID] UNIQUE([USER_ID] ASC)
)
GO
CREATE INDEX SUPPLIER_USER_ID ON SUPPLIER([USER_ID])
GO
CREATE INDEX SUPPLIER_IS_APPROVED ON SUPPLIER([IS_APPROVED])
GO

print '' print '*** Creating TABLE SUPPLIER_APPLICATION_STATUS'
GO
CREATE TABLE [dbo].[SUPPLIER_APPLICATION_STATUS] (
	[SUPPLIER_STATUS_ID][NVARCHAR](50) NOT NULL,

	CONSTRAINT [PK_SUPPLIER_APPLICATION_STATUS] PRIMARY KEY ([SUPPLIER_STATUS_ID] ASC)
)
GO

print '' print '*** Creating TABLE SUPPLIER_INVENTORY'
GO
CREATE TABLE [dbo].[SUPPLIER_INVENTORY](
	[SUPPLIER_INVENTORY_ID][INT]IDENTITY(10000,1) NOT NULL,
	[AGREEMENT_ID]		   [INT] 				  NOT NULL,
	[QUANTITY]			   [INT] 				  NOT NULL,
    [DATE_ADDED]           [DATETIME]             NOT NULL

	CONSTRAINT [PK_SUPPLIER_INVENTORY_ID] PRIMARY KEY ([SUPPLIER_INVENTORY_ID] ASC)
)
GO

print '' print '*** Creating TABLE SUPPLIER_INVOICE'
GO
CREATE TABLE [dbo].[SUPPLIER_INVOICE] (
	[SUPPLIER_INVOICE_ID][INT]IDENTITY(10000, 1) NOT NULL			  ,
	[SUPPLIER_ID]		 [INT]					 NOT NULL			  ,
	[INVOICE_DATE]		 [DATETIME]				 NOT NULL			  ,
	[SUB_TOTAL]		     [DECIMAL](6,2)			 NOT NULL DEFAULT 0.00,
	[TAX_AMOUNT]		 [DECIMAL](6,2)			 NOT NULL DEFAULT 0.00,
	[TOTAL]				 [DECIMAL](6,2)			 NOT NULL DEFAULT 0.00,
	[AMOUNT_PAID]		 [DECIMAL](6,2)			 NOT NULL DEFAULT 0.00,
	[APPROVED]			 [BIT] 					 NOT NULL DEFAULT 0   ,
	[ACTIVE]			 [BIT]					 NOT NULL DEFAULT 1   ,

	CONSTRAINT [PK_SUPPLIER_INVOICE] PRIMARY KEY ([SUPPLIER_INVOICE_ID] ASC)
)
GO

print '' print '*** Creating TABLE SUPPLIER_INVOICE_LINE'
GO
CREATE TABLE [dbo].[SUPPLIER_INVOICE_LINE] (
	[SUPPLIER_INVOICE_ID][INT]			NOT NULL		     ,
	[PRODUCT_LOT_ID]	 [INT]			NOT NULL			 ,
	[QUANTITY_SOLD]		 [INT]			NOT NULL			 ,
	[PRICE_EACH]		 [DECIMAL](6,2)	NOT NULL			 ,
	[ITEM_DISCOUNT]		 [DECIMAL](6,2)	NOT NULL DEFAULT 0.00,
	[ITEM_TOTAL]	 	 [DECIMAL](6,2)	NOT NULL			 ,

	CONSTRAINT	[PK_SUPPLIER_INVOICE_LINE] PRIMARY KEY([SUPPLIER_INVOICE_ID] ASC, [PRODUCT_LOT_ID] ASC)
)
GO

print '' print '*** Creating TABLE USER_ADDRESS'
GO
CREATE TABLE [dbo].[USER_ADDRESS] (
	[USER_ADDRESS_ID][INT] 			NOT NULL,
	[USER_ID]		 [INT] 			NOT NULL,
	[ADDRESS_LINE_1] [NVARCHAR](50) NOT NULL,
	[ADDRESS_LINE_2] [NVARCHAR](50) NOT NULL,
	[CITY]			 [NVARCHAR](50) NOT NULL,
	[STATE]			 [NCHAR](2) 	NOT NULL,
	[ZIP]			 [NVARCHAR](10) NOT NULL,

	CONSTRAINT [PK_USER_ADDRESS] PRIMARY KEY ([USER_ADDRESS_ID] ASC)
)
GO
CREATE INDEX USER_ADDRESS_USER_ID ON USER_ADDRESS([USER_ID])
GO

print '' print '*** Creating TABLE USER_CART_LINE'
GO
CREATE TABLE [dbo].[USER_CART_LINE] (
	[PRODUCT_ID][INT] NOT NULL,
    [GRADE_ID] [NVARCHAR](250) NOT NULL,
    [QUANTITY][INT] NOT NULL,
	[USER_ID]	[INT] NOT NULL,

	CONSTRAINT [PK_USER_CART_LINE] PRIMARY KEY ([PRODUCT_ID] ASC, [GRADE_ID] ASC, [USER_ID] ASC)
)
GO

print '' print '*** Creating TABLE VEHICLE'
GO
CREATE TABLE [dbo].[VEHICLE] (
	[VEHICLE_ID]		[INT]IDENTITY(10000, 1) NOT NULL		  ,
	[VIN]				[NVARCHAR](20) 			NOT NULL		  ,
	[MAKE]				[NVARCHAR](15)			NOT NULL		  ,
	[MODEL]				[NVARCHAR](20) 			NOT NULL		  ,
	[MILEAGE]			[INT] 					NOT NULL		  ,
	[YEAR]				[NVARCHAR](4) 			NOT NULL		  ,
	[COLOR]				[NVARCHAR](20) 			NOT NULL		  ,
	[ACTIVE]			[BIT] 					NOT NULL DEFAULT 0,
	[LATEST_REPAIR_DATE][DATE]									  ,
	[LAST_DRIVER_ID]    [INT]									  ,
	[VEHICLE_TYPE_ID]	[NVARCHAR](50) 			NOT NULL		  ,
	[CHECKED_OUT]		[BIT] 					NOT NULL DEFAULT 0, 
	[OUT_IN_TIME_STAMP]	[DATETIME],

	CONSTRAINT [AK_VIN] UNIQUE([VIN] ASC),
	CONSTRAINT [PK_VEHICLE] PRIMARY KEY ([VEHICLE_ID] ASC)
)
GO
CREATE INDEX VEHICLE_LAST_DRIVER_ID ON VEHICLE([LAST_DRIVER_ID])
GO
CREATE INDEX VEHICLE_VEHICLE_TYPE_ID ON VEHICLE([VEHICLE_TYPE_ID])
GO

print '' print '*** Creating TABLE VEHICLE_TYPE'
GO
CREATE TABLE [dbo].[VEHICLE_TYPE] (
	[VEHICLE_TYPE_ID][NVARCHAR](50) NOT NULL,

	CONSTRAINT [PK_VEHICLE_TYPE] PRIMARY KEY ([VEHICLE_TYPE_ID] ASC)
)
GO

print '' print '*** Creating TABLE WAREHOUSE'
GO
CREATE TABLE [dbo].[WAREHOUSE] (
	[WAREHOUSE_ID][INT]IDENTITY(10000, 1) NOT NULL,
	[ADDRESS_1]	  [NVARCHAR](50) 		  NOT NULL,
	[ADDRESS_2]	  [NVARCHAR](50) 		  NOT NULL,
	[CITY]		  [NVARCHAR](50) 		  NOT NULL,
	[STATE]		  [NCHAR](2) 			  NOT NULL,
	[ZIP]		  [NVARCHAR](10) 		  NOT NULL,

	CONSTRAINT [PK_WAREHOUSE] PRIMARY KEY ([WAREHOUSE_ID] ASC)
)
GO
CREATE INDEX WAREHOUSE_CITY ON WAREHOUSE([CITY])
GO
CREATE INDEX WAREHOUSE_STATE ON WAREHOUSE([STATE])
GO
CREATE INDEX WAREHOUSE_ZIP ON WAREHOUSE([ZIP])
GO

print '' print '*** Create TABLE SUPPLIER_PRODUCT'
GO
CREATE TABLE [dbo].[SUPPLIER_PRODUCT](
	[SUPPLIER_ID]	[INT],
	[PRODUCT_ID]	[INT]
	
	CONSTRAINT [PK_COMPOSITE_PRODUCT_SUPPLIER] PRIMARY KEY (PRODUCT_ID, SUPPLIER_ID)
)
GO

print '' print '*** Creating TABLE WISHLIST_LINE'
GO
CREATE TABLE [dbo].[WISHLIST_LINE] (
	[CUSTOMER_ID][INT] NOT NULL,
	[PRODUCT_ID] [INT] NOT NULL,

	CONSTRAINT [PK_WISHLIST_LINE] PRIMARY KEY ([CUSTOMER_ID] ASC, [PRODUCT_ID] ASC)
)
GO

print '' print '*** Creating Foreign Key AGREEMENT_PRODUCT_ID'
GO
ALTER TABLE [dbo].[AGREEMENT] WITH NOCHECK
  ADD CONSTRAINT[fk_AGREEMENT_PRODUCT_ID] FOREIGN KEY ([PRODUCT_ID])
  REFERENCES [dbo].[PRODUCT](PRODUCT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key AGREEMENT_SUPPLIER_ID'
GO
ALTER TABLE [dbo].[AGREEMENT] WITH NOCHECK
  ADD CONSTRAINT[fk_AGREEMENT_SUPPLIER_ID] FOREIGN KEY ([SUPPLIER_ID])
  REFERENCES [dbo].[SUPPLIER](SUPPLIER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

/*print '' print '*** Creating Foreign Key APP_USER_PREFERRED_ADDRESS_ID'
GO
ALTER TABLE [dbo].[APP_USER] WITH NOCHECK
  ADD CONSTRAINT[fk_APP_USER_PREFERRED_ADDRESS_ID] FOREIGN KEY ([PREFERRED_ADDRESS_ID])
  REFERENCES [dbo].[USER_ADDRESS](USER_ADDRESS_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO*/

print '' print '*** Creating Foreign Key BACKORDER_PREORDER_ORDER_ID'
GO
ALTER TABLE [dbo].[BACKORDER_PREORDER] WITH NOCHECK
  ADD CONSTRAINT[fk_BACKORDER_PREORDER_ORDER_ID] FOREIGN KEY ([ORDER_ID])
  REFERENCES [dbo].[PRODUCT_ORDER](ORDER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key BACKORDER_PREORDER_CUSTOMER_ID'
GO
ALTER TABLE [dbo].[BACKORDER_PREORDER] WITH NOCHECK
  ADD CONSTRAINT[fk_BACKORDER_PREORDER_CUSTOMER_ID] FOREIGN KEY ([CUSTOMER_ID])
  REFERENCES [dbo].[CUSTOMER](CUSTOMER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key CHARITY_USER_ID'
GO
ALTER TABLE [dbo].[CHARITY] WITH NOCHECK
  ADD CONSTRAINT[fk_CHARITY_USER_ID] FOREIGN KEY ([USER_ID])
  REFERENCES [dbo].[APP_USER](USER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key CHARITY_EMPLOYEE_ID'
GO
ALTER TABLE [dbo].[CHARITY] WITH NOCHECK
  ADD CONSTRAINT[fk_CHARITY_EMPLOYEE_ID] FOREIGN KEY ([EMPLOYEE_ID])
  REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key CHARITY_PRODUCTS_CHARITY_ID'
GO
ALTER TABLE [dbo].[CHARITY_PRODUCTS] WITH NOCHECK
  ADD CONSTRAINT[fk_CHARITY_PRODUCTS_CHARITY_ID] FOREIGN KEY ([CHARITY_ID])
  REFERENCES [dbo].[CHARITY](CHARITY_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key CHARITY_PRODUCTS_PRODUCT_LOT_ID'
GO
ALTER TABLE [dbo].[CHARITY_PRODUCTS] WITH NOCHECK
  ADD CONSTRAINT[fk_CHARITY_PRODUCTS_PRODUCT_LOT_ID] FOREIGN KEY ([PRODUCT_LOT_ID])
  REFERENCES [dbo].[PRODUCT_LOT](PRODUCT_LOT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key COMMERCIAL_USER_ID'
GO
ALTER TABLE [dbo].[COMMERCIAL] WITH NOCHECK
  ADD CONSTRAINT[fk_COMMERCIAL_USER_ID] FOREIGN KEY ([USER_ID])
  REFERENCES [dbo].[APP_USER](USER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key COMPANY_ORDER_EMPLOYEE_ID'
GO
ALTER TABLE [dbo].[COMPANY_ORDER] WITH NOCHECK
	ADD CONSTRAINT [fk_COMPANY_ORDER_EMPLOYEE_ID] FOREIGN KEY ([EMPLOYEE_ID])
	REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key COMPANY_ORDER_SUPPLIER_ID'
GO
ALTER TABLE [dbo].[COMPANY_ORDER] WITH NOCHECK
	ADD CONSTRAINT [fk_COMPANY_ORDER_SUPPLIER_ID] FOREIGN KEY ([SUPPLIER_ID])
	REFERENCES [dbo].[SUPPLIER](SUPPLIER_ID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key COMPANY_ORDER_LINE_COMPANY_ORDER_ID'
GO
ALTER TABLE [dbo].[COMPANY_ORDER_LINE] WITH NOCHECK
	ADD CONSTRAINT [fk_COMPANY_ORDER_LINE_COMPANY_ORDER_ID] FOREIGN KEY ([COMPANY_ORDER_ID])
	REFERENCES [dbo].[COMPANY_ORDER](COMPANY_ORDER_ID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key COMPANY_ORDER_LINE_PRODUCT_ID'
GO
ALTER TABLE [dbo].[COMPANY_ORDER_LINE] WITH NOCHECK
	ADD CONSTRAINT [fk_COMPANY_ORDER_LINE_PRODUCT_ID] FOREIGN KEY ([PRODUCT_ID])
	REFERENCES [dbo].[PRODUCT](PRODUCT_ID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key CUSTOMER_CUSTOMER_ID'
GO
ALTER TABLE [dbo].[CUSTOMER] WITH NOCHECK
  ADD CONSTRAINT[fk_CUSTOMER_CUSTOMER_ID] FOREIGN KEY ([CUSTOMER_ID])
  REFERENCES [dbo].[APP_USER](USER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DEAL_CATEGORY_DEAL_ID'
GO
ALTER TABLE [dbo].[DEAL_CATEGORY] WITH NOCHECK
  ADD CONSTRAINT[fk_DEAL_CATEGORY_DEAL_ID] FOREIGN KEY ([DEAL_ID])
  REFERENCES [dbo].[DEAL](DEAL_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DEAL_CATEGORY_CATEGORY_ID'
GO
ALTER TABLE [dbo].[DEAL_CATEGORY] WITH NOCHECK
  ADD CONSTRAINT[fk_DEAL_CATEGORY_CATEGORY_ID] FOREIGN KEY ([CATEGORY_ID])
  REFERENCES [dbo].[CATEGORY](CATEGORY_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DEAL_PRODUCT_DEAL_ID'
GO
ALTER TABLE [dbo].[DEAL_PRODUCT] WITH NOCHECK
  ADD CONSTRAINT[fk_DEAL_PRODUCT_DEAL_ID] FOREIGN KEY ([DEAL_ID])
  REFERENCES [dbo].[DEAL](DEAL_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DEAL_PRODUCT_PRODUCT_ID'
GO
ALTER TABLE [dbo].[DEAL_PRODUCT] WITH NOCHECK
  ADD CONSTRAINT[fk_DEAL_PRODUCT_PRODUCT_ID] FOREIGN KEY ([PRODUCT_ID])
  REFERENCES [dbo].[PRODUCT](PRODUCT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DELIVERY_ROUTE_ID'
GO
ALTER TABLE [dbo].[DELIVERY] WITH NOCHECK
  ADD CONSTRAINT[fk_DELIVERY_ROUTE_ID] FOREIGN KEY ([ROUTE_ID])
  REFERENCES [dbo].[ROUTE](ROUTE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DELIVERY_STATUS_ID'
GO
ALTER TABLE [dbo].[DELIVERY] WITH NOCHECK
  ADD CONSTRAINT[fk_DELIVERY_STATUS_ID] FOREIGN KEY ([STATUS_ID])
  REFERENCES [dbo].[STATUS](STATUS_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DELIVERY_DELIVERY_TYPE_ID'
GO
ALTER TABLE [dbo].[DELIVERY] WITH NOCHECK
  ADD CONSTRAINT[fk_DELIVERY_DELIVERY_TYPE_ID] FOREIGN KEY ([DELIVERY_TYPE_ID])
  REFERENCES [dbo].[DELIVERY_TYPE](DELIVERY_TYPE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DELIVERY_ORDER_ID'
GO
ALTER TABLE [dbo].[DELIVERY] WITH NOCHECK
  ADD CONSTRAINT[fk_DELIVERY_ORDER_ID] FOREIGN KEY ([ORDER_ID])
  REFERENCES [dbo].[PRODUCT_ORDER](ORDER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DISPATCHER_MESSAGE_EMPLOYEE_ID'
GO
ALTER TABLE [dbo].[DISPATCHER_MESSAGE] WITH NOCHECK
  ADD CONSTRAINT[fk_DISPATCHER_MESSAGE_EMPLOYEE_ID] FOREIGN KEY ([EMPLOYEE_ID])
  REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DISPATCHER_MESSAGE_DRIVER_ID'
GO
ALTER TABLE [dbo].[DISPATCHER_MESSAGE] WITH NOCHECK
  ADD CONSTRAINT[fk_DISPATCHER_MESSAGE_DRIVER_ID] FOREIGN KEY ([DRIVER_ID])
  REFERENCES [dbo].[DRIVER](DRIVER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key DRIVER_DRIVER_ID'
GO
ALTER TABLE [dbo].[DRIVER] WITH NOCHECK
  ADD CONSTRAINT[fk_DRIVER_DRIVER_ID] FOREIGN KEY ([DRIVER_ID])
  REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
GO

print '' print '*** Creating Foreign Key EMPLOYEE_USER_ID'
GO
ALTER TABLE [dbo].[EMPLOYEE] WITH NOCHECK
  ADD CONSTRAINT[fk_EMPLOYEE_USER_ID] FOREIGN KEY ([USER_ID])
  REFERENCES [dbo].[APP_USER](USER_ID)
GO

print '' print '*** Creating Foreign Key EMPLOYEE_MESSAGE_SENDER_ID'
GO
ALTER TABLE [dbo].[EMPLOYEE_MESSAGE] WITH NOCHECK
  ADD CONSTRAINT[fk_EMPLOYEE_MESSAGE_SENDER_ID] FOREIGN KEY ([SENDER_ID])
  REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key EMPLOYEE_MESSAGE_RECEIVER_ID'
GO
ALTER TABLE [dbo].[EMPLOYEE_MESSAGE] WITH NOCHECK
  ADD CONSTRAINT[fk_EMPLOYEE_MESSAGE_RECEIVER_ID] FOREIGN KEY ([RECEIVER_ID])
  REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
GO

print '' print '*** Creating Foreign Key EMPLOYEE_ORDER_RESPONSIBILITY_ORDER_ID'
GO
ALTER TABLE [dbo].[EMPLOYEE_ORDER_RESPONSIBILITY] WITH NOCHECK
  ADD CONSTRAINT[fk_EMPLOYEE_ORDER_RESPONSIBILITY_ORDER_ID] FOREIGN KEY ([ORDER_ID])
  REFERENCES [dbo].[PRODUCT_ORDER](ORDER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key EMPLOYEE_ORDER_RESPONSIBILITY_EMPLOYEE_ID'
GO
ALTER TABLE [dbo].[EMPLOYEE_ORDER_RESPONSIBILITY] WITH NOCHECK
  ADD CONSTRAINT[fk_EMPLOYEE_ORDER_RESPONSIBILITY_EMPLOYEE_ID] FOREIGN KEY ([EMPLOYEE_ID])
  REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key EMPLOYEE_ROLE_EMPLOYEE_ID'
GO
ALTER TABLE [dbo].[EMPLOYEE_ROLE] WITH NOCHECK
  ADD CONSTRAINT[fk_EMPLOYEE_ROLE_EMPLOYEE_ID] FOREIGN KEY ([EMPLOYEE_ID])
  REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key EMPLOYEE_ROLE_ROLE_ID'
GO
ALTER TABLE [dbo].[EMPLOYEE_ROLE] WITH NOCHECK
  ADD CONSTRAINT[fk_EMPLOYEE_ROLE_ROLE_ID] FOREIGN KEY ([ROLE_ID])
  REFERENCES [dbo].[ROLE](ROLE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key INSPECTION_EMPLOYEE_ID'
GO
ALTER TABLE [dbo].[INSPECTION] WITH NOCHECK
  ADD CONSTRAINT[fk_INSPECTION_EMPLOYEE_ID] FOREIGN KEY ([EMPLOYEE_ID])
  REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key INSPECTION_PRODUCT_LOT_ID'
GO
ALTER TABLE [dbo].[INSPECTION] WITH NOCHECK
  ADD CONSTRAINT[fk_INSPECTION_PRODUCT_LOT_ID] FOREIGN KEY ([PRODUCT_LOT_ID])
  REFERENCES [dbo].[PRODUCT_LOT](PRODUCT_LOT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key INSPECTION_GRADE_ID'
GO
ALTER TABLE [dbo].[INSPECTION] WITH NOCHECK
  ADD CONSTRAINT[fk_INSPECTION_GRADE_ID] FOREIGN KEY ([GRADE_ID])
  REFERENCES [dbo].[GRADE](GRADE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key MAINTENANCE_SCHEDULE_VEHICLE_ID'
GO
ALTER TABLE [dbo].[MAINTENANCE_SCHEDULE] WITH NOCHECK
  ADD CONSTRAINT[fk_MAINTENANCE_SCHEDULE_VEHICLE_ID] FOREIGN KEY ([VEHICLE_ID])
  REFERENCES [dbo].[VEHICLE](VEHICLE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key MAINTENANCE_SCHEDULE_LINE_MAINTENANCE_SCHEDULE_ID'
GO
ALTER TABLE [dbo].[MAINTENANCE_SCHEDULE_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_MAINTENANCE_SCHEDULE_LINE_MAINTENANCE_SCHEDULE_ID] FOREIGN KEY ([MAINTENANCE_SCHEDULE_ID])
  REFERENCES [dbo].[MAINTENANCE_SCHEDULE](MAINTENANCE_SCHEDULE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key MESSAGE_LINE_DISPATCHER_MESSAGE_ID'
GO
ALTER TABLE [dbo].[MESSAGE_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_MESSAGE_LINE_DISPATCHER_MESSAGE_ID] FOREIGN KEY ([DISPATCHER_MESSAGE_ID])
  REFERENCES [dbo].[DISPATCHER_MESSAGE](DISPATCHER_MESSAGE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key ORDER_STATUS_ORDER_STATUS_ID'
GO
ALTER TABLE [dbo].[ORDER_STATUS] WITH NOCHECK
  ADD CONSTRAINT[fk_ORDER_STATUS_ORDER_STATUS_ID] FOREIGN KEY ([ORDER_STATUS_ID])
  REFERENCES [dbo].[STATUS](STATUS_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PACKAGE_DELIVERY_ID'
GO
ALTER TABLE [dbo].[PACKAGE] WITH NOCHECK
  ADD CONSTRAINT[fk_PACKAGE_DELIVERY_ID] FOREIGN KEY ([DELIVERY_ID])
  REFERENCES [dbo].[DELIVERY](DELIVERY_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PACKAGE_ORDER_ID'
GO
ALTER TABLE [dbo].[PACKAGE] WITH NOCHECK
  ADD CONSTRAINT[fk_PACKAGE_ORDER_ID] FOREIGN KEY ([ORDER_ID])
  REFERENCES [dbo].[PRODUCT_ORDER](ORDER_ID)
GO

print '' print '*** Creating Foreign Key PACKAGE_LINE_PACKAGE_ID'
GO
ALTER TABLE [dbo].[PACKAGE_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_PACKAGE_LINE_PACKAGE_ID] FOREIGN KEY ([PACKAGE_ID])
  REFERENCES [dbo].[PACKAGE](PACKAGE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PACKAGE_LINE_PRODUCT_LOT_ID'
GO
ALTER TABLE [dbo].[PACKAGE_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_PACKAGE_LINE_PRODUCT_LOT_ID] FOREIGN KEY ([PRODUCT_LOT_ID])
  REFERENCES [dbo].[PRODUCT_LOT](PRODUCT_LOT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PICKUP_SUPPLIER_ID'
GO
ALTER TABLE [dbo].[PICKUP] WITH NOCHECK
  ADD CONSTRAINT[fk_PICKUP_SUPPLIER_ID] FOREIGN KEY ([SUPPLIER_ID])
  REFERENCES [dbo].[SUPPLIER](SUPPLIER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PICKUP_WAREHOUSE_ID'
GO
ALTER TABLE [dbo].[PICKUP] WITH NOCHECK
  ADD CONSTRAINT[fk_PICKUP_WAREHOUSE_ID] FOREIGN KEY ([WAREHOUSE_ID])
  REFERENCES [dbo].[WAREHOUSE](WAREHOUSE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PICKUP_DRIVER_ID'
GO
ALTER TABLE [dbo].[PICKUP] WITH NOCHECK
  ADD CONSTRAINT[fk_PICKUP_DRIVER_ID] FOREIGN KEY ([DRIVER_ID])
  REFERENCES [dbo].[DRIVER](DRIVER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PICKUP_EMPLOYEE_ID'
GO
ALTER TABLE [dbo].[PICKUP] WITH NOCHECK
  ADD CONSTRAINT[fk_PICKUP_EMPLOYEE_ID] FOREIGN KEY ([EMPLOYEE_ID])
  REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PICKUP_LINE_PICKUP_ID'
GO
ALTER TABLE [dbo].[PICKUP_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_PICKUP_LINE_PICKUP_ID] FOREIGN KEY ([PICKUP_ID])
  REFERENCES [dbo].[PICKUP](PICKUP_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PICKUP_LINE_PRODUCT_LOT_ID'
GO
ALTER TABLE [dbo].[PICKUP_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_PICKUP_LINE_PRODUCT_LOT_ID] FOREIGN KEY ([PRODUCT_LOT_ID])
  REFERENCES [dbo].[PRODUCT_LOT](PRODUCT_LOT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PRODUCT_CATEGORY_PRODUCT_ID'
GO
ALTER TABLE [dbo].[PRODUCT_CATEGORY] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_CATEGORY_PRODUCT_ID] FOREIGN KEY ([PRODUCT_ID])
  REFERENCES [dbo].[PRODUCT](PRODUCT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PRODUCT_CATEGORY_CATEGORY_ID'
GO
ALTER TABLE [dbo].[PRODUCT_CATEGORY] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_CATEGORY_CATEGORY_ID] FOREIGN KEY ([CATEGORY_ID])
  REFERENCES [dbo].[CATEGORY](CATEGORY_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PRODUCT_GRADE_PRICE_PRODUCT_ID'
GO
ALTER TABLE [dbo].[PRODUCT_GRADE_PRICE] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_GRADE_PRICE_PRODUCT_ID] FOREIGN KEY ([PRODUCT_ID])
  REFERENCES [dbo].[PRODUCT](PRODUCT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PRODUCT_GRADE_PRICE_GRADE_ID'
GO
ALTER TABLE [dbo].[PRODUCT_GRADE_PRICE] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_GRADE_PRICE_GRADE_ID] FOREIGN KEY ([GRADE_ID])
  REFERENCES [dbo].[GRADE](GRADE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PRODUCT_LOT_WAREHOUSE_ID'
GO
ALTER TABLE [dbo].[PRODUCT_LOT] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_LOT_WAREHOUSE_ID] FOREIGN KEY ([WAREHOUSE_ID])
  REFERENCES [dbo].[WAREHOUSE](WAREHOUSE_ID)
GO

print '' print '*** Creating Foreign Key PRODUCT_LOT_SUPPLIER_ID'
GO
ALTER TABLE [dbo].[PRODUCT_LOT] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_LOT_SUPPLIER_ID] FOREIGN KEY ([SUPPLIER_ID])
  REFERENCES [dbo].[SUPPLIER](SUPPLIER_ID)
GO

print '' print '*** Creating Foreign Key PRODUCT_LOT_LOCATION_ID'
GO
ALTER TABLE [dbo].[PRODUCT_LOT] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_LOT_LOCATION_ID] FOREIGN KEY ([LOCATION_ID])
  REFERENCES [dbo].[LOCATION](LOCATION_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PRODUCT_LOT_PRODUCT_ID'
GO
ALTER TABLE [dbo].[PRODUCT_LOT] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_LOT_PRODUCT_ID] FOREIGN KEY ([PRODUCT_ID])
  REFERENCES [dbo].[PRODUCT](PRODUCT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PRODUCT_LOT_SUPPLY_MANAGER_ID'
GO
ALTER TABLE [dbo].[PRODUCT_LOT] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_LOT_SUPPLY_MANAGER_ID] FOREIGN KEY ([SUPPLY_MANAGER_ID])
  REFERENCES [dbo].[EMPLOYEE](EMPLOYEE_ID)
GO

/*
print '' print '*** Creating Foreign Key PRODUCT_ORDER_CUSTOMER_ID'
GO
ALTER TABLE [dbo].[PRODUCT_ORDER] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_ORDER_CUSTOMER_ID] FOREIGN KEY ([CUSTOMER_ID])
  REFERENCES [dbo].[CUSTOMER](CUSTOMER_ID)
GO
*/
/*
print '' print '*** Creating Foreign Key PRODUCT_ORDER_ORDER_TYPE_ID'
GO
ALTER TABLE [dbo].[PRODUCT_ORDER] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_ORDER_ORDER_TYPE_ID] FOREIGN KEY ([ORDER_TYPE_ID])
  REFERENCES [dbo].[ORDER_TYPE](ORDER_TYPE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PRODUCT_ORDER_DELIVERY_TYPE_ID'
GO
ALTER TABLE [dbo].[PRODUCT_ORDER] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_ORDER_DELIVERY_TYPE_ID] FOREIGN KEY ([DELIVERY_TYPE_ID])
  REFERENCES [dbo].[DELIVERY_TYPE](DELIVERY_TYPE_ID)
GO

print '' print '*** Creating Foreign Key PRODUCT_ORDER_ORDER_STATUS_ID'
GO
ALTER TABLE [dbo].[PRODUCT_ORDER] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_ORDER_ORDER_STATUS_ID] FOREIGN KEY ([ORDER_STATUS_ID])
  REFERENCES [dbo].[ORDER_STATUS](ORDER_STATUS_ID)
GO

print '' print '*** Creating Foreign Key PRODUCT_ORDER_USER_ADDRESS_ID'
GO
ALTER TABLE [dbo].[PRODUCT_ORDER] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_ORDER_USER_ADDRESS_ID] FOREIGN KEY ([USER_ADDRESS_ID])
  REFERENCES [dbo].[USER_ADDRESS](USER_ADDRESS_ID)
GO
*/

print '' print '*** Creating Foreign Key PRODUCT_REVIEW_PRODUCT_ID'
GO
ALTER TABLE [dbo].[PRODUCT_REVIEW] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_REVIEW_PRODUCT_ID] FOREIGN KEY ([PRODUCT_ID])
  REFERENCES [dbo].[PRODUCT](PRODUCT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PRODUCT_REVIEW_USER_ID'
GO
ALTER TABLE [dbo].[PRODUCT_REVIEW] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_REVIEW_USER_ID] FOREIGN KEY ([USER_ID])
  REFERENCES [dbo].[APP_USER](USER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key PRODUCT_REVIEW_SUPPLIER_ID'
GO
ALTER TABLE [dbo].[PRODUCT_REVIEW] WITH NOCHECK
  ADD CONSTRAINT[fk_PRODUCT_REVIEW_SUPPLIER_ID] FOREIGN KEY ([SUPPLIER_ID])
  REFERENCES [dbo].[SUPPLIER](SUPPLIER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key REPAIR_VEHICLE_ID'
GO
ALTER TABLE [dbo].[REPAIR] WITH NOCHECK
  ADD CONSTRAINT[fk_REPAIR_VEHICLE_ID] FOREIGN KEY ([VEHICLE_ID])
  REFERENCES [dbo].[VEHICLE](VEHICLE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key REPAIR_LINE_REPAIR_ID'
GO
ALTER TABLE [dbo].[REPAIR_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_REPAIR_LINE_REPAIR_ID] FOREIGN KEY ([REPAIR_ID])
  REFERENCES [dbo].[REPAIR](REPAIR_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key ROUTE_VEHICLE_ID'
GO
ALTER TABLE [dbo].[ROUTE] WITH NOCHECK
  ADD CONSTRAINT[fk_ROUTE_VEHICLE_ID] FOREIGN KEY ([VEHICLE_ID])
  REFERENCES [dbo].[VEHICLE](VEHICLE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key ROUTE_DRIVER_ID'
GO
ALTER TABLE [dbo].[ROUTE] WITH NOCHECK
  ADD CONSTRAINT[fk_ROUTE_DRIVER_ID] FOREIGN KEY ([DRIVER_ID])
  REFERENCES [dbo].[DRIVER](DRIVER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key SHIPPING_ADDRESS_USER_ID'
GO
ALTER TABLE [dbo].[SHIPPING_ADDRESS] WITH NOCHECK
  ADD CONSTRAINT[fk_SHIPPING_ADDRESS_USER_ID] FOREIGN KEY ([USER_ID])
  REFERENCES [dbo].[APP_USER](USER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key SUPPLIER_USER_ID'
GO
ALTER TABLE [dbo].[SUPPLIER] WITH NOCHECK
  ADD CONSTRAINT[fk_SUPPLIER_USER_ID] FOREIGN KEY ([USER_ID])
  REFERENCES [dbo].[APP_USER](USER_ID)
GO

print '' print '*** Creating Foreign Key SUPPLIER_USER_ID'
GO
ALTER TABLE [dbo].[SUPPLIER_INVENTORY] WITH NOCHECK
  ADD CONSTRAINT[fk_SUPPLIER_AGREEMENT_ID] FOREIGN KEY ([AGREEMENT_ID])
  REFERENCES [dbo].[AGREEMENT](AGREEMENT_ID)
GO

print '' print '*** Creating Foreign Key SUPPLIER_INVOICE_SUPPLIER_ID'
GO
ALTER TABLE [dbo].[SUPPLIER_INVOICE] WITH NOCHECK
	ADD CONSTRAINT[fk_SUPPLIER_INVOICE_SUPPLIER_ID] FOREIGN KEY ([SUPPLIER_ID])
	REFERENCES [dbo].[SUPPLIER](SUPPLIER_ID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key SUPPLIER_INVOICE_LINE_SUPPLIER_INVOICE_ID'
GO
ALTER TABLE [dbo].[SUPPLIER_INVOICE_LINE] WITH NOCHECK
	ADD CONSTRAINT[fk_SUPPLIER_INVOICE_LINE_SUPPLIER_INVOICE_ID] FOREIGN KEY ([SUPPLIER_INVOICE_ID])
	REFERENCES [dbo].[SUPPLIER_INVOICE](SUPPLIER_INVOICE_ID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key SUPPLIER_INVOICE_LINE_PRODUCT_LOT_ID'
GO
ALTER TABLE [dbo].[SUPPLIER_INVOICE_LINE] WITH NOCHECK
	ADD CONSTRAINT[fk_SUPPLIER_INVOICE_LINE_PRODUCT_LOT_ID] FOREIGN KEY ([PRODUCT_LOT_ID])
	REFERENCES [dbo].[PRODUCT_LOT](PRODUCT_LOT_ID)
	ON UPDATE CASCADE
	ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key USER_ADDRESS_USER_ID'
GO
ALTER TABLE [dbo].[USER_ADDRESS] WITH NOCHECK
  ADD CONSTRAINT[fk_USER_ADDRESS_USER_ID] FOREIGN KEY ([USER_ID])
  REFERENCES [dbo].[APP_USER](USER_ID)
GO

print '' print '*** Creating Foreign Key USER_CART_LINE_PRODUCT_ID'
GO
ALTER TABLE [dbo].[USER_CART_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_USER_CART_LINE_PRODUCT_ID] FOREIGN KEY ([PRODUCT_ID])
  REFERENCES [dbo].[PRODUCT](PRODUCT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key USER_CART_LINE_PRODUCT_ID'
GO
ALTER TABLE [dbo].[USER_CART_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_USER_CART_LINE_GRADE_ID] FOREIGN KEY ([GRADE_ID])
  REFERENCES [dbo].[GRADE](GRADE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key USER_CART_LINE_USER_ID'
GO
ALTER TABLE [dbo].[USER_CART_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_USER_CART_LINE_USER_ID] FOREIGN KEY ([USER_ID])
  REFERENCES [dbo].[APP_USER](USER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key VEHICLE_LAST_DRIVER_ID'
GO
ALTER TABLE [dbo].[VEHICLE] WITH NOCHECK
  ADD CONSTRAINT[fk_VEHICLE_LAST_DRIVER_ID] FOREIGN KEY ([LAST_DRIVER_ID])
  REFERENCES [dbo].[DRIVER](DRIVER_ID)
GO

print '' print '*** Creating Foreign Key VEHICLE_VEHICLE_TYPE_ID'
GO
ALTER TABLE [dbo].[VEHICLE] WITH NOCHECK
  ADD CONSTRAINT[fk_VEHICLE_VEHICLE_TYPE_ID] FOREIGN KEY ([VEHICLE_TYPE_ID])
  REFERENCES [dbo].[VEHICLE_TYPE](VEHICLE_TYPE_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key WISHLIST_LINE_CUSTOMER_ID'
GO
ALTER TABLE [dbo].[WISHLIST_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_WISHLIST_LINE_CUSTOMER_ID] FOREIGN KEY ([CUSTOMER_ID])
  REFERENCES [dbo].[CUSTOMER](CUSTOMER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key WISHLIST_LINE_PRODUCT_ID'
GO
ALTER TABLE [dbo].[WISHLIST_LINE] WITH NOCHECK
  ADD CONSTRAINT[fk_WISHLIST_LINE_PRODUCT_ID] FOREIGN KEY ([PRODUCT_ID])
  REFERENCES [dbo].[PRODUCT](PRODUCT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key SUPPLIER_PRODUCT_SUPPLIER_ID'
GO
ALTER TABLE [dbo].[SUPPLIER_PRODUCT] WITH NOCHECK
  ADD CONSTRAINT[fk_SUPPLIER_PRODUCT_SUPPLIER_ID] FOREIGN KEY ([SUPPLIER_ID])
  REFERENCES [dbo].[SUPPLIER](SUPPLIER_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print '*** Creating Foreign Key SUPPLIER_PRODUCT_PRODUCT_ID'
GO
ALTER TABLE [dbo].[SUPPLIER_PRODUCT] WITH NOCHECK
  ADD CONSTRAINT[fk_SUPPLIER_PRODUCT_PRODUCT_ID] FOREIGN KEY ([PRODUCT_ID])
  REFERENCES [dbo].[PRODUCT](PRODUCT_ID)
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

print '' print  '*** Creating procedure sp_retrieve_app_user_from_search'
GO
CREATE PROCEDURE sp_retrieve_user_by_username
(
@USER_NAME[NVARCHAR](64)
)
AS
	BEGIN
		SELECT USER_ID, FIRST_NAME, LAST_NAME, PHONE, E_MAIL_ADDRESS, E_MAIL_PREFERENCES, USER_NAME, ACTIVE, ADDRESS1, ADDRESS2, CITY, STATE, ZIP
		FROM app_user
		WHERE USER_NAME = @USER_NAME
	END
GO

print '' print  '*** Creating procedure sp_retrieve_app_username_by_email'
GO
CREATE PROCEDURE sp_retrieve_app_username_by_email
(
@E_MAIL_ADDRESS[NVARCHAR](50)
)
AS
	BEGIN
		SELECT USER_NAME
		FROM app_user
		WHERE E_MAIL_ADDRESS = @E_MAIL_ADDRESS
	END
GO

print '' print  '*** Creating CREATE stored procedures'
GO


print '' print  '*** Creating procedure sp_create_agreement'
GO
CREATE PROCEDURE sp_create_agreement
(
	@PRODUCT_ID[INT],
	@SUPPLIER_ID[INT],
	@DATE_SUBMITTED[DATETIME],
	@IS_APPROVED[BIT],
	@APPROVED_BY[INT]
)
AS
	BEGIN
		INSERT INTO AGREEMENT
			(PRODUCT_ID, SUPPLIER_ID, DATE_SUBMITTED, IS_APPROVED, APPROVED_BY)
		VALUES
			(@PRODUCT_ID, @SUPPLIER_ID, @DATE_SUBMITTED, @IS_APPROVED, @APPROVED_BY)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_agreement_application'
GO
CREATE PROCEDURE sp_create_agreement_application
(
	@PRODUCT_ID[INT],
	@SUPPLIER_ID[INT],
	@DATE_SUBMITTED[DATETIME],
	@IS_APPROVED[BIT]
)
AS
	BEGIN
		INSERT INTO AGREEMENT
			(PRODUCT_ID, SUPPLIER_ID, DATE_SUBMITTED, IS_APPROVED)
		VALUES
			(@PRODUCT_ID, @SUPPLIER_ID, @DATE_SUBMITTED, @IS_APPROVED)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_app_user'
GO
CREATE PROCEDURE sp_create_app_user
(
	@FIRST_NAME[NVARCHAR](150),
	@LAST_NAME[NVARCHAR](100)= NULL,
	@PHONE[NVARCHAR](15),
	@E_MAIL_ADDRESS[NVARCHAR](50),
	@E_MAIL_PREFERENCES[BIT],
	@PASSWORD_HASH[NVARCHAR](64),
	@PASSWORD_SALT[NVARCHAR](64),
	@USER_NAME[NVARCHAR](50),
	@ACTIVE[BIT],
	@ADDRESS1[NVARCHAR](100),
	@ADDRESS2[NVARCHAR](100),
	@CITY[NVARCHAR](50),
	@STATE[NCHAR](2),
	@ZIP[NVARCHAR](10)
)
AS
	BEGIN
		INSERT INTO APP_USER
			(FIRST_NAME, LAST_NAME, PHONE, E_MAIL_ADDRESS, E_MAIL_PREFERENCES, PASSWORD_HASH, PASSWORD_SALT, USER_NAME, ACTIVE, ADDRESS1, ADDRESS2, CITY, STATE, ZIP)
		VALUES
			(@FIRST_NAME, @LAST_NAME, @PHONE, @E_MAIL_ADDRESS, @E_MAIL_PREFERENCES, @PASSWORD_HASH, @PASSWORD_SALT, @USER_NAME, @ACTIVE, @ADDRESS1, @ADDRESS2, @CITY, @STATE, @ZIP)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_backorder_preorder'
GO
CREATE PROCEDURE sp_create_backorder_preorder
(
	@ORDER_ID[INT],
	@CUSTOMER_ID[INT],
	@AMOUNT[DECIMAL](10,2),
	@DATE_PLACED[DATETIME],
	@DATE_EXPECTED[DATETIME],
	@HAS_ARRIVED[BIT],
	@ADDRESS_1[NVARCHAR](50),
	@ADDRESS_2[NVARCHAR](50),
	@CITY[NVARCHAR](50),
	@STATE[NCHAR](2),
	@ZIP[NVARCHAR](10)
)
AS
	BEGIN
		INSERT INTO BACKORDER_PREORDER
			(ORDER_ID, CUSTOMER_ID, AMOUNT, DATE_PLACED, DATE_EXPECTED, HAS_ARRIVED, ADDRESS_1, ADDRESS_2, CITY, STATE, ZIP)
		VALUES
			(@ORDER_ID, @CUSTOMER_ID, @AMOUNT, @DATE_PLACED, @DATE_EXPECTED, @HAS_ARRIVED, @ADDRESS_1, @ADDRESS_2, @CITY, @STATE, @ZIP)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_category'
GO
CREATE PROCEDURE sp_create_category
(
	@CATEGORY_ID	[NVARCHAR](200),
	@DESCRIPTION	[NVARCHAR](750)
)
AS
	BEGIN
		INSERT INTO CATEGORY
			(CATEGORY_ID, DESCRIPTION)
		VALUES
			(@CATEGORY_ID, @DESCRIPTION)
		SELECT SCOPE_IDENTITY()
	END
GO

print '' print  '*** Creating procedure sp_create_charity'
GO
CREATE PROCEDURE sp_create_charity
(
	@USER_ID[INT],
	@EMPLOYEE_ID[INT],
	@CHARITY_NAME[NVARCHAR](200),
	@CONTACT_FIRST_NAME[NVARCHAR](150),
	@CONTACT_LAST_NAME[NVARCHAR](150),
	@PHONE_NUMBER[NVARCHAR](20),
	@EMAIL[NVARCHAR](100),
	@CONTACT_HOURS[NVARCHAR](150),
	@STATUS[NVARCHAR](10)
)
AS
	BEGIN
		INSERT INTO CHARITY
			(USER_ID, EMPLOYEE_ID, CHARITY_NAME, CONTACT_FIRST_NAME, CONTACT_LAST_NAME, PHONE_NUMBER, EMAIL, CONTACT_HOURS, STATUS)
		VALUES
			(@USER_ID, @EMPLOYEE_ID, @CHARITY_NAME, @CONTACT_FIRST_NAME, @CONTACT_LAST_NAME, @PHONE_NUMBER, @EMAIL, @CONTACT_HOURS, @STATUS)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_charity_application'
GO
CREATE PROCEDURE sp_create_charity_application
(
	@USER_ID[INT],
	@CHARITY_NAME[NVARCHAR](200),
	@CONTACT_FIRST_NAME[NVARCHAR](150),
	@CONTACT_LAST_NAME[NVARCHAR](150),
	@PHONE_NUMBER[NVARCHAR](20),
	@EMAIL[NVARCHAR](100),
	@CONTACT_HOURS[NVARCHAR](150)
)
AS
	BEGIN
		INSERT INTO CHARITY
			(USER_ID, CHARITY_NAME, CONTACT_FIRST_NAME, CONTACT_LAST_NAME, PHONE_NUMBER, EMAIL, CONTACT_HOURS)
		VALUES
			(@USER_ID, @CHARITY_NAME, @CONTACT_FIRST_NAME, @CONTACT_LAST_NAME, @PHONE_NUMBER, @EMAIL, @CONTACT_HOURS)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_charity_products'
GO
CREATE PROCEDURE sp_create_charity_products
(
	@CHARITY_ID[INT],
	@PRODUCT_LOT_ID[INT],
	@QUANTITY[INT]
)
AS
	BEGIN
		INSERT INTO CHARITY_PRODUCTS
			(CHARITY_ID, PRODUCT_LOT_ID, QUANTITY)
		VALUES
			(@CHARITY_ID, @PRODUCT_LOT_ID, @QUANTITY)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_commercial'
GO
CREATE PROCEDURE sp_create_commercial
(
	@USER_ID[INT],
	@IS_APPROVED[BIT],
	@APPROVED_BY[INT],
	@FEDERAL_TAX_ID[INT],
	@ACTIVE[BIT]
)
AS
	BEGIN
		INSERT INTO COMMERCIAL
			(USER_ID, IS_APPROVED, APPROVED_BY, FEDERAL_TAX_ID, ACTIVE)
		VALUES
			(@USER_ID,@IS_APPROVED,@APPROVED_BY,@FEDERAL_TAX_ID,@ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_customer'
GO
CREATE PROCEDURE sp_create_customer
(
	@CUSTOMER_ID[INT]
)
AS
	BEGIN
		INSERT INTO CUSTOMER
			(CUSTOMER_ID)
		VALUES
			(@CUSTOMER_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_deal'
GO
CREATE PROCEDURE sp_create_deal
(
	@DESCRIPTION[NVARCHAR](200),
	@CODE[NCHAR](10)= NULL,
	@AMOUNT[DECIMAL](5,2)= NULL,
	@PERCENT_OFF[DECIMAL](5,2)= NULL
)
AS
	BEGIN
		INSERT INTO DEAL
			(DESCRIPTION, CODE, AMOUNT, PERCENT_OFF)
		VALUES
			(@DESCRIPTION, @CODE, @AMOUNT, @PERCENT_OFF)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_deal_category'
GO
CREATE PROCEDURE sp_create_deal_category
(
	@DEAL_ID[INT],
	@CATEGORY_ID[NVARCHAR](200),
	@ACTIVE[BIT]
)
AS
	BEGIN
		INSERT INTO DEAL_CATEGORY
			(DEAL_ID, CATEGORY_ID, ACTIVE)
		VALUES
			(@DEAL_ID, @CATEGORY_ID, @ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_deal_product'
GO
CREATE PROCEDURE sp_create_deal_product
(
	@DEAL_ID[INT],
	@PRODUCT_ID[INT],
	@ACTIVE[BIT]
)
AS
	BEGIN
		INSERT INTO DEAL_PRODUCT
			(DEAL_ID, PRODUCT_ID, ACTIVE)
		VALUES
			(@DEAL_ID, @PRODUCT_ID, @ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_delivery'
GO
CREATE PROCEDURE sp_create_delivery
(
	@ROUTE_ID[INT],
	@DELIVERY_DATE[DATETIME],
	@VERIFICATION[VARBINARY]= NULL,
	@STATUS_ID[NVARCHAR](50),
	@DELIVERY_TYPE_ID[NVARCHAR](50),
	@ORDER_ID[INT]
)
AS
	BEGIN
		INSERT INTO DELIVERY
			(ROUTE_ID, DELIVERY_DATE, VERIFICATION, STATUS_ID, DELIVERY_TYPE_ID, ORDER_ID)
		VALUES
			(@ROUTE_ID, @DELIVERY_DATE, @VERIFICATION, @STATUS_ID, @DELIVERY_TYPE_ID, @ORDER_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_delivery_return_delivery_id'
GO
CREATE PROCEDURE sp_create_delivery_return_delivery_id
(
	@ROUTE_ID[INT],
	@DELIVERY_DATE[DATETIME],
	@VERIFICATION[VARBINARY]= NULL,
	@STATUS_ID[NVARCHAR](50),
	@DELIVERY_TYPE_ID[NVARCHAR](50),
	@ORDER_ID[INT],
	@DELIVERY_ID[INT] OUTPUT
)
AS
	BEGIN
		INSERT INTO DELIVERY
			(ROUTE_ID, DELIVERY_DATE, VERIFICATION, STATUS_ID, DELIVERY_TYPE_ID, ORDER_ID)
		VALUES
			(@ROUTE_ID, @DELIVERY_DATE, @VERIFICATION, @STATUS_ID, @DELIVERY_TYPE_ID, @ORDER_ID)
		SELECT @DELIVERY_ID = SCOPE_IDENTITY()
	END
GO

print '' print  '*** Creating procedure sp_create_delivery_type'
GO
CREATE PROCEDURE sp_create_delivery_type
(
	@DELIVERY_TYPE_ID[NVARCHAR](50),
	@ACTIVE[BIT]
)
AS
	BEGIN
		INSERT INTO DELIVERY_TYPE
			(DELIVERY_TYPE_ID, ACTIVE)
		VALUES
			(@DELIVERY_TYPE_ID, @ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_dispatcher_message'
GO
CREATE PROCEDURE sp_create_dispatcher_message
(
	@EMPLOYEE_ID[INT],
	@MESSAGE_NAME[NVARCHAR](100),
	@DRIVER_ID[INT]
)
AS
	BEGIN
		INSERT INTO DISPATCHER_MESSAGE
			(EMPLOYEE_ID, MESSAGE_NAME, DRIVER_ID)
		VALUES
			(@EMPLOYEE_ID, @MESSAGE_NAME, @DRIVER_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_driver'
GO
CREATE PROCEDURE sp_create_driver
(
	@DRIVER_ID[INT],
	@DRIVER_LICENSE_NUMBER[NVARCHAR](9),
	@LICENSE_EXPIRATION[DATETIME],
	@ACTIVE[BIT]
)
AS
	BEGIN
		INSERT INTO DRIVER
			(DRIVER_ID, DRIVER_LICENSE_NUMBER, LICENSE_EXPIRATION, ACTIVE)
		VALUES
			(@DRIVER_ID, @DRIVER_LICENSE_NUMBER, @LICENSE_EXPIRATION, @ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_employee'
GO
CREATE PROCEDURE sp_create_employee
(
	@USER_ID[INT],
	@SALARY[DECIMAL](8,2)= NULL,
	@ACTIVE[BIT],
	@DATE_OF_BIRTH[DATE]
)
AS
	BEGIN
		INSERT INTO EMPLOYEE
			(USER_ID, SALARY, ACTIVE, DATE_OF_BIRTH)
		VALUES
			(@USER_ID, @SALARY, @ACTIVE, @DATE_OF_BIRTH)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_employee_message'
GO
CREATE PROCEDURE sp_create_employee_message
(
	@SENDER_ID[INT],
	@RECEIVER_ID[INT],
	@SENT[DATETIME],
	@VIEWED[BIT],
	@MESSAGE[NVARCHAR](4000)
)
AS
	BEGIN
		INSERT INTO EMPLOYEE_MESSAGE
			(SENDER_ID, RECEIVER_ID, SENT, VIEWED, MESSAGE)
		VALUES
			(@SENDER_ID, @RECEIVER_ID, @SENT, @VIEWED, @MESSAGE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_employee_order_responsibility'
GO
CREATE PROCEDURE sp_create_employee_order_responsibility
(
	@ORDER_ID[INT],
	@EMPLOYEE_ID[INT],
	@DESCRIPTION[NVARCHAR](200)
)
AS
	BEGIN
		INSERT INTO EMPLOYEE_ORDER_RESPONSIBILITY
			(ORDER_ID, EMPLOYEE_ID, DESCRIPTION)
		VALUES
			(@ORDER_ID, @EMPLOYEE_ID, @DESCRIPTION)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_employee_role'
GO
CREATE PROCEDURE sp_create_employee_role
(
	@EMPLOYEE_ID[INT],
	@ROLE_ID[NVARCHAR](250)
)
AS
	BEGIN
		INSERT INTO EMPLOYEE_ROLE
			(EMPLOYEE_ID, ROLE_ID)
		VALUES
			(@EMPLOYEE_ID, @ROLE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_grade'
GO
CREATE PROCEDURE sp_create_grade
(
	@GRADE_ID[NVARCHAR](250)
)
AS
	BEGIN
		INSERT INTO GRADE
			(GRADE_ID)
		VALUES
			(@GRADE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_inspection'
GO
CREATE PROCEDURE sp_create_inspection
(
	@EMPLOYEE_ID[INT],
	@PRODUCT_LOT_ID[INT],
	@GRADE_ID[NVARCHAR](250),
	@DATE_PERFORMED[DATETIME],
	@EXPIRATION_DATE[DATETIME]
)
AS
	BEGIN
		INSERT INTO INSPECTION
			(EMPLOYEE_ID, PRODUCT_LOT_ID, GRADE_ID, DATE_PERFORMED, EXPIRATION_DATE)
		VALUES
			(@EMPLOYEE_ID, @PRODUCT_LOT_ID, @GRADE_ID, @DATE_PERFORMED, @EXPIRATION_DATE)
		UPDATE PRODUCT_LOT
		SET GRADE = @GRADE_ID
		WHERE PRODUCT_LOT_ID = @PRODUCT_LOT_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_location'
GO
CREATE PROCEDURE sp_create_location
(
	@DESCRIPTION[NVARCHAR](250),
	@IS_ACTIVE[BIT]
)
AS
	BEGIN
		INSERT INTO LOCATION
			(DESCRIPTION, IS_ACTIVE)
		VALUES
			(@DESCRIPTION, @IS_ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_maintenance_schedule'
GO
CREATE PROCEDURE sp_create_maintenance_schedule
(
	@VEHICLE_ID[INT]
)
AS
	BEGIN
		INSERT INTO MAINTENANCE_SCHEDULE
			(VEHICLE_ID)
		VALUES
			(@VEHICLE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_maintenance_schedule_line'
GO
CREATE PROCEDURE sp_create_maintenance_schedule_line
(
	@MAINTENANCE_SCHEDULE_ID[INT],
	@DESCRIPTION[NVARCHAR](250),
	@MAINTENANCE_DATE[DATE]
)
AS
	BEGIN
		INSERT INTO MAINTENANCE_SCHEDULE_LINE 
			(MAINTENANCE_SCHEDULE_ID, DESCRIPTION, MAINTENANCE_DATE)
		VALUES
			(@MAINTENANCE_SCHEDULE_ID, @DESCRIPTION, @MAINTENANCE_DATE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_message_line'
GO
CREATE PROCEDURE sp_create_message_line
(
	@DISPATCHER_MESSAGE_ID[INT],
	@MESSAGE_LINE_TEXT[NVARCHAR](250)
)
AS
BEGIN
INSERT INTO MESSAGE_LINE (DISPATCHER_MESSAGE_ID, MESSAGE_LINE_TEXT)
VALUES
(@DISPATCHER_MESSAGE_ID, @MESSAGE_LINE_TEXT)
END
GO

print '' print  '*** Creating procedure sp_create_order_line'
GO
CREATE PROCEDURE sp_create_order_line
(
	@PRODUCT_ORDER_ID[INT],
	@PRODUCT_ID[INT],
	@PRODUCT_NAME[NVARCHAR](100),
	@QUANTITY[INT],
	@GRADE_ID[NVARCHAR](250),
	@PRICE[DECIMAL](5,2),
	@UNIT_DISCOUNT[DECIMAL](5,2)
)
AS
	BEGIN
		INSERT INTO ORDER_LINE 
			(PRODUCT_ORDER_ID, PRODUCT_ID, PRODUCT_NAME, QUANTITY, GRADE_ID, PRICE, UNIT_DISCOUNT)
		VALUES
			(@PRODUCT_ORDER_ID, @PRODUCT_ID, @PRODUCT_NAME, @QUANTITY, @GRADE_ID, @PRICE, @UNIT_DISCOUNT)
		SELECT SCOPE_IDENTITY()
	END
GO

print '' print  '*** Creating procedure sp_create_order_status'
GO
CREATE PROCEDURE sp_create_order_status
(
	@ORDER_STATUS_ID[NVARCHAR](50)
)
AS
	BEGIN
		INSERT INTO ORDER_STATUS 
			(ORDER_STATUS_ID)
		VALUES
			(@ORDER_STATUS_ID)
		RETURN @@ROWCOUNT	
	END
GO

print '' print  '*** Creating procedure sp_create_order_type'
GO
CREATE PROCEDURE sp_create_order_type
(
	@ORDER_TYPE_ID[NVARCHAR](250)
)
AS
	BEGIN
		INSERT INTO ORDER_TYPE 
			(ORDER_TYPE_ID)
		VALUES
			(@ORDER_TYPE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_package'
GO
CREATE PROCEDURE sp_create_package
(
	@DELIVERY_ID[INT],
	@ORDER_ID[INT]
)
AS
	BEGIN
		INSERT INTO PACKAGE 
			(DELIVERY_ID, ORDER_ID)
		VALUES
			(@DELIVERY_ID, @ORDER_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_package_line'
GO
CREATE PROCEDURE sp_create_package_line
(
	@PACKAGE_ID[INT],
	@PRODUCT_LOT_ID[INT],
	@QUANTITY[INT],
	@PRICE_PAID[DECIMAL](5,2)
)
AS
	BEGIN
		INSERT INTO PACKAGE_LINE 
			(PACKAGE_ID, PRODUCT_LOT_ID, QUANTITY, PRICE_PAID)
		VALUES
			(@PACKAGE_ID, @PRODUCT_LOT_ID, @QUANTITY, @PRICE_PAID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_pickup'
GO
CREATE PROCEDURE sp_create_pickup
(
	@SUPPLIER_ID[INT],
	@WAREHOUSE_ID[INT],
	@DRIVER_ID[INT]= NULL,
	@EMPLOYEE_ID[INT]= NULL
)
AS
	BEGIN
		INSERT INTO PICKUP 
			(SUPPLIER_ID, WAREHOUSE_ID, DRIVER_ID, EMPLOYEE_ID)
		VALUES
			(@SUPPLIER_ID, @WAREHOUSE_ID, @DRIVER_ID, @EMPLOYEE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_pickup_line'
GO
CREATE PROCEDURE sp_create_pickup_line
(
	@PICKUP_ID[INT],
	@PRODUCT_LOT_ID[INT],
	@QUANTITY[INT],
	@PICK_UP_STATUS[BIT]
)
AS
	BEGIN
		INSERT INTO PICKUP_LINE 
			(PICKUP_ID, PRODUCT_LOT_ID, QUANTITY, PICK_UP_STATUS)
		VALUES
			(@PICKUP_ID, @PRODUCT_LOT_ID, @QUANTITY, @PICK_UP_STATUS)
		RETURN @@ROWCOUNT
	END
GO

print '' print '*** Creating sp_create_product'
GO
CREATE PROCEDURE [dbo].[sp_create_product]
(
	@NAME[NVARCHAR](50),
	@DESCRIPTION[NVARCHAR](200),
	@UNIT_PRICE[DECIMAL](10,2),
	@IMAGE_BINARY[IMAGE],
	@ACTIVE[BIT],
	@UNIT_OF_MEASUREMENT[NVARCHAR](20),
	@DELIVERY_CHARGE_PER_UNIT[DECIMAL](5,2)
)
AS
	BEGIN
		INSERT INTO [dbo].[Product]
			(NAME, DESCRIPTION, UNIT_PRICE, IMAGE_BINARY, ACTIVE, UNIT_OF_MEASUREMENT, DELIVERY_CHARGE_PER_UNIT)
		VALUES
			(@NAME, @DESCRIPTION, @UNIT_PRICE, @IMAGE_BINARY, @ACTIVE, @UNIT_OF_MEASUREMENT, @DELIVERY_CHARGE_PER_UNIT)
		RETURN @@ROWCOUNT
	END
GO
/* Very nice looking, but completely redundant with sp_create_product, to the point of originally being identical. If this is found missing in the solution (and it doesn't seem to be used at all right now), switch the reference to that.
print '' print '*** Creating sp_create_new_product'
GO
CREATE PROCEDURE [dbo].[sp_create_new_product]
	(
			@Name				[nvarchar](50)	,
			@Description		[nvarchar](200)	,
			@Unit_Price			[decimal](10,2)	,
			@Image_Binary		[image]			,
			@Active				[bit]			,
			@Unit_Of_Measurement [nvarchar](20)	,
			@DELIVERY_CHARGE_PER_UNIT	[decimal](5,2)
	)
AS
	BEGIN
		INSERT INTO [dbo].[Product]
		(
			Name						,
			Description					,
			Unit_Price					,
			Image_Binary				,
			Active						,
			Unit_Of_Measurement 		,
			DELIVERY_CHARGE_PER_UNIT
		)
		VALUES
		(
			@Name						,
			@Description				,
			@Unit_Price					,
			@Image_Binary				,
			@Active						,
			@Unit_Of_Measurement 		,
			@DELIVERY_CHARGE_PER_UNIT
		)
		RETURN @@ROWCOUNT
	END
GO
*/
print '' print  '*** Creating procedure sp_create_product_category'
GO
CREATE PROCEDURE sp_create_product_category
(
	@PRODUCT_ID[INT],
	@CATEGORY_ID[NVARCHAR](200)
)
AS
	BEGIN
		INSERT INTO PRODUCT_CATEGORY 
			(PRODUCT_ID, CATEGORY_ID)
		VALUES
			(@PRODUCT_ID, @CATEGORY_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_product_grade_price'
GO
CREATE PROCEDURE sp_create_product_grade_price
(
	@PRODUCT_ID[INT],
	@GRADE_ID[NVARCHAR](250),
	@PRICE[DECIMAL](5,2)
)
AS
	BEGIN
		INSERT INTO PRODUCT_GRADE_PRICE 
			(PRODUCT_ID, GRADE_ID, PRICE)
		VALUES
			(@PRODUCT_ID, @GRADE_ID, @PRICE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_product_lot'
GO
CREATE PROCEDURE sp_create_product_lot
(
	@WAREHOUSE_ID[INT],
	@SUPPLIER_ID[INT],
	@LOCATION_ID[INT],
	@PRODUCT_ID[INT],
	@SUPPLY_MANAGER_ID[INT],
	@QUANTITY[INT],
	@AVAILABLE_QUANTITY[INT],
	@DATE_RECEIVED[DATETIME],
	@EXPIRATION_DATE[DATETIME]
)
AS
	BEGIN
		INSERT INTO PRODUCT_LOT 
			(WAREHOUSE_ID, SUPPLIER_ID, LOCATION_ID, PRODUCT_ID, SUPPLY_MANAGER_ID, QUANTITY, AVAILABLE_QUANTITY, DATE_RECEIVED, EXPIRATION_DATE)
		VALUES
			(@WAREHOUSE_ID, @SUPPLIER_ID, @LOCATION_ID, @PRODUCT_ID, @SUPPLY_MANAGER_ID, @QUANTITY, @AVAILABLE_QUANTITY, @DATE_RECEIVED, @EXPIRATION_DATE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_product_order'
GO
CREATE PROCEDURE sp_create_product_order
(
	@CUSTOMER_ID[INT],
	@EMPLOYEE_ID[INT],
	@ORDER_TYPE_ID[NVARCHAR](250),
	@ADDRESS_TYPE[NVARCHAR],
	@DELIVERY_TYPE_ID[NVARCHAR](50),
	@AMOUNT[DECIMAL](6,2),
	@ORDER_DATE[DATETIME],
	@DATE_EXPECTED[DATETIME],
	@DISCOUNT[DECIMAL](5,2),
	@ORDER_STATUS_ID[NVARCHAR](50),
	@USER_ADDRESS_ID[INT],
	@HAS_ARRIVED[BIT]
)
AS
	BEGIN
	INSERT INTO PRODUCT_ORDER 
		(CUSTOMER_ID, EMPLOYEE_ID, ORDER_TYPE_ID, ADDRESS_TYPE, DELIVERY_TYPE_ID, AMOUNT, ORDER_DATE, DATE_EXPECTED, DISCOUNT, ORDER_STATUS_ID, USER_ADDRESS_ID, HAS_ARRIVED)
	VALUES
		(@CUSTOMER_ID, @EMPLOYEE_ID, @ORDER_TYPE_ID, @ADDRESS_TYPE, @DELIVERY_TYPE_ID, @AMOUNT, @ORDER_DATE, @DATE_EXPECTED, @DISCOUNT, @ORDER_STATUS_ID, @USER_ADDRESS_ID, @HAS_ARRIVED)
	SELECT SCOPE_IDENTITY()
	END
GO

print '' print  '*** Creating procedure sp_create_product_review'
GO
CREATE PROCEDURE sp_create_product_review
(
	@PRODUCT_ID[INT],
	@USER_ID[INT],
	@SUPPLIER_ID[INT],
	@RATING[INT],
	@NOTES[NVARCHAR](1000)
)
AS
	BEGIN
		INSERT INTO PRODUCT_REVIEW 
			(PRODUCT_ID, USER_ID, SUPPLIER_ID, RATING, NOTES)
		VALUES
			(@PRODUCT_ID, @USER_ID, @SUPPLIER_ID, @RATING, @NOTES)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_repair'
GO
CREATE PROCEDURE sp_create_repair
(
	@VEHICLE_ID[INT]
)
AS
	BEGIN
		INSERT INTO REPAIR 
			(VEHICLE_ID)
		VALUES
			(@VEHICLE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_repair_line'
GO
CREATE PROCEDURE sp_create_repair_line
(
	@REPAIR_ID[INT],
	@REPAIR_DESCRIPTION[NVARCHAR](250)
)
AS
	BEGIN
		INSERT INTO REPAIR_LINE 
			(REPAIR_ID, REPAIR_DESCRIPTION)
		VALUES
			(@REPAIR_ID, @REPAIR_DESCRIPTION)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_role'
GO
CREATE PROCEDURE sp_create_role
(
	@ROLE_ID[NVARCHAR](250),
	@DESCRIPTION[NVARCHAR](1000)
)
AS
	BEGIN
		INSERT INTO ROLE 
			(ROLE_ID, DESCRIPTION)
		VALUES
			(@ROLE_ID, @DESCRIPTION)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_route'
GO
CREATE PROCEDURE sp_create_route
(
	@VEHICLE_ID[INT],
	@DRIVER_ID[INT],
	@ASSIGNED_DATE[DATETIME]
)
AS
	BEGIN
		INSERT INTO ROUTE 
			(VEHICLE_ID, DRIVER_ID, ASSIGNED_DATE)
		VALUES
			(@VEHICLE_ID, @DRIVER_ID, @ASSIGNED_DATE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_shipping_address'
GO
CREATE PROCEDURE sp_create_shipping_address
(
	@USER_ID[INT],
	@ADDRESS1[NVARCHAR](100),
	@ADDRESS2[NVARCHAR](100)= NULL,
	@CITY[NVARCHAR](50),
	@STATE[NCHAR](2),
	@ZIP[NVARCHAR](10),
	@ADDRESS_NAME[NVARCHAR](50)
)
AS
	BEGIN
		INSERT INTO SHIPPING_ADDRESS (
			USER_ID, ADDRESS1, ADDRESS2, CITY, STATE, ZIP, ADDRESS_NAME)
		VALUES
			(@USER_ID, @ADDRESS1, @ADDRESS2, @CITY, @STATE, @ZIP, @ADDRESS_NAME)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_status'
GO
CREATE PROCEDURE sp_create_status
(
	@STATUS_ID[NVARCHAR](50)
)
AS
	BEGIN
		INSERT INTO STATUS 
			(STATUS_ID)
		VALUES
			(@STATUS_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_supplier'
GO
CREATE PROCEDURE sp_create_supplier
(
	@USER_ID[INT],
	@IS_APPROVED[BIT],
	@APPROVED_BY[INT],
	@FARM_NAME[NVARCHAR](300),
	@FARM_ADDRESS[NVARCHAR](300),
	@FARM_CITY[NVARCHAR](50),
	@FARM_STATE[NCHAR](2),
	@FARM_TAX_ID[NVARCHAR](64)
)
AS
	BEGIN
		INSERT INTO SUPPLIER 
			(USER_ID, IS_APPROVED, APPROVED_BY, FARM_NAME, FARM_ADDRESS, FARM_CITY, FARM_STATE, FARM_TAX_ID)
		VALUES
			(@USER_ID, @IS_APPROVED, @APPROVED_BY, @FARM_NAME, @FARM_ADDRESS, @FARM_CITY, @FARM_STATE, @FARM_TAX_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_supplier_application'
GO
CREATE PROCEDURE sp_create_supplier_application
(
	@USER_ID[INT],
	@FARM_NAME[NVARCHAR](300),
	@FARM_ADDRESS[NVARCHAR](300),
	@FARM_CITY[NVARCHAR](50),
	@FARM_STATE[NCHAR](2),
	@FARM_TAX_ID[NVARCHAR](64)
)
AS
	BEGIN
		INSERT INTO SUPPLIER 
			(USER_ID, FARM_NAME, FARM_ADDRESS, FARM_CITY, FARM_STATE, FARM_TAX_ID)
		VALUES
			(@USER_ID, @FARM_NAME, @FARM_ADDRESS, @FARM_CITY, @FARM_STATE, @FARM_TAX_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print '*** Creating procedure sp_create_supplier_invoice'
GO
CREATE PROCEDURE sp_create_supplier_invoice
(
	@SUPPLIER_ID[INT],
	@INVOICE_DATE[DATETIME],
	@SUB_TOTAL[DECIMAL](6,2),
	@TAX_AMOUNT[DECIMAL](6,2),
	@TOTAL[DECIMAL](6,2),
	@AMOUNT_PAID[DECIMAL](6,2)
)
AS
	BEGIN
		INSERT INTO SUPPLIER_INVOICE
			(SUPPLIER_ID, INVOICE_DATE, SUB_TOTAL, TAX_AMOUNT, TOTAL, AMOUNT_PAID)
		VALUES
			(@SUPPLIER_ID, @INVOICE_DATE, @SUB_TOTAL, @TAX_AMOUNT, @TOTAL, @AMOUNT_PAID)
		SELECT SCOPE_IDENTITY()
	END
GO

print '' print '*** Creating procedure sp_create_supplier_invoice_line'
GO
CREATE PROCEDURE sp_create_supplier_invoice_line
(
	@SUPPLIER_INVOICE_ID[INT],
	@PRODUCT_LOT_ID[INT],
	@QUANTITY_SOLD[INT],
	@PRICE_EACH[DECIMAL](6,2),
	@ITEM_DISCOUNT[DECIMAL](6,2),
	@ITEM_TOTAL[DECIMAL](6,2)
)
AS
	BEGIN
		INSERT INTO SUPPLIER_INVOICE_LINE
			(SUPPLIER_INVOICE_ID, PRODUCT_LOT_ID, QUANTITY_SOLD, PRICE_EACH, ITEM_DISCOUNT, ITEM_TOTAL)
		VALUES
			(@SUPPLIER_INVOICE_ID, @PRODUCT_LOT_ID, @QUANTITY_SOLD, @PRICE_EACH, @ITEM_DISCOUNT, @ITEM_TOTAL)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_supplier_not_approved'
GO
CREATE PROCEDURE sp_create_supplier_not_approved
(
	@USER_ID[INT],
	@IS_APPROVED[BIT],
	@FARM_NAME[NVARCHAR](300),
	@FARM_ADDRESS[NVARCHAR](300),
	@FARM_CITY[NVARCHAR](50),
	@FARM_STATE[NCHAR](2),
	@FARM_TAX_ID[NVARCHAR](64)
)
AS
	BEGIN
		INSERT INTO SUPPLIER 
			(USER_ID, IS_APPROVED, FARM_NAME, FARM_ADDRESS, FARM_CITY, FARM_STATE, FARM_TAX_ID)
		VALUES
			(@USER_ID, @IS_APPROVED, @FARM_NAME, @FARM_ADDRESS, @FARM_CITY, @FARM_STATE, @FARM_TAX_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_user_address'
GO
CREATE PROCEDURE sp_create_user_address
(
	@USER_ADDRESS_ID[INT],
	@USER_ID[INT],
	@ADDRESS_LINE_1[NVARCHAR](50),
	@ADDRESS_LINE_2[NVARCHAR](50),
	@CITY[NVARCHAR](50),
	@STATE[NCHAR](2),
	@ZIP[NVARCHAR](10)
)
AS
	BEGIN
		INSERT INTO USER_ADDRESS 
			(USER_ADDRESS_ID, USER_ID, ADDRESS_LINE_1, ADDRESS_LINE_2, CITY, STATE, ZIP)
		VALUES
			(@USER_ADDRESS_ID, @USER_ID, @ADDRESS_LINE_1, @ADDRESS_LINE_2, @CITY, @STATE, @ZIP)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_user_cart_line'
GO
CREATE PROCEDURE sp_create_user_cart_line
(
	@PRODUCT_ID[INT],
    @GRADE_ID[NVARCHAR](250),
    @QUANTITY[INT],
	@USER_ID[INT]
)
AS
	BEGIN
		INSERT INTO USER_CART_LINE 
			(PRODUCT_ID, GRADE_ID, QUANTITY, USER_ID)
		VALUES
			(@PRODUCT_ID, @GRADE_ID, @QUANTITY, @USER_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_add_to_cart'
GO
CREATE PROCEDURE sp_add_to_cart
(
	@PRODUCT_ID[INT],
    @GRADE_ID[NVARCHAR](250),
    @QUANTITY[INT],
	@USER_ID[INT]
)
AS
	BEGIN
        IF 0<(SELECT COUNT(*) FROM USER_CART_LINE WHERE PRODUCT_ID = @PRODUCT_ID AND @GRADE_ID=GRADE_ID AND USER_ID=@USER_ID)
        BEGIN
            UPDATE USER_CART_LINE
            SET QUANTITY = QUANTITY + @QUANTITY
            WHERE PRODUCT_ID = @PRODUCT_ID AND @GRADE_ID=GRADE_ID AND USER_ID=@USER_ID
        END
        ELSE
        BEGIN
            INSERT INTO USER_CART_LINE 
                (PRODUCT_ID, GRADE_ID, QUANTITY, USER_ID)
            VALUES
                (@PRODUCT_ID, @GRADE_ID, @QUANTITY, @USER_ID)
        END
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_vehicle'
GO
CREATE PROCEDURE sp_create_vehicle
(
	@VIN[NVARCHAR](20),
	@MAKE[NVARCHAR](15),
	@MODEL[NVARCHAR](20),
	@MILEAGE[INT],
	@YEAR[NVARCHAR](4),
	@COLOR[NVARCHAR](20),
	@ACTIVE[BIT],
	@LATEST_REPAIR_DATE[DATE]= NULL,
	@LAST_DRIVER_ID[INT]= NULL,
	@VEHICLE_TYPE_ID[NVARCHAR](50)
)
AS
	BEGIN
		INSERT INTO VEHICLE 
			(VIN, MAKE, MODEL, MILEAGE, YEAR, COLOR, ACTIVE, LATEST_REPAIR_DATE, LAST_DRIVER_ID, VEHICLE_TYPE_ID)
		VALUES
			(@VIN, @MAKE, @MODEL, @MILEAGE, @YEAR, @COLOR, @ACTIVE, @LATEST_REPAIR_DATE, @LAST_DRIVER_ID, @VEHICLE_TYPE_ID);
		--SET NOCOUNT OFF I don't think that this actually does anything here...
		SELECT SCOPE_IDENTITY()
	END
GO

print '' print  '*** Creating procedure sp_create_vehicle_type'
GO
CREATE PROCEDURE sp_create_vehicle_type
(
	@VEHICLE_TYPE_ID[NVARCHAR](50)
)
AS
		BEGIN
		INSERT INTO VEHICLE_TYPE 
			(VEHICLE_TYPE_ID)
		VALUES
			(@VEHICLE_TYPE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_create_warehouse'
GO
CREATE PROCEDURE sp_create_warehouse
(
	@ADDRESS_1[NVARCHAR](50),
	@ADDRESS_2[NVARCHAR](50),
	@CITY[NVARCHAR](50),
	@STATE[NCHAR](2),
	@ZIP[NVARCHAR](10)
)
AS
	BEGIN
		INSERT INTO WAREHOUSE 
			(ADDRESS_1, ADDRESS_2, CITY, STATE, ZIP)
		VALUES
			(@ADDRESS_1, @ADDRESS_2, @CITY, @STATE, @ZIP)
		SELECT SCOPE_IDENTITY()
	END
GO

print '' print  '*** Creating procedure sp_create_wishlist_line'
GO
CREATE PROCEDURE sp_create_wishlist_line
(
	@CUSTOMER_ID[INT],
	@PRODUCT_ID[INT]
)
AS
	BEGIN
		INSERT INTO WISHLIST_LINE 
			(CUSTOMER_ID, PRODUCT_ID)
		VALUES
			(@CUSTOMER_ID, @PRODUCT_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating DELETE stored procedures'
GO

print '' print  '*** Creating procedure sp_delete_agreement'
GO
CREATE PROCEDURE sp_delete_agreement
(
	@AGREEMENT_ID[INT]
)
AS
	BEGIN
		DELETE FROM agreement
		WHERE AGREEMENT_ID = @AGREEMENT_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_app_user'
GO
CREATE PROCEDURE sp_delete_app_user
(
	@USER_ID[INT]
)
AS
	BEGIN
		DELETE FROM app_user
		WHERE USER_ID = @USER_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_backorder_preorder'
GO
CREATE PROCEDURE sp_delete_backorder_preorder
(
	@BACKORDER_PREORDER_ID[INT]
)
AS
	BEGIN
		DELETE FROM backorder_preorder
		WHERE BACKORDER_PREORDER_ID = @BACKORDER_PREORDER_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_category'
GO
CREATE PROCEDURE sp_delete_category
(
	@CATEGORY_ID[NVARCHAR](200)
)
AS
	BEGIN
		DELETE FROM category
		WHERE CATEGORY_ID = @CATEGORY_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_charity'
GO
CREATE PROCEDURE sp_delete_charity
(
	@CHARITY_ID[INT]
)
AS
	BEGIN
		DELETE FROM charity
		WHERE CHARITY_ID = @CHARITY_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_charity_products'
GO
CREATE PROCEDURE sp_delete_charity_products
(
	@CHARITY_ID[INT],
	@PRODUCT_LOT_ID[INT]
)
AS
	BEGIN
		DELETE FROM charity_products
		WHERE CHARITY_ID = @CHARITY_ID
		AND PRODUCT_LOT_ID = @PRODUCT_LOT_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_commercial'
GO
CREATE PROCEDURE sp_delete_commercial
(
	@COMMERCIAL_ID[INT]
)
AS
	BEGIN
		DELETE FROM commercial
		WHERE COMMERCIAL_ID = @COMMERCIAL_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_customer'
GO
CREATE PROCEDURE sp_delete_customer
(
	@CUSTOMER_ID[INT]
)
AS
	BEGIN
		DELETE FROM customer
		WHERE CUSTOMER_ID = @CUSTOMER_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_deal'
GO
CREATE PROCEDURE sp_delete_deal
(
	@DEAL_ID[INT]
)
AS
	BEGIN
		DELETE FROM deal
		WHERE DEAL_ID = @DEAL_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_deal_category'
GO
CREATE PROCEDURE sp_delete_deal_category
(
	@DEAL_ID[INT],
	@CATEGORY_ID[NVARCHAR](200)
)
AS
	BEGIN
		DELETE FROM deal_category
		WHERE DEAL_ID = @DEAL_ID
		AND CATEGORY_ID = @CATEGORY_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_deal_product'
GO
CREATE PROCEDURE sp_delete_deal_product
(
	@DEAL_ID[INT],
	@PRODUCT_ID[INT]
)
AS
	BEGIN
		DELETE FROM deal_product
		WHERE DEAL_ID = @DEAL_ID
		AND PRODUCT_ID = @PRODUCT_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_delivery'
GO
CREATE PROCEDURE sp_delete_delivery
(
	@DELIVERY_ID[INT]
)
AS
	BEGIN
		DELETE FROM delivery
		WHERE DELIVERY_ID = @DELIVERY_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_delivery_type'
GO
CREATE PROCEDURE sp_delete_delivery_type
(
	@DELIVERY_TYPE_ID[NVARCHAR](50)
)
AS
	BEGIN
		DELETE FROM delivery_type
		WHERE DELIVERY_TYPE_ID = @DELIVERY_TYPE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_dispatcher_message'
GO
CREATE PROCEDURE sp_delete_dispatcher_message
(
	@DISPATCHER_MESSAGE_ID[INT]
)
AS
	BEGIN
		DELETE FROM dispatcher_message
		WHERE DISPATCHER_MESSAGE_ID = @DISPATCHER_MESSAGE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_driver'
GO
CREATE PROCEDURE sp_delete_driver
(
	@DRIVER_ID[INT]
)
AS
	BEGIN
		DELETE FROM driver
		WHERE DRIVER_ID = @DRIVER_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_employee'
GO
CREATE PROCEDURE sp_delete_employee
(
	@EMPLOYEE_ID[INT]
)
AS
	BEGIN
		DELETE FROM employee
		WHERE EMPLOYEE_ID = @EMPLOYEE_ID
		RETURN @@ROWCOUNT
	END
GO


print '' print  '*** Creating procedure sp_delete_test_employee'
GO
CREATE PROCEDURE sp_delete_test_employee
AS
	BEGIN
		DELETE FROM employee
		WHERE SALARY = 100 AND ACTIVE = 'True' AND DATE_OF_BIRTH = '1000-01-01' 
		RETURN @@ROWCOUNT
	END
GO


print '' print  '*** Creating procedure sp_delete_test_commercial_customer'
GO
CREATE PROCEDURE sp_delete_test_commercial_customer
(
	@User_ID	[INT]
)
AS
	BEGIN
		DELETE FROM commercial
		WHERE User_ID = @User_ID AND FEDERAL_TAX_ID = 123456789
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_test_product'
GO
CREATE PROCEDURE sp_delete_test_product
AS
	BEGIN
		DELETE FROM product
		WHERE NAME = "Test Product" AND DESCRIPTION = "A test product"
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_employee_message'
GO
CREATE PROCEDURE sp_delete_employee_message
(
	@MESSAGE_ID[INT]
)
AS
	BEGIN
		DELETE FROM employee_message
		WHERE MESSAGE_ID = @MESSAGE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_employee_order_responsibility'
GO
CREATE PROCEDURE sp_delete_employee_order_responsibility
(
	@ORDER_ID[INT],
	@EMPLOYEE_ID[INT]
)
AS
	BEGIN
		DELETE FROM employee_order_responsibility
		WHERE ORDER_ID = @ORDER_ID
		AND EMPLOYEE_ID = @EMPLOYEE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_employee_role'
GO
CREATE PROCEDURE sp_delete_employee_role
(
	@EMPLOYEE_ID[INT],
	@ROLE_ID[NVARCHAR](250)
)
AS
	BEGIN
		DELETE FROM employee_role
		WHERE EMPLOYEE_ID = @EMPLOYEE_ID
		AND ROLE_ID = @ROLE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_grade'
GO
CREATE PROCEDURE sp_delete_grade
(
	@GRADE_ID[NVARCHAR](250)
)
AS
	BEGIN
		DELETE FROM grade
		WHERE GRADE_ID = @GRADE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_inspection'
GO
CREATE PROCEDURE sp_delete_inspection
(
	@INSPECTION_ID[INT]
)
AS
	BEGIN
		DELETE FROM inspection
		WHERE INSPECTION_ID = @INSPECTION_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_location'
GO
CREATE PROCEDURE sp_delete_location
(
	@LOCATION_ID[INT]
)
AS
	BEGIN
		DELETE FROM location
		WHERE LOCATION_ID = @LOCATION_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_maintenance_schedule'
GO
CREATE PROCEDURE sp_delete_maintenance_schedule
(
	@MAINTENANCE_SCHEDULE_ID[INT]
)
AS
	BEGIN
		DELETE FROM maintenance_schedule
		WHERE MAINTENANCE_SCHEDULE_ID = @MAINTENANCE_SCHEDULE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_maintenance_schedule_line'
GO
CREATE PROCEDURE sp_delete_maintenance_schedule_line
(
	@MAINTENANCE_SCHEDULE_LINE_ID[INT]
)
AS
	BEGIN
		DELETE FROM maintenance_schedule_line
		WHERE MAINTENANCE_SCHEDULE_LINE_ID = @MAINTENANCE_SCHEDULE_LINE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_message_line'
GO
CREATE PROCEDURE sp_delete_message_line
(
	@MESSAGE_LINE_ID[INT]
)
AS
	BEGIN
		DELETE FROM message_line
		WHERE MESSAGE_LINE_ID = @MESSAGE_LINE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_order_status'
GO
CREATE PROCEDURE sp_delete_order_status
(
	@ORDER_STATUS_ID[NVARCHAR](50)
)
AS
	BEGIN
		DELETE FROM order_status
		WHERE ORDER_STATUS_ID = @ORDER_STATUS_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_order_type'
GO
CREATE PROCEDURE sp_delete_order_type
(
	@ORDER_TYPE_ID[NVARCHAR](250)
)
AS
	BEGIN
		DELETE FROM order_type
		WHERE ORDER_TYPE_ID = @ORDER_TYPE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_package'
GO
CREATE PROCEDURE sp_delete_package
(
	@PACKAGE_ID[INT]
)
AS
	BEGIN
		DELETE FROM package
		WHERE PACKAGE_ID = @PACKAGE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_package_line'
GO
CREATE PROCEDURE sp_delete_package_line
(
	@PACKAGE_LINE_ID[INT]
)
AS
	BEGIN
		DELETE FROM package_line
		WHERE PACKAGE_LINE_ID = @PACKAGE_LINE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_pickup'
GO
CREATE PROCEDURE sp_delete_pickup
(
	@PICKUP_ID[INT]
)
AS
	BEGIN
		DELETE FROM pickup
		WHERE PICKUP_ID = @PICKUP_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_pickup_line'
GO
CREATE PROCEDURE sp_delete_pickup_line
(
	@PICKUP_LINE_ID[INT]
)
AS
	BEGIN
		DELETE FROM pickup_line
		WHERE PICKUP_LINE_ID = @PICKUP_LINE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_product'
GO
CREATE PROCEDURE sp_delete_product
(
	@PRODUCT_ID[INT]
)
AS
	BEGIN
		DELETE FROM product
		WHERE PRODUCT_ID = @PRODUCT_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_product_category'
GO
CREATE PROCEDURE sp_delete_product_category
(
	@PRODUCT_ID[INT],
	@CATEGORY_ID[NVARCHAR](200)
)
AS
	BEGIN
		DELETE FROM product_category
		WHERE PRODUCT_ID = @PRODUCT_ID
		AND CATEGORY_ID = @CATEGORY_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_product_grade_price'
GO
CREATE PROCEDURE sp_delete_product_grade_price
(
	@PRODUCT_ID[INT],
	@GRADE_ID[NVARCHAR](250)
)
AS
	BEGIN
		DELETE FROM product_grade_price
		WHERE PRODUCT_ID = @PRODUCT_ID
		AND GRADE_ID = @GRADE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_product_lot'
GO
CREATE PROCEDURE sp_delete_product_lot
(
	@PRODUCT_LOT_ID[INT]
)
AS
	BEGIN
		DELETE FROM product_lot
		WHERE PRODUCT_LOT_ID = @PRODUCT_LOT_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_product_order'
GO
CREATE PROCEDURE sp_delete_product_order
(
	@ORDER_ID[INT]
)
AS
	BEGIN
		DELETE FROM product_order
		WHERE ORDER_ID = @ORDER_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_product_review'
GO
CREATE PROCEDURE sp_delete_product_review
(
	@REVIEW_ID[INT]
)
AS
	BEGIN
		DELETE FROM product_review
		WHERE REVIEW_ID = @REVIEW_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_repair'
GO
CREATE PROCEDURE sp_delete_repair
(
	@REPAIR_ID[INT]
)
AS
	BEGIN
		DELETE FROM repair
		WHERE REPAIR_ID = @REPAIR_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_repair_line'
GO
CREATE PROCEDURE sp_delete_repair_line
(
	@REPAIR_LINE_ID[INT]
)
AS
	BEGIN
		DELETE FROM repair_line
		WHERE REPAIR_LINE_ID = @REPAIR_LINE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_role'
GO
CREATE PROCEDURE sp_delete_role
(
	@ROLE_ID[NVARCHAR](250)
)
AS
	BEGIN
		DELETE FROM role
		WHERE ROLE_ID = @ROLE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_route'
GO
CREATE PROCEDURE sp_delete_route
(
	@ROUTE_ID[INT]
)
AS
	BEGIN
		DELETE FROM route
		WHERE ROUTE_ID = @ROUTE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_shipping_address'
GO
CREATE PROCEDURE sp_delete_shipping_address
(
	@ADDRESS_ID[INT]
)
AS
	BEGIN
		DELETE FROM shipping_address
		WHERE ADDRESS_ID = @ADDRESS_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_status'
GO
CREATE PROCEDURE sp_delete_status
(
	@STATUS_ID[NVARCHAR](50)
)
AS
	BEGIN
		DELETE FROM status
		WHERE STATUS_ID = @STATUS_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_supplier'
GO
CREATE PROCEDURE sp_delete_supplier
(
	@SUPPLIER_ID[INT]
)
AS
	BEGIN
		DELETE FROM supplier
		WHERE SUPPLIER_ID = @SUPPLIER_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_supplier_invoice'
GO
CREATE PROCEDURE sp_delete_supplier_invoice
(
	@SUPPLIER_INVOICE_ID[INT]
)
AS
	BEGIN
		DELETE FROM supplier_invoice
		WHERE SUPPLIER_INVOICE_ID = @SUPPLIER_INVOICE_ID
	END
GO

Print '' print  ' *** creating procedure sp_delete_test_user'
GO
Create PROCEDURE sp_delete_test_user
AS
	BEGIN
		DELETE FROM APP_USER 
		WHERE USER_NAME = "Test"
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_user_address'
GO
CREATE PROCEDURE sp_delete_user_address
(
	@USER_ADDRESS_ID[INT]
)
AS
	BEGIN
		DELETE FROM user_address
		WHERE USER_ADDRESS_ID = @USER_ADDRESS_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_user_cart_line'
GO
CREATE PROCEDURE sp_delete_user_cart_line
(
	@PRODUCT_ID[INT],
    @GRADE_ID[NVARCHAR](250),
	@USER_ID[INT]
)
AS
	BEGIN
		DELETE FROM user_cart_line
		WHERE PRODUCT_ID = @PRODUCT_ID
		AND USER_ID = @USER_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_remove_from_cart'
GO
CREATE PROCEDURE sp_remove_from_cart
(
	@PRODUCT_ID[INT],
    @GRADE_ID[NVARCHAR](250),
    @QUANTITY[INT],
	@USER_ID[INT]
)
AS
	BEGIN
        IF 0=(SELECT COUNT(*) FROM USER_CART_LINE 
                WHERE PRODUCT_ID = @PRODUCT_ID 
                AND USER_ID = @USER_ID
                AND GRADE_ID = @GRADE_ID) OR
            @QUANTITY > (SELECT QUANTITY FROM USER_CART_LINE 
                WHERE PRODUCT_ID = @PRODUCT_ID 
                AND USER_ID = @USER_ID
                AND GRADE_ID = @GRADE_ID)
        BEGIN
            RETURN -1
        END
        IF @QUANTITY = (SELECT QUANTITY FROM USER_CART_LINE 
                WHERE PRODUCT_ID = @PRODUCT_ID 
                AND USER_ID = @USER_ID
                AND GRADE_ID = @GRADE_ID)
        BEGIN
            DELETE FROM user_cart_line
            WHERE PRODUCT_ID = @PRODUCT_ID
            AND GRADE_ID = @GRADE_ID
            AND USER_ID = @USER_ID
            RETURN @@ROWCOUNT
        END
        
        UPDATE USER_CART_LINE
        SET QUANTITY = QUANTITY - @QUANTITY
        WHERE PRODUCT_ID = @PRODUCT_ID AND @GRADE_ID=GRADE_ID AND USER_ID=@USER_ID
        RETURN @@ROWCOUNT
        
	END
GO

print '' print  '*** Creating procedure sp_delete_vehicle'
GO
CREATE PROCEDURE sp_delete_vehicle
(
	@VEHICLE_ID[INT]
)
AS
	BEGIN
		DELETE FROM vehicle
		WHERE VEHICLE_ID = @VEHICLE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_vehicle_type'
GO
CREATE PROCEDURE sp_delete_vehicle_type
(
	@VEHICLE_TYPE_ID[NVARCHAR](50)
)
AS
	BEGIN
		DELETE FROM vehicle_type
		WHERE VEHICLE_TYPE_ID = @VEHICLE_TYPE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_warehouse'
GO
CREATE PROCEDURE sp_delete_warehouse
(
	@WAREHOUSE_ID[INT]
)
AS
	BEGIN
		DELETE FROM warehouse
		WHERE WAREHOUSE_ID = @WAREHOUSE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_delete_wishlist_line'
GO
CREATE PROCEDURE sp_delete_wishlist_line
(
	@CUSTOMER_ID[INT],
	@PRODUCT_ID[INT]
)
AS
	BEGIN
		DELETE FROM wishlist_line
		WHERE CUSTOMER_ID = @CUSTOMER_ID
		AND PRODUCT_ID = @PRODUCT_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating RETRIEVE stored procedures'
GO

print '' print  '*** Creating procedure sp_login'
GO
CREATE PROCEDURE sp_login 
(
    @Username[NVARCHAR](64),
    @Password_Hash[NVARCHAR](64)
)
AS
	BEGIN
		SELECT USER_ID, FIRST_NAME, LAST_NAME, PHONE, E_MAIL_ADDRESS, E_MAIL_PREFERENCES, USER_NAME, ACTIVE, ADDRESS1, ADDRESS2, CITY, STATE, ZIP
		FROM app_user
		WHERE USER_NAME = @Username
		AND PASSWORD_HASH = @Password_Hash
	END
GO

print '' print  '*** Creating procedure sp_web_login'
GO
CREATE PROCEDURE sp_web_login 
(
    @EmailAddress[NVARCHAR](50),
    @Password_Hash[NVARCHAR](64)
)
AS
	BEGIN
		SELECT USER_ID, FIRST_NAME, LAST_NAME, PHONE, E_MAIL_ADDRESS, E_MAIL_PREFERENCES, USER_NAME, ACTIVE, ADDRESS1, ADDRESS2, CITY, STATE, ZIP
		FROM app_user
		WHERE E_MAIL_ADDRESS = @EmailAddress
		AND PASSWORD_HASH = @Password_Hash
	END
GO

print '' print  '*** Creating procedure sp_retrieve_agreement'
GO
CREATE PROCEDURE sp_retrieve_agreement
(
	@AGREEMENT_ID[INT]
)
AS
	BEGIN
		SELECT AGREEMENT_ID, PRODUCT_ID, SUPPLIER_ID, DATE_SUBMITTED, IS_APPROVED, APPROVED_BY, ACTIVE
		FROM agreement
		WHERE AGREEMENT_ID = @AGREEMENT_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_agreement_list_by_supplier_id'
GO
CREATE PROCEDURE sp_retrieve_agreement_list_by_supplier_id
(
	@SUPPLIER_ID [INT]
)
AS
	BEGIN
		SELECT AGREEMENT_ID, PRODUCT_ID, SUPPLIER_ID, DATE_SUBMITTED, IS_APPROVED, APPROVED_BY, ACTIVE
		FROM agreement
		WHERE SUPPLIER_ID = @SUPPLIER_ID
		AND ACTIVE = 1
	END
GO

print '' print  '*** Creating procedure sp_retrieve_agreement_list'
GO
CREATE PROCEDURE sp_retrieve_agreement_list
AS
	BEGIN
		SELECT AGREEMENT_ID, PRODUCT_ID, SUPPLIER_ID, DATE_SUBMITTED, IS_APPROVED, APPROVED_BY, ACTIVE
		FROM agreement
	END
GO

print '' print  '*** Creating procedure sp_retrieve_app_user'
GO
CREATE PROCEDURE sp_retrieve_app_user
(
	@USER_ID[INT]
)
AS
	BEGIN
		SELECT USER_ID, FIRST_NAME, LAST_NAME, PHONE, E_MAIL_ADDRESS, E_MAIL_PREFERENCES, USER_NAME, ACTIVE, ADDRESS1, ADDRESS2, CITY, STATE, ZIP
		FROM app_user
		WHERE USER_ID = @USER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_app_user_by_username'
GO
CREATE PROCEDURE sp_retrieve_app_user_by_username
(
	@USERNAME [NVARCHAR](50)
)
AS
	BEGIN
		SELECT USER_ID, FIRST_NAME, LAST_NAME, PHONE, E_MAIL_ADDRESS, E_MAIL_PREFERENCES, USER_NAME, ACTIVE, ADDRESS1, ADDRESS2, CITY, STATE, ZIP
		FROM app_user
		WHERE USER_NAME = @USERNAME
	END
GO

print '' print  '*** Creating procedure sp_retrieve_app_user_list'
GO
CREATE PROCEDURE sp_retrieve_app_user_list
AS
	BEGIN
		SELECT USER_ID, FIRST_NAME, LAST_NAME, PHONE, E_MAIL_ADDRESS, E_MAIL_PREFERENCES, USER_NAME, ACTIVE, ADDRESS1, ADDRESS2, CITY, STATE, ZIP
		FROM app_user
	END
GO

print '' print  '*** Creating procedure sp_retrieve_backorder_preorder'
GO
CREATE PROCEDURE sp_retrieve_backorder_preorder
(
	@BACKORDER_PREORDER_ID[INT]
)
AS
	BEGIN
		SELECT BACKORDER_PREORDER_ID, ORDER_ID, CUSTOMER_ID, AMOUNT, DATE_PLACED, DATE_EXPECTED, HAS_ARRIVED, ADDRESS_1, ADDRESS_2, CITY, STATE, ZIP
		FROM backorder_preorder
		WHERE BACKORDER_PREORDER_ID = @BACKORDER_PREORDER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_category'
GO
CREATE PROCEDURE sp_retrieve_category
(
	@CATEGORY_ID[NVARCHAR](200)
)
AS
	BEGIN
		SELECT CATEGORY_ID
		FROM category
		WHERE CATEGORY_ID = @CATEGORY_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_category_list'
GO
CREATE PROCEDURE sp_retrieve_category_list
AS
	BEGIN
		SELECT CATEGORY_ID
		FROM category
	END
GO

print '' print  '*** Creating procedure sp_retrieve_charity'
GO
CREATE PROCEDURE sp_retrieve_charity
(
	@CHARITY_ID[INT]
)
AS
	BEGIN
		SELECT CHARITY_ID, USER_ID, EMPLOYEE_ID, CHARITY_NAME, CONTACT_FIRST_NAME, CONTACT_LAST_NAME, PHONE_NUMBER, EMAIL, CONTACT_HOURS, STATUS
		FROM charity
		WHERE CHARITY_ID = @CHARITY_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_charity_products'
GO
CREATE PROCEDURE sp_retrieve_charity_products
(
	@CHARITY_ID[INT],
	@PRODUCT_LOT_ID[INT]
)
AS
	BEGIN
		SELECT CHARITY_ID, PRODUCT_LOT_ID, QUANTITY
		FROM charity_products
		WHERE CHARITY_ID = @CHARITY_ID
		AND PRODUCT_LOT_ID = @PRODUCT_LOT_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_charity_products_list'
GO
CREATE PROCEDURE sp_retrieve_charity_products_list
AS
	BEGIN
		SELECT CHARITY_ID, PRODUCT_LOT_ID, QUANTITY
		FROM charity_products
	END
GO

print '' print  '*** Creating procedure sp_retrieve_charity_list'
GO
CREATE PROCEDURE sp_retrieve_charity_list
AS
	BEGIN
		SELECT CHARITY_ID, USER_ID, EMPLOYEE_ID, CHARITY_NAME, CONTACT_FIRST_NAME, CONTACT_LAST_NAME, PHONE_NUMBER, EMAIL, CONTACT_HOURS, STATUS
		FROM charity
	END
GO

print '' print  '*** Creating procedure sp_retrieve_commercial'
GO
CREATE PROCEDURE sp_retrieve_commercial
(
	@COMMERCIAL_ID[INT]
)
AS
	BEGIN
		SELECT COMMERCIAL_ID, USER_ID
		FROM commercial
		WHERE COMMERCIAL_ID = @COMMERCIAL_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_commercial_list'
GO
CREATE PROCEDURE sp_retrieve_commercial_list
AS
	BEGIN
		SELECT COMMERCIAL_ID, USER_ID, IS_APPROVED, APPROVED_BY, FEDERAL_TAX_ID, ACTIVE
		FROM commercial
	END
GO

print '' print '*** Creating procedure sp_retrieve_company_order_by_id'
GO
CREATE PROCEDURE sp_retrieve_company_order_by_id
(
	@COMPANY_ORDER_ID[INT]
)
AS
	BEGIN
		SELECT COMPANY_ORDER_ID, EMPLOYEE_ID, SUPPLIER_ID, AMOUNT, ORDER_DATE, HAS_ARRIVED, ACTIVE
		FROM company_order
		WHERE COMPANY_ORDER_ID = @COMPANY_ORDER_ID
	END
GO

print '' print '*** Creating procedure sp_retrieve_company_order_list'
GO
CREATE PROCEDURE sp_retrieve_company_order_list
AS
	BEGIN
		SELECT COMPANY_ORDER_ID, EMPLOYEE_ID, SUPPLIER_ID, AMOUNT, ORDER_DATE, HAS_ARRIVED, ACTIVE
		FROM company_order
	END
GO

print '' print '*** Creating procedure sp_retrieve_company_order_list_by_supplier_id'
GO
CREATE PROCEDURE sp_retrieve_company_order_list_by_supplier_id
(
	@SUPPLIER_ID[INT]
)
AS
	BEGIN
		SELECT COMPANY_ORDER_ID, EMPLOYEE_ID, SUPPLIER_ID, AMOUNT, ORDER_DATE, HAS_ARRIVED, ACTIVE
		FROM company_order
		WHERE SUPPLIER_ID = @SUPPLIER_ID
	END
GO

print '' print '*** Creating procedure sp_retrieve_company_order_lines_by_order_id'
GO
CREATE PROCEDURE sp_retrieve_company_order_lines_by_order_id
(
	@COMPANY_ORDER_ID[INT]
)
AS
	BEGIN
		SELECT COMPANY_ORDER_ID, PRODUCT_ID, PRODUCT_NAME, QUANTITY, UNIT_PRICE, TOTAL_PRICE
		FROM company_order_line
		WHERE COMPANY_ORDER_ID = @COMPANY_ORDER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_customer'
GO
CREATE PROCEDURE sp_retrieve_customer
(
	@CUSTOMER_ID[INT]
)
AS
	BEGIN
		SELECT CUSTOMER_ID
		FROM customer
		WHERE CUSTOMER_ID = @CUSTOMER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_customer_list'
GO
CREATE PROCEDURE sp_retrieve_customer_list
AS
	BEGIN
		SELECT CUSTOMER_ID
		FROM customer
	END
GO

print '' print  '*** Creating procedure sp_retrieve_deal'
GO
CREATE PROCEDURE sp_retrieve_deal
(
	@DEAL_ID[INT]
)
AS
	BEGIN
		SELECT DEAL_ID, DESCRIPTION, CODE, AMOUNT, PERCENT_OFF
		FROM deal
		WHERE DEAL_ID = @DEAL_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_deal_category'
GO
CREATE PROCEDURE sp_retrieve_deal_category
(
	@DEAL_ID[INT],
	@CATEGORY_ID[NVARCHAR](200)
)
AS
	BEGIN
		SELECT DEAL_ID, CATEGORY_ID, ACTIVE
		FROM deal_category
		WHERE DEAL_ID = @DEAL_ID
		AND CATEGORY_ID = @CATEGORY_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_deal_category_list'
GO
CREATE PROCEDURE sp_retrieve_deal_category_list
AS
	BEGIN
		SELECT DEAL_ID, CATEGORY_ID, ACTIVE
		FROM deal_category
	END
GO

print '' print  '*** Creating procedure sp_retrieve_deal_product'
GO
CREATE PROCEDURE sp_retrieve_deal_product
(
	@DEAL_ID[INT],
	@PRODUCT_ID[INT]
)
AS
	BEGIN
		SELECT DEAL_ID, PRODUCT_ID, ACTIVE
		FROM deal_product
		WHERE DEAL_ID = @DEAL_ID
		AND PRODUCT_ID = @PRODUCT_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_deal_product_list'
GO
CREATE PROCEDURE sp_retrieve_deal_product_list
AS
	BEGIN
		SELECT DEAL_ID, PRODUCT_ID, ACTIVE
		FROM deal_product
	END
GO

print '' print  '*** Creating procedure sp_retrieve_deal_list'
GO
CREATE PROCEDURE sp_retrieve_deal_list
AS
	BEGIN
		SELECT DEAL_ID, DESCRIPTION, CODE, AMOUNT, PERCENT_OFF
		FROM deal
	END
GO

print '' print  '*** Creating procedure sp_retrieve_delivery'
GO
CREATE PROCEDURE sp_retrieve_delivery
(
	@DELIVERY_ID[INT]
)
AS
	BEGIN
		SELECT DELIVERY_ID, ROUTE_ID, DELIVERY_DATE, VERIFICATION, STATUS_ID, DELIVERY_TYPE_ID, ORDER_ID
		FROM delivery
		WHERE DELIVERY_ID = @DELIVERY_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_delivery_type'
GO
CREATE PROCEDURE sp_retrieve_delivery_type
(
	@DELIVERY_TYPE_ID[NVARCHAR](50)
)
AS
	BEGIN
		SELECT DELIVERY_TYPE_ID, ACTIVE
		FROM delivery_type
		WHERE DELIVERY_TYPE_ID = @DELIVERY_TYPE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_delivery_type_list'
GO
CREATE PROCEDURE sp_retrieve_delivery_type_list
AS
	BEGIN
	SELECT DELIVERY_TYPE_ID, ACTIVE
	FROM delivery_type
	END
GO

print '' print  '*** Creating procedure sp_retrieve_delivery_list'
GO
CREATE PROCEDURE sp_retrieve_delivery_list
AS
	BEGIN
		SELECT DELIVERY_ID, ROUTE_ID, DELIVERY_DATE, VERIFICATION, STATUS_ID, DELIVERY_TYPE_ID, ORDER_ID
		FROM delivery
	END
GO

print '' print  '*** Creating procedure sp_retrieve_dispatcher_message'
GO
CREATE PROCEDURE sp_retrieve_dispatcher_message
(
	@DISPATCHER_MESSAGE_ID[INT]
)
AS
	BEGIN
		SELECT DISPATCHER_MESSAGE_ID, EMPLOYEE_ID, MESSAGE_NAME, DRIVER_ID
		FROM dispatcher_message
		WHERE DISPATCHER_MESSAGE_ID = @DISPATCHER_MESSAGE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_dispatcher_message_list'
GO
CREATE PROCEDURE sp_retrieve_dispatcher_message_list
AS
	BEGIN
		SELECT DISPATCHER_MESSAGE_ID, EMPLOYEE_ID, MESSAGE_NAME, DRIVER_ID
		FROM dispatcher_message
	END
GO

print '' print  '*** Creating procedure sp_retrieve_driver'
GO
CREATE PROCEDURE sp_retrieve_driver
(
	@DRIVER_ID[INT]
)
AS
	BEGIN
		SELECT DRIVER_ID, DRIVER_LICENSE_NUMBER, LICENSE_EXPIRATION, ACTIVE
		FROM driver
		WHERE DRIVER_ID = @DRIVER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_driver_list'
GO
CREATE PROCEDURE sp_retrieve_driver_list
AS
	BEGIN
		SELECT DRIVER_ID, DRIVER_LICENSE_NUMBER, LICENSE_EXPIRATION, ACTIVE
		FROM driver
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee'
GO
CREATE PROCEDURE sp_retrieve_employee
(
	@EMPLOYEE_ID[INT]
)
AS
	BEGIN
		SELECT EMPLOYEE_ID, USER_ID, SALARY, ACTIVE, DATE_OF_BIRTH
		FROM employee
		WHERE EMPLOYEE_ID = @EMPLOYEE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_by_user_id'
GO
CREATE PROCEDURE sp_retrieve_employee_by_user_id
(
	@USER_ID[INT]
)
AS
	BEGIN
		SELECT EMPLOYEE_ID, USER_ID, SALARY, ACTIVE, DATE_OF_BIRTH
		FROM employee
		WHERE USER_ID = @USER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_by_username'
GO
CREATE PROCEDURE sp_retrieve_employee_by_username
(
	@USER_NAME[NVARCHAR](50)
)
AS
	BEGIN
		SELECT e.EMPLOYEE_ID, e.USER_ID, e.SALARY, e.ACTIVE, e.DATE_OF_BIRTH
		FROM employee e
		WHERE e.USER_ID IN
		(
			SELECT a.USER_ID
			FROM APP_USER a
			WHERE a.USER_NAME = @USER_NAME
		)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_message'
GO
CREATE PROCEDURE sp_retrieve_employee_message
(
	@MESSAGE_ID[INT]
)
AS
	BEGIN
		SELECT MESSAGE_ID, SENDER_ID, RECEIVER_ID, SENT, VIEWED, MESSAGE
		FROM employee_message
		WHERE MESSAGE_ID = @MESSAGE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_message_list'
GO
CREATE PROCEDURE sp_retrieve_employee_message_list
AS
	BEGIN
		SELECT MESSAGE_ID, SENDER_ID, RECEIVER_ID, SENT, VIEWED, MESSAGE
		FROM employee_message
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_order_responsibility'
GO
CREATE PROCEDURE sp_retrieve_employee_order_responsibility
(
	@ORDER_ID[INT],
	@EMPLOYEE_ID[INT]
)
AS
	BEGIN
		SELECT ORDER_ID, EMPLOYEE_ID, DESCRIPTION
		FROM employee_order_responsibility
		WHERE ORDER_ID = @ORDER_ID
		AND EMPLOYEE_ID = @EMPLOYEE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_order_responsibility_list'
GO
CREATE PROCEDURE sp_retrieve_employee_order_responsibility_list
AS
	BEGIN
		SELECT ORDER_ID, EMPLOYEE_ID, DESCRIPTION
		FROM employee_order_responsibility
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_role'
GO
CREATE PROCEDURE sp_retrieve_employee_role
(
	@EMPLOYEE_ID[INT],
	@ROLE_ID[NVARCHAR](250)
)
AS
	BEGIN
		SELECT EMPLOYEE_ID, ROLE_ID
		FROM employee_role
		WHERE EMPLOYEE_ID = @EMPLOYEE_ID
		AND ROLE_ID = @ROLE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_role_list'
GO
CREATE PROCEDURE sp_retrieve_employee_role_list
AS
	BEGIN
		SELECT EMPLOYEE_ID, ROLE_ID
		FROM employee_role
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_list'
GO
CREATE PROCEDURE sp_retrieve_employee_list
AS
	BEGIN
		SELECT EMPLOYEE_ID, USER_ID, SALARY, ACTIVE, DATE_OF_BIRTH
		FROM employee
	END
GO

print '' print  '*** Creating procedure sp_retrieve_expired_product_lot_list'
GO
CREATE PROCEDURE sp_retrieve_expired_product_lot_list
AS
	BEGIN
		SELECT PRODUCT_LOT_ID, WAREHOUSE_ID, SUPPLIER_ID, LOCATION_ID, PRODUCT_ID, SUPPLY_MANAGER_ID, QUANTITY, AVAILABLE_QUANTITY, DATE_RECEIVED, EXPIRATION_DATE
		FROM product_lot
		WHERE EXPIRATION_DATE < GETDATE()
	END
GO

print '' print  '*** Creating procedure sp_retrieve_grade'
GO
CREATE PROCEDURE sp_retrieve_grade
(
	@GRADE_ID[NVARCHAR](250)
)
AS
	BEGIN
		SELECT GRADE_ID
		FROM grade
		WHERE GRADE_ID = @GRADE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_grade_list'
GO
CREATE PROCEDURE sp_retrieve_grade_list
AS
	BEGIN
		SELECT GRADE_ID
		FROM grade
	END
GO

print '' print  '*** Creating procedure sp_retrieve_inspection'
GO
CREATE PROCEDURE sp_retrieve_inspection
(
	@INSPECTION_ID[INT]
)
AS
	BEGIN
		SELECT INSPECTION_ID, EMPLOYEE_ID, PRODUCT_LOT_ID, GRADE_ID, DATE_PERFORMED, EXPIRATION_DATE
		FROM inspection
		WHERE INSPECTION_ID = @INSPECTION_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_inspection_list'
GO
CREATE PROCEDURE sp_retrieve_inspection_list
AS
	BEGIN
		SELECT INSPECTION_ID, EMPLOYEE_ID, PRODUCT_LOT_ID, GRADE_ID, DATE_PERFORMED, EXPIRATION_DATE
		FROM inspection
	END
GO

print '' print  '*** Creating procedure sp_retrieve_location'
GO
CREATE PROCEDURE sp_retrieve_location
(
	@LOCATION_ID[INT]
)
AS
	BEGIN
		SELECT LOCATION_ID, DESCRIPTION, IS_ACTIVE
		FROM location
		WHERE LOCATION_ID = @LOCATION_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_location_list'
GO
CREATE PROCEDURE sp_retrieve_location_list
AS
	BEGIN
		SELECT LOCATION_ID, DESCRIPTION, IS_ACTIVE
		FROM location
	END
GO

print '' print  '*** Creating procedure sp_retrieve_maintenance_schedule'
GO
CREATE PROCEDURE sp_retrieve_maintenance_schedule
(
	@MAINTENANCE_SCHEDULE_ID[INT]
)
AS
	BEGIN
		SELECT MAINTENANCE_SCHEDULE_ID, VEHICLE_ID
		FROM maintenance_schedule
		WHERE MAINTENANCE_SCHEDULE_ID = @MAINTENANCE_SCHEDULE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_maintenance_schedule_list'
GO
CREATE PROCEDURE sp_retrieve_maintenance_schedule_list
AS
	BEGIN
		SELECT MAINTENANCE_SCHEDULE_ID, VEHICLE_ID
		FROM maintenance_schedule
	END
GO

print '' print  '*** Creating procedure sp_retrieve_message_line'
GO
CREATE PROCEDURE sp_retrieve_message_line
(
	@MESSAGE_LINE_ID[INT]
)
AS
	BEGIN
		SELECT MESSAGE_LINE_ID, DISPATCHER_MESSAGE_ID, MESSAGE_LINE_TEXT
		FROM message_line
		WHERE MESSAGE_LINE_ID = @MESSAGE_LINE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_message_line_list'
GO
CREATE PROCEDURE sp_retrieve_message_line_list
AS
	BEGIN
		SELECT MESSAGE_LINE_ID, DISPATCHER_MESSAGE_ID, MESSAGE_LINE_TEXT
		FROM message_line
	END
GO

print '' print  '*** Creating procedure sp_retrieve_order_status'
GO
CREATE PROCEDURE sp_retrieve_order_status
(
	@ORDER_STATUS_ID[NVARCHAR](50)
)
AS
	BEGIN
		SELECT ORDER_STATUS_ID
		FROM order_status
		WHERE ORDER_STATUS_ID = @ORDER_STATUS_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_order_status_list'
GO
CREATE PROCEDURE sp_retrieve_order_status_list
AS
	BEGIN
		SELECT ORDER_STATUS_ID
		FROM order_status
	END
GO

print '' print  '*** Creating procedure sp_retrieve_order_type'
GO
CREATE PROCEDURE sp_retrieve_order_type
(
	@ORDER_TYPE_ID[NVARCHAR](250)
)
AS
	BEGIN
		SELECT ORDER_TYPE_ID
		FROM order_type
		WHERE ORDER_TYPE_ID = @ORDER_TYPE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_order_type_list'
GO
CREATE PROCEDURE sp_retrieve_order_type_list
AS
	BEGIN
		SELECT ORDER_TYPE_ID
		FROM order_type
	END
GO

print '' print  '*** Creating procedure sp_retrieve_package'
GO
CREATE PROCEDURE sp_retrieve_package
(
	@PACKAGE_ID[INT]
)
AS
	BEGIN
		SELECT PACKAGE_ID, DELIVERY_ID, ORDER_ID
		FROM package
		WHERE PACKAGE_ID = @PACKAGE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_package_line'
GO
CREATE PROCEDURE sp_retrieve_package_line
(
	@PACKAGE_LINE_ID[INT]
)
AS
	BEGIN
		SELECT PACKAGE_LINE_ID, PACKAGE_ID, PRODUCT_LOT_ID, QUANTITY, PRICE_PAID
		FROM package_line
		WHERE PACKAGE_LINE_ID = @PACKAGE_LINE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_package_lines_in_package_list'
GO
CREATE PROCEDURE sp_retrieve_package_lines_in_package_list
(
	@PACKAGE_ID	int
)
AS
	BEGIN
		SELECT PACKAGE_LINE_ID, package_line.PACKAGE_ID, PRODUCT_LOT_ID, QUANTITY, PRICE_PAID
		FROM package_line
		WHERE package_line.PACKAGE_ID = @PACKAGE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_package_line_list'
GO
CREATE PROCEDURE sp_retrieve_package_line_list
AS
	BEGIN
		SELECT PACKAGE_LINE_ID, PACKAGE_ID, PRODUCT_LOT_ID, QUANTITY, PRICE_PAID
		FROM package_line
	END
GO

print '' print  '*** Creating procedure sp_retrieve_package_list'
GO
CREATE PROCEDURE sp_retrieve_package_list
AS
	BEGIN
		SELECT PACKAGE_ID, DELIVERY_ID, ORDER_ID
		FROM package
	END
GO

print '' print  '*** Creating procedure sp_retrieve_packages_in_order_list'
GO
CREATE PROCEDURE sp_retrieve_packages_in_order_list
(
	@ORDER_ID	int
)
AS
	BEGIN
		SELECT PACKAGE_ID, DELIVERY_ID, ORDER_ID
		FROM package
		WHERE ORDER_ID = @ORDER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_pickup'
GO
CREATE PROCEDURE sp_retrieve_pickup
(
	@PICKUP_ID[INT]
)
AS
	BEGIN
		SELECT PICKUP_ID, SUPPLIER_ID, WAREHOUSE_ID, DRIVER_ID, EMPLOYEE_ID
		FROM pickup
		WHERE PICKUP_ID = @PICKUP_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_pickup_line'
GO
CREATE PROCEDURE sp_retrieve_pickup_line
(
	@PICKUP_LINE_ID[INT]
)
AS
	BEGIN
		SELECT PICKUP_LINE_ID, PICKUP_ID, PRODUCT_LOT_ID, QUANTITY, PICK_UP_STATUS
		FROM pickup_line
		WHERE PICKUP_LINE_ID = @PICKUP_LINE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_pickup_line_list'
GO
CREATE PROCEDURE sp_retrieve_pickup_line_list
AS
	BEGIN
		SELECT PICKUP_LINE_ID, PICKUP_ID, PRODUCT_LOT_ID, QUANTITY, PICK_UP_STATUS
		FROM pickup_line
	END
GO

print '' print  '*** Creating procedure sp_retrieve_pickup_list'
GO
CREATE PROCEDURE sp_retrieve_pickup_list
AS
	BEGIN
		SELECT PICKUP_ID, SUPPLIER_ID, WAREHOUSE_ID, DRIVER_ID, EMPLOYEE_ID
		FROM pickup
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product'
GO
CREATE PROCEDURE sp_retrieve_product
(
	@PRODUCT_ID[INT]
)
AS
	BEGIN
		SELECT PRODUCT_ID, NAME, DESCRIPTION, UNIT_PRICE, IMAGE_NAME, ACTIVE, UNIT_OF_MEASUREMENT, DELIVERY_CHARGE_PER_UNIT, IMAGE_BINARY
		FROM product
		WHERE PRODUCT_ID = @PRODUCT_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_category'
GO
CREATE PROCEDURE sp_retrieve_product_category
(
	@PRODUCT_ID[INT],
	@CATEGORY_ID[NVARCHAR](200)
)
AS
	BEGIN
		SELECT PRODUCT_ID, CATEGORY_ID
		FROM product_category
		WHERE PRODUCT_ID = @PRODUCT_ID
		AND CATEGORY_ID = @CATEGORY_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_category_list'
GO
CREATE PROCEDURE sp_retrieve_product_category_list
AS
	BEGIN
		SELECT PRODUCT_ID, CATEGORY_ID
		FROM product_category
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_grade_price'
GO
CREATE PROCEDURE sp_retrieve_product_grade_price
(
	@PRODUCT_ID[INT],
	@GRADE_ID[NVARCHAR](250)
)
AS
	BEGIN
		SELECT PRODUCT_ID, GRADE_ID, PRICE
		FROM product_grade_price
		WHERE PRODUCT_ID = @PRODUCT_ID
		AND GRADE_ID = @GRADE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_grade_price_list'
GO
CREATE PROCEDURE sp_retrieve_product_grade_price_list
AS
	BEGIN
		SELECT PRODUCT_ID, GRADE_ID, PRICE
		FROM product_grade_price
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_lot'
GO
CREATE PROCEDURE sp_retrieve_product_lot
(
	@PRODUCT_LOT_ID[INT]
)
AS
	BEGIN
		SELECT PRODUCT_LOT_ID, WAREHOUSE_ID, SUPPLIER_ID, LOCATION_ID, PRODUCT_ID, SUPPLY_MANAGER_ID, QUANTITY, AVAILABLE_QUANTITY, DATE_RECEIVED, EXPIRATION_DATE,GRADE
		FROM product_lot
		WHERE PRODUCT_LOT_ID = @PRODUCT_LOT_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_lot_by_supplier_id'
GO
CREATE PROCEDURE sp_retrieve_product_lot_by_supplier_id
(
	@SUPPLIER_ID[INT]
)
AS
	BEGIN
		SELECT PRODUCT_LOT_ID, WAREHOUSE_ID, SUPPLIER_ID, LOCATION_ID, PRODUCT_ID, SUPPLY_MANAGER_ID, QUANTITY, AVAILABLE_QUANTITY, DATE_RECEIVED, EXPIRATION_DATE
		FROM product_lot
		WHERE SUPPLIER_ID = @SUPPLIER_ID
		ORDER BY PRODUCT_LOT_ID DESC
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_lot_list'
GO
CREATE PROCEDURE sp_retrieve_product_lot_list
AS
	BEGIN
		SELECT PRODUCT_LOT_ID, WAREHOUSE_ID, SUPPLIER_ID, LOCATION_ID, PRODUCT_ID, SUPPLY_MANAGER_ID, QUANTITY, AVAILABLE_QUANTITY, DATE_RECEIVED, EXPIRATION_DATE,GRADE,PRICE
		FROM product_lot
	END
GO

print '' print  '*** Creating procedure sp_retrieve_active_product_lot_list'
GO
CREATE PROCEDURE sp_retrieve_active_product_lot_list
AS
	BEGIN
		SELECT PRODUCT_LOT_ID, WAREHOUSE_ID, SUPPLIER_ID, LOCATION_ID, PRODUCT_ID, SUPPLY_MANAGER_ID, QUANTITY, AVAILABLE_QUANTITY, DATE_RECEIVED, EXPIRATION_DATE,GRADE,PRICE
		FROM product_lot
		WHERE QUANTITY > 0 AND GRADE != 'Not Inspected'
	END
GO


print '' print  '*** Creating procedure sp_retrieve_product_order'
GO
CREATE PROCEDURE sp_retrieve_product_order
(
	@ORDER_ID[INT]
)
AS
	BEGIN
		SELECT ORDER_ID, CUSTOMER_ID, ORDER_TYPE_ID, ADDRESS_TYPE, DELIVERY_TYPE_ID, AMOUNT, ORDER_DATE, DATE_EXPECTED, DISCOUNT, ORDER_STATUS_ID, USER_ADDRESS_ID, HAS_ARRIVED
		FROM product_order
		WHERE ORDER_ID = @ORDER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_order_by_status'
GO
CREATE PROCEDURE sp_retrieve_product_order_by_status
(
	@Status[NVARCHAR](50)
)
AS
	BEGIN
		SELECT ORDER_ID, CUSTOMER_ID, ORDER_TYPE_ID, ADDRESS_TYPE, DELIVERY_TYPE_ID, AMOUNT, ORDER_DATE, DATE_EXPECTED, DISCOUNT, ORDER_STATUS_ID, USER_ADDRESS_ID, HAS_ARRIVED
		FROM product_order
		WHERE ORDER_STATUS_ID = @Status
	END
GO


print '' print  '*** Creating procedure sp_retrieve_product_order_list'
GO
CREATE PROCEDURE sp_retrieve_product_order_list
AS
	BEGIN
		SELECT ORDER_ID, CUSTOMER_ID, ORDER_TYPE_ID, ADDRESS_TYPE, DELIVERY_TYPE_ID, AMOUNT, ORDER_DATE, DATE_EXPECTED, DISCOUNT, ORDER_STATUS_ID, USER_ADDRESS_ID, HAS_ARRIVED
		FROM product_order
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_review'
GO
CREATE PROCEDURE sp_retrieve_product_review
(
	@REVIEW_ID[INT]
)
AS
	BEGIN
		SELECT REVIEW_ID, PRODUCT_ID, USER_ID, SUPPLIER_ID, RATING, NOTES
		FROM product_review
		WHERE REVIEW_ID = @REVIEW_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_review_list'
GO
CREATE PROCEDURE sp_retrieve_product_review_list
AS
	BEGIN
		SELECT REVIEW_ID, PRODUCT_ID, USER_ID, SUPPLIER_ID, RATING, NOTES
		FROM product_review
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_list'
GO
CREATE PROCEDURE sp_retrieve_product_list
AS
	BEGIN
		SELECT PRODUCT_ID, NAME, DESCRIPTION, UNIT_PRICE, IMAGE_NAME, ACTIVE, UNIT_OF_MEASUREMENT, DELIVERY_CHARGE_PER_UNIT, IMAGE_BINARY
		FROM product
	END
GO

print '' print'*** Creating sp_retrieve_products_to_customer'
GO
CREATE PROCEDURE [dbo].[sp_retrieve_products_to_customer]
AS
	BEGIN
		SELECT pd.product_id, pd.name, pd.description, pgp.grade_id, pgp.price, sp.supplier_id, sp.farm_name, pc.category_id, pd.image_binary
		FROM Product pd
		LEFT JOIN Product_Lot pl ON (pl.product_id = pd.product_id)
		LEFT JOIN Supplier sp ON (sp.supplier_id = pl.supplier_id)
		LEFT JOIN Product_Grade_Price pgp ON (pgp.product_id = pd.product_id)
		LEFT JOIN Product_Category pc ON (pc.product_id = pd.product_id)
		WHERE pd.active = 1
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_orderline_list_by_order_id'
GO
CREATE PROCEDURE sp_retrieve_product_orderline_list_by_order_id
(
	@PRODUCT_ORDER_ID[INT],
	@ORDER_AMOUNT[DECIMAL](6,2)
)
AS
	BEGIN
		SELECT ORDER_LINE_ID, PRODUCT_ORDER_ID, PRODUCT_ID, PRODUCT_NAME, QUANTITY, GRADE_ID, PRICE, UNIT_DISCOUNT
		FROM ORDER_LINE
		WHERE PRODUCT_ORDER_ID = @PRODUCT_ORDER_ID
		UPDATE PRODUCT_ORDER
		SET AMOUNT = @ORDER_AMOUNT
		WHERE ORDER_ID = @PRODUCT_ORDER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_repair'
GO
CREATE PROCEDURE sp_retrieve_repair
(
	@REPAIR_ID[INT]
)
AS
	BEGIN
		SELECT REPAIR_ID, VEHICLE_ID
		FROM repair
		WHERE REPAIR_ID = @REPAIR_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_repair_line'
GO
CREATE PROCEDURE sp_retrieve_repair_line
(
	@REPAIR_LINE_ID[INT]
)
AS
	BEGIN
		SELECT REPAIR_LINE_ID, REPAIR_ID, REPAIR_DESCRIPTION
		FROM repair_line
		WHERE REPAIR_LINE_ID = @REPAIR_LINE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_repair_line_list'
GO
CREATE PROCEDURE sp_retrieve_repair_line_list
AS
	BEGIN
		SELECT REPAIR_LINE_ID, REPAIR_ID, REPAIR_DESCRIPTION
		FROM repair_line
	END
GO

print '' print  '*** Creating procedure sp_retrieve_repair_list'
GO
CREATE PROCEDURE sp_retrieve_repair_list
AS
	BEGIN
		SELECT REPAIR_ID, VEHICLE_ID
		FROM repair
	END
GO

print '' print  '*** Creating procedure sp_retrieve_role'
GO
CREATE PROCEDURE sp_retrieve_role
(
	@ROLE_ID[NVARCHAR](250)
)
AS
	BEGIN
		SELECT ROLE_ID, DESCRIPTION
		FROM role
		WHERE ROLE_ID = @ROLE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_role_list'
GO
CREATE PROCEDURE sp_retrieve_role_list
AS
	BEGIN
		SELECT ROLE_ID, DESCRIPTION
		FROM role
	END
GO

print '' print  '*** Creating procedure sp_retrieve_route'
GO
CREATE PROCEDURE sp_retrieve_route
(
	@ROUTE_ID[INT]
)
AS
	BEGIN
		SELECT ROUTE_ID, VEHICLE_ID, DRIVER_ID, ASSIGNED_DATE
		FROM route
		WHERE ROUTE_ID = @ROUTE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_route_list'
GO
CREATE PROCEDURE sp_retrieve_route_list
AS
	BEGIN
		SELECT ROUTE_ID, VEHICLE_ID, DRIVER_ID, ASSIGNED_DATE
		FROM route
	END
GO

print '' print  '*** Creating procedure sp_retrieve_shipping_address'
GO
CREATE PROCEDURE sp_retrieve_shipping_address
(
	@ADDRESS_ID[INT]
)
AS
	BEGIN
		SELECT ADDRESS_ID, USER_ID, ADDRESS1, ADDRESS2, CITY, STATE, ZIP, ADDRESS_NAME
		FROM shipping_address
		WHERE ADDRESS_ID = @ADDRESS_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_shipping_address_list'
GO
CREATE PROCEDURE sp_retrieve_shipping_address_list
AS
	BEGIN
		SELECT ADDRESS_ID, USER_ID, ADDRESS1, ADDRESS2, CITY, STATE, ZIP, ADDRESS_NAME
		FROM shipping_address
	END
GO

print '' print  '*** Creating procedure sp_retrieve_status'
GO
CREATE PROCEDURE sp_retrieve_status
(
	@STATUS_ID[NVARCHAR](50)
)
AS
	BEGIN
		SELECT STATUS_ID
		FROM status
		WHERE STATUS_ID = @STATUS_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_status_list'
GO
CREATE PROCEDURE sp_retrieve_status_list
AS
	BEGIN
		SELECT STATUS_ID
		FROM status
	END
GO

print '' print  '*** Creating procedure sp_retrieve_supplier'
GO
CREATE PROCEDURE sp_retrieve_supplier
(
	@SUPPLIER_ID[INT]
)
AS
	BEGIN
		SELECT SUPPLIER_ID, USER_ID, IS_APPROVED, APPROVED_BY, FARM_NAME, FARM_ADDRESS, FARM_CITY, FARM_STATE, FARM_TAX_ID, ACTIVE
		FROM supplier
		WHERE SUPPLIER_ID = @SUPPLIER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_supplier_by_user_id'
GO
CREATE PROCEDURE sp_retrieve_supplier_by_user_id
(
	@USER_ID[INT]
)
AS
	BEGIN
		SELECT SUPPLIER_ID, USER_ID, IS_APPROVED, APPROVED_BY, FARM_NAME, FARM_ADDRESS, FARM_CITY, FARM_STATE, FARM_TAX_ID, ACTIVE
		FROM supplier
		WHERE USER_ID = @USER_ID
	END

print '' print  '*** Creating procedure sp_retrieve_supplier_name'
GO
CREATE PROCEDURE sp_retrieve_supplier_name
(
	@USER_ID[INT]
)
AS
	BEGIN
		SELECT FIRST_NAME, LAST_NAME
		FROM APP_USER
		WHERE USER_ID = @USER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_supplier_list'
GO
CREATE PROCEDURE sp_retrieve_supplier_list
AS
	BEGIN
		SELECT SUPPLIER_ID, USER_ID, IS_APPROVED, APPROVED_BY, FARM_NAME, FARM_ADDRESS, FARM_CITY, FARM_STATE, FARM_TAX_ID, ACTIVE
		FROM supplier
	END
GO

print '' print '*** Creating procedure sp_retrieve_supplier_invoice_list'
GO
CREATE PROCEDURE sp_retrieve_supplier_invoice_list
AS
	BEGIN
		SELECT SUPPLIER_INVOICE_ID, SUPPLIER_ID, INVOICE_DATE, SUB_TOTAL, TAX_AMOUNT, TOTAL, AMOUNT_PAID, APPROVED, ACTIVE
		FROM supplier_invoice
	END
GO

print '' print '*** Creating procedure sp_retrieve_supplier_invoice_lines_by_supplier_invoice_id'
GO
CREATE PROCEDURE sp_retrieve_supplier_invoice_lines_by_supplier_invoice_id
(
	@SUPPLIER_INVOICE_ID[INT]
)
AS
	BEGIN
		SELECT SUPPLIER_INVOICE_ID, PRODUCT_LOT_ID, QUANTITY_SOLD, PRICE_EACH, ITEM_DISCOUNT, ITEM_TOTAL
		FROM supplier_invoice_line
		WHERE SUPPLIER_INVOICE_ID = @SUPPLIER_INVOICE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_supplier_application_status_list'
GO
CREATE PROCEDURE sp_retrieve_supplier_application_status_list
AS
	BEGIN
		SELECT SUPPLIER_STATUS_ID
		FROM supplier_application_status
	END
GO

print '' print  '*** Creating procedure sp_retrieve_user_address'
GO
CREATE PROCEDURE sp_retrieve_user_address
(
	@USER_ADDRESS_ID[INT]
)
AS
	BEGIN
		SELECT USER_ADDRESS_ID, USER_ID, ADDRESS_LINE_1, ADDRESS_LINE_2, CITY, STATE, ZIP
		FROM user_address
		WHERE USER_ADDRESS_ID = @USER_ADDRESS_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_user_address_list'
GO
CREATE PROCEDURE sp_retrieve_user_address_list
AS
	BEGIN
		SELECT USER_ADDRESS_ID, USER_ID, ADDRESS_LINE_1, ADDRESS_LINE_2, CITY, STATE, ZIP
		FROM user_address
	END
GO

print '' print  '*** Creating procedure sp_retrieve_user_cart_line'
GO
CREATE PROCEDURE sp_retrieve_user_cart_line
(
	@PRODUCT_ID[INT],
    @GRADE_ID[NVARCHAR](250),
	@USER_ID[INT]
)
AS
	BEGIN
		SELECT PRODUCT_ID, USER_ID
		FROM user_cart_line
		WHERE PRODUCT_ID = @PRODUCT_ID
		AND USER_ID = @USER_ID
        AND GRADE_ID = @GRADE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_user_cart_line_list'
GO
CREATE PROCEDURE sp_retrieve_user_cart_line_list
AS
	BEGIN
		SELECT PRODUCT_ID, GRADE_ID, USER_ID, QUANTITY
		FROM user_cart_line
	END
GO

print '' print  '*** Creating procedure sp_retrieve_cart_for_user'
GO
CREATE PROCEDURE sp_retrieve_cart_for_user
(
	@USER_NAME[NVARCHAR](50)
)
AS
	BEGIN
		SELECT user_cart_line.PRODUCT_ID, user_cart_line.USER_ID, user_cart_line.QUANTITY, user_cart_line.GRADE_ID, PRODUCT.NAME,
		PRODUCT_GRADE_PRICE.PRICE,
		DEALS_FOR_PRODUCT.TOTAL_AMOUNT AS FLAT_PRODUCT_DISCOUNT,
		DEALS_FOR_PRODUCT.TOTAL_PERCENT AS SCALED_PRODUCT_DISCOUNT,
		DEALS_FOR_CATEGORY.TOTAL_AMOUNT AS FLAT_CATEGORY_DISCOUNT,
		DEALS_FOR_CATEGORY.TOTAL_PERCENT AS SCALED_CATEGORY_DISCOUNT
        FROM user_cart_line
        INNER JOIN PRODUCT
        ON user_cart_line.PRODUCT_ID = PRODUCT.PRODUCT_ID
        INNER JOIN PRODUCT_GRADE_PRICE
        ON user_cart_line.PRODUCT_ID = PRODUCT_GRADE_PRICE.PRODUCT_ID
        AND user_cart_line.GRADE_ID = PRODUCT_GRADE_PRICE.GRADE_ID
		LEFT OUTER JOIN (
			SELECT SUM(AMOUNT) AS TOTAL_AMOUNT, EXP(SUM(LOG(1-PERCENT_OFF))) AS TOTAL_PERCENT, DEAL_PRODUCT.PRODUCT_ID
			FROM DEAL
			INNER JOIN DEAL_PRODUCT
			ON DEAL.DEAL_ID = DEAL_PRODUCT.DEAL_ID
			GROUP BY DEAL_PRODUCT.PRODUCT_ID
		) AS DEALS_FOR_PRODUCT
		ON DEALS_FOR_PRODUCT.PRODUCT_ID = PRODUCT.PRODUCT_ID
		LEFT OUTER JOIN (
			SELECT SUM(AMOUNT) AS TOTAL_AMOUNT, EXP(SUM(LOG(1-PERCENT_OFF))) AS TOTAL_PERCENT, PRODUCT_CATEGORY.PRODUCT_ID
			FROM DEAL
			INNER JOIN DEAL_CATEGORY
			ON DEAL.DEAL_ID = DEAL_CATEGORY.DEAL_ID
			INNER JOIN PRODUCT_CATEGORY
			ON DEAL_CATEGORY.CATEGORY_ID = PRODUCT_CATEGORY.CATEGORY_ID
			GROUP BY PRODUCT_CATEGORY.PRODUCT_ID
		) AS DEALS_FOR_CATEGORY
		ON DEALS_FOR_PRODUCT.PRODUCT_ID = PRODUCT.PRODUCT_ID
        INNER JOIN APP_USER
        ON user_cart_line.USER_ID = APP_USER.USER_ID
        WHERE APP_USER.USER_NAME = @USER_NAME
	END
GO

print '' print  '*** Creating procedure sp_retrieve_user_salt'
GO
CREATE PROCEDURE sp_retrieve_user_salt (
    @Username[NVARCHAR](50)
)
AS
	BEGIN
		SELECT PASSWORD_SALT
		FROM APP_USER
		WHERE USER_NAME = @Username
	END
GO

print '' print  '*** Creating procedure sp_retrieve_user_salt_by_email'
GO
CREATE PROCEDURE sp_retrieve_user_salt_by_email (
    @EmailAddress[NVARCHAR](50)
)
AS
	BEGIN
		SELECT PASSWORD_SALT
		FROM APP_USER
		WHERE E_MAIL_ADDRESS = @EmailAddress
	END
GO

print '' print  '*** Creating procedure sp_retrieve_vehicle'
GO
CREATE PROCEDURE sp_retrieve_vehicle
(
@VEHICLE_ID[INT]
)
AS
	BEGIN
		SELECT VEHICLE_ID, VIN, MAKE, MODEL, MILEAGE, YEAR, COLOR, ACTIVE, LATEST_REPAIR_DATE, LAST_DRIVER_ID, VEHICLE_TYPE_ID
		FROM vehicle
		WHERE VEHICLE_ID = @VEHICLE_ID
	END
GO
	
print '' print  '*** Creating procedure sp_retrieve_vehicle_type'
GO
CREATE PROCEDURE sp_retrieve_vehicle_type
(
@VEHICLE_TYPE_ID[NVARCHAR](50)
)
AS
	BEGIN
		SELECT VEHICLE_TYPE_ID
		FROM vehicle_type
		WHERE VEHICLE_TYPE_ID = @VEHICLE_TYPE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_vehicle_type_list'
GO
CREATE PROCEDURE sp_retrieve_vehicle_type_list
AS
	BEGIN
		SELECT VEHICLE_TYPE_ID
		FROM vehicle_type
	END
GO

print '' print  '*** Creating procedure sp_retrieve_vehicle_list'
GO
CREATE PROCEDURE sp_retrieve_vehicle_list
AS
	BEGIN
		SELECT VEHICLE_ID, VIN, MAKE, MODEL, MILEAGE, YEAR, COLOR, ACTIVE, LATEST_REPAIR_DATE, 
				LAST_DRIVER_ID, VEHICLE_TYPE_ID, CHECKED_OUT, OUT_IN_TIME_STAMP
		FROM vehicle
	END
GO

print '' print  '*** Creating procedure sp_retrieve_warehouse'
GO
CREATE PROCEDURE sp_retrieve_warehouse
(
	@WAREHOUSE_ID[INT]
)
AS
	BEGIN
		SELECT WAREHOUSE_ID, ADDRESS_1, ADDRESS_2, CITY, STATE, ZIP
		FROM warehouse
		WHERE WAREHOUSE_ID = @WAREHOUSE_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_warehouse_list'
GO
CREATE PROCEDURE sp_retrieve_warehouse_list
AS
	BEGIN
		SELECT WAREHOUSE_ID, ADDRESS_1, ADDRESS_2, CITY, STATE, ZIP
		FROM warehouse
	END
GO

print '' print  '*** Creating procedure sp_retrieve_wishlist_line'
GO
CREATE PROCEDURE sp_retrieve_wishlist_line
(
	@CUSTOMER_ID[INT],
	@PRODUCT_ID[INT]
)
AS
	BEGIN
		SELECT CUSTOMER_ID, PRODUCT_ID
		FROM wishlist_line
		WHERE CUSTOMER_ID = @CUSTOMER_ID
		AND PRODUCT_ID = @PRODUCT_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_wishlist_line_list'
GO
CREATE PROCEDURE sp_retrieve_wishlist_line_list
AS
	BEGIN
		SELECT CUSTOMER_ID, PRODUCT_ID
		FROM wishlist_line
	END
GO

print '' print  '*** Creating SEARCH stored procedures'
GO

print '' print  '*** Creating procedure sp_log_in_user'
GO
CREATE PROCEDURE sp_log_in_user
(
	@USER_NAME [NVARCHAR](20),
	@PASSWORD_HASH [NVARCHAR](200)
)
AS
	BEGIN
		SELECT USER_NAME, FIRST_NAME, LAST_NAME, PHONE, PREFERRED_ADDRESS_ID, E_MAIL_ADDRESS, E_MAIL_PREFERENCES, ACTIVE
		FROM APP_USER
		WHERE USER_NAME = @USER_NAME
		AND PASSWORD_HASH = @PASSWORD_HASH
	END
GO

print '' print  '*** Creating procedure sp_retrieve_agreement_from_search'
GO
CREATE PROCEDURE sp_retrieve_agreement_from_search
(
	@AGREEMENT_ID[INT]=NULL,
	@PRODUCT_ID[INT]=NULL,
	@SUPPLIER_ID[INT]=NULL,
	@DATE_SUBMITTED[DATETIME]=NULL,
	@IS_APPROVED[BIT]=NULL,
	@APPROVED_BY[INT]=NULL
)
AS
	BEGIN
		SELECT AGREEMENT_ID, PRODUCT_ID, SUPPLIER_ID, DATE_SUBMITTED, IS_APPROVED, APPROVED_BY
		FROM AGREEMENT
		WHERE (AGREEMENT.AGREEMENT_ID=@AGREEMENT_ID OR @AGREEMENT_ID IS NULL)
		AND (AGREEMENT.PRODUCT_ID=@PRODUCT_ID OR @PRODUCT_ID IS NULL)
		AND (AGREEMENT.SUPPLIER_ID=@SUPPLIER_ID OR @SUPPLIER_ID IS NULL)
		AND (AGREEMENT.DATE_SUBMITTED=@DATE_SUBMITTED OR @DATE_SUBMITTED IS NULL)
		AND (AGREEMENT.IS_APPROVED=@IS_APPROVED OR @IS_APPROVED IS NULL)
		AND (AGREEMENT.APPROVED_BY=@APPROVED_BY OR @APPROVED_BY IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_app_user_from_search'
GO
CREATE PROCEDURE sp_retrieve_app_user_from_search
(
	@USER_ID[INT]=NULL,
	@FIRST_NAME[NVARCHAR](150)=NULL,
	@LAST_NAME[NVARCHAR](100)=NULL,@LAST_NAME_ESCAPE[BIT] = NULL,
	@PHONE[NVARCHAR](15)=NULL,
	@PREFERRED_ADDRESS_ID[INT]=NULL,@PREFERRED_ADDRESS_ID_ESCAPE[BIT] = NULL,
	@E_MAIL_ADDRESS[NVARCHAR](50)=NULL,
	@E_MAIL_PREFERENCES[BIT]=NULL,
	@PASSWORD_HASH[NVARCHAR](64)=NULL,
	@PASSWORD_SALT[NVARCHAR](64)=NULL,
	@USER_NAME[NVARCHAR](50)=NULL,
	@ACTIVE[BIT]=NULL
)
AS
	BEGIN
		SELECT USER_ID, FIRST_NAME, LAST_NAME, PHONE, PREFERRED_ADDRESS_ID, E_MAIL_ADDRESS, E_MAIL_PREFERENCES, PASSWORD_HASH, PASSWORD_SALT, USER_NAME, ACTIVE
		FROM APP_USER
		WHERE (APP_USER.USER_ID=@USER_ID OR @USER_ID IS NULL)
		AND (APP_USER.FIRST_NAME=@FIRST_NAME OR @FIRST_NAME IS NULL)
		AND (APP_USER.LAST_NAME=@LAST_NAME OR @LAST_NAME IS NULL OR @LAST_NAME_ESCAPE = 1)
		AND (APP_USER.PHONE=@PHONE OR @PHONE IS NULL)
		AND (APP_USER.PREFERRED_ADDRESS_ID=@PREFERRED_ADDRESS_ID OR @PREFERRED_ADDRESS_ID IS NULL OR @PREFERRED_ADDRESS_ID_ESCAPE = 1)
		AND (APP_USER.E_MAIL_ADDRESS=@E_MAIL_ADDRESS OR @E_MAIL_ADDRESS IS NULL)
		AND (APP_USER.E_MAIL_PREFERENCES=@E_MAIL_PREFERENCES OR @E_MAIL_PREFERENCES IS NULL)
		AND (APP_USER.PASSWORD_HASH=@PASSWORD_HASH OR @PASSWORD_HASH IS NULL)
		AND (APP_USER.PASSWORD_SALT=@PASSWORD_SALT OR @PASSWORD_SALT IS NULL)
		AND (APP_USER.USER_NAME=@USER_NAME OR @USER_NAME IS NULL)
		AND (APP_USER.ACTIVE=@ACTIVE OR @ACTIVE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_backorder_preorder_from_search'
GO
CREATE PROCEDURE sp_retrieve_backorder_preorder_from_search
(
	@BACKORDER_PREORDER_ID[INT]=NULL,@BACKORDER_PREORDER_ID_ESCAPE[BIT] = NULL,
	@ORDER_ID[INT]=NULL,
	@CUSTOMER_ID[INT]=NULL,
	@AMOUNT[DECIMAL](10)=NULL,
	@DATE_PLACED[DATETIME]=NULL,
	@DATE_EXPECTED[DATETIME]=NULL,
	@HAS_ARRIVED[BIT]=NULL,
	@ADDRESS_1[NVARCHAR](50)=NULL,
	@ADDRESS_2[NVARCHAR](50)=NULL,
	@CITY[NVARCHAR](50)=NULL,
	@STATE[NCHAR](2)=NULL,
	@ZIP[NVARCHAR](10)=NULL
)
AS
	BEGIN
		SELECT BACKORDER_PREORDER_ID, ORDER_ID, CUSTOMER_ID, AMOUNT, DATE_PLACED, DATE_EXPECTED, HAS_ARRIVED, ADDRESS_1, ADDRESS_2, CITY, STATE, ZIP
		FROM BACKORDER_PREORDER
		WHERE (BACKORDER_PREORDER.BACKORDER_PREORDER_ID=@BACKORDER_PREORDER_ID OR @BACKORDER_PREORDER_ID IS NULL OR @BACKORDER_PREORDER_ID_ESCAPE = 1)
		AND (BACKORDER_PREORDER.ORDER_ID=@ORDER_ID OR @ORDER_ID IS NULL)
		AND (BACKORDER_PREORDER.CUSTOMER_ID=@CUSTOMER_ID OR @CUSTOMER_ID IS NULL)
		AND (BACKORDER_PREORDER.AMOUNT=@AMOUNT OR @AMOUNT IS NULL)
		AND (BACKORDER_PREORDER.DATE_PLACED=@DATE_PLACED OR @DATE_PLACED IS NULL)
		AND (BACKORDER_PREORDER.DATE_EXPECTED=@DATE_EXPECTED OR @DATE_EXPECTED IS NULL)
		AND (BACKORDER_PREORDER.HAS_ARRIVED=@HAS_ARRIVED OR @HAS_ARRIVED IS NULL)
		AND (BACKORDER_PREORDER.ADDRESS_1=@ADDRESS_1 OR @ADDRESS_1 IS NULL)
		AND (BACKORDER_PREORDER.ADDRESS_2=@ADDRESS_2 OR @ADDRESS_2 IS NULL)
		AND (BACKORDER_PREORDER.CITY=@CITY OR @CITY IS NULL)
		AND (BACKORDER_PREORDER.STATE=@STATE OR @STATE IS NULL)
		AND (BACKORDER_PREORDER.ZIP=@ZIP OR @ZIP IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_category_from_search'
GO
CREATE PROCEDURE sp_retrieve_category_from_search
(
	@CATEGORY_ID[NVARCHAR](200)=NULL
)
AS
	BEGIN
		SELECT CATEGORY_ID
		FROM CATEGORY
		WHERE (CATEGORY.CATEGORY_ID=@CATEGORY_ID OR @CATEGORY_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_charity_from_search'
GO
CREATE PROCEDURE sp_retrieve_charity_from_search
(
	@CHARITY_ID[INT]=NULL,
	@USER_ID[INT]=NULL,
	@EMPLOYEE_ID[INT]=NULL,
	@CHARITY_NAME[NVARCHAR](200)=NULL,
	@CONTACT_FIRST_NAME[NVARCHAR](150)=NULL,
	@CONTACT_LAST_NAME[NVARCHAR](150)=NULL,
	@PHONE_NUMBER[NVARCHAR](20)=NULL,
	@EMAIL[NVARCHAR](100)=NULL,
	@CONTACT_HOURS[NVARCHAR](150)=NULL,
	@STATUS[NVARCHAR](10)=Null
)
AS
	BEGIN
		SELECT CHARITY_ID, USER_ID, EMPLOYEE_ID, CHARITY_NAME, CONTACT_FIRST_NAME, CONTACT_LAST_NAME, PHONE_NUMBER, EMAIL, CONTACT_HOURS, STATUS
		FROM CHARITY
		WHERE (CHARITY.CHARITY_ID=@CHARITY_ID OR @CHARITY_ID IS NULL)
		AND (CHARITY.USER_ID=@USER_ID OR @USER_ID IS NULL)
		AND (CHARITY.EMPLOYEE_ID=@EMPLOYEE_ID OR @EMPLOYEE_ID IS NULL)
		AND (CHARITY.CHARITY_NAME=@CHARITY_NAME OR @CHARITY_NAME IS NULL)
		AND (CHARITY.CONTACT_FIRST_NAME=@CONTACT_FIRST_NAME OR @CONTACT_FIRST_NAME IS NULL)
		AND (CHARITY.CONTACT_LAST_NAME=@CONTACT_LAST_NAME OR @CONTACT_LAST_NAME IS NULL)
		AND (CHARITY.PHONE_NUMBER=@PHONE_NUMBER OR @PHONE_NUMBER IS NULL)
		AND (CHARITY.EMAIL=@EMAIL OR @EMAIL IS NULL)
		AND (CHARITY.CONTACT_HOURS=@CONTACT_HOURS OR @CONTACT_HOURS IS NULL)
		AND (CHARITY.STATUS=@STATUS OR @STATUS IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_charity_products_from_search'
GO
CREATE PROCEDURE sp_retrieve_charity_products_from_search
(
	@CHARITY_ID[INT]=NULL,
	@PRODUCT_LOT_ID[INT]=NULL,
	@QUANTITY[INT]=NULL
)
AS
	BEGIN
		SELECT CHARITY_ID, PRODUCT_LOT_ID, QUANTITY
		FROM CHARITY_PRODUCTS
		WHERE (CHARITY_PRODUCTS.CHARITY_ID=@CHARITY_ID OR @CHARITY_ID IS NULL)
		AND (CHARITY_PRODUCTS.PRODUCT_LOT_ID=@PRODUCT_LOT_ID OR @PRODUCT_LOT_ID IS NULL)
		AND (CHARITY_PRODUCTS.QUANTITY=@QUANTITY OR @QUANTITY IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_commercial_from_search'
GO
CREATE PROCEDURE sp_retrieve_commercial_from_search
(
	@COMMERCIAL_ID[INT]=NULL,
	@USER_ID[INT]=NULL
)
AS
	BEGIN
		SELECT COMMERCIAL_ID, USER_ID
		FROM COMMERCIAL
		WHERE (COMMERCIAL.COMMERCIAL_ID=@COMMERCIAL_ID OR @COMMERCIAL_ID IS NULL)
		AND (COMMERCIAL.USER_ID=@USER_ID OR @USER_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_customer_from_search'
GO
CREATE PROCEDURE sp_retrieve_customer_from_search
(
	@CUSTOMER_ID[INT]=NULL
)
AS
	BEGIN
		SELECT CUSTOMER_ID
		FROM CUSTOMER
		WHERE (CUSTOMER.CUSTOMER_ID=@CUSTOMER_ID OR @CUSTOMER_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_deal_category_from_search'
GO
CREATE PROCEDURE sp_retrieve_deal_category_from_search
(
	@DEAL_ID[INT]=NULL,
	@CATEGORY_ID[NVARCHAR](200)=NULL,
	@ACTIVE[BIT]=NULL
)
AS
	BEGIN
		SELECT DEAL_ID, CATEGORY_ID, ACTIVE
		FROM DEAL_CATEGORY
		WHERE (DEAL_CATEGORY.DEAL_ID=@DEAL_ID OR @DEAL_ID IS NULL)
		AND (DEAL_CATEGORY.CATEGORY_ID=@CATEGORY_ID OR @CATEGORY_ID IS NULL)
		AND (DEAL_CATEGORY.ACTIVE=@ACTIVE OR @ACTIVE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_deal_from_search'
GO
CREATE PROCEDURE sp_retrieve_deal_from_search
(
	@DEAL_ID[INT]=NULL,
	@DESCRIPTION[NVARCHAR](200)=NULL,
	@CODE[NCHAR](10)=NULL,@CODE_ESCAPE[BIT] = NULL,
	@AMOUNT[DECIMAL](5)=NULL,@AMOUNT_ESCAPE[BIT] = NULL,
	@PERCENT_OFF[DECIMAL](5)=NULL,@PERCENT_OFF_ESCAPE[BIT] = NULL
)
AS
	BEGIN
		SELECT DEAL_ID, DESCRIPTION, CODE, AMOUNT, PERCENT_OFF
		FROM DEAL
		WHERE (DEAL.DEAL_ID=@DEAL_ID OR @DEAL_ID IS NULL)
		AND (DEAL.DESCRIPTION=@DESCRIPTION OR @DESCRIPTION IS NULL)
		AND (DEAL.CODE=@CODE OR @CODE IS NULL OR @CODE_ESCAPE = 1)
		AND (DEAL.AMOUNT=@AMOUNT OR @AMOUNT IS NULL OR @AMOUNT_ESCAPE = 1)
		AND (DEAL.PERCENT_OFF=@PERCENT_OFF OR @PERCENT_OFF IS NULL OR @PERCENT_OFF_ESCAPE = 1)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_deal_product_from_search'
GO
CREATE PROCEDURE sp_retrieve_deal_product_from_search
(
	@DEAL_ID[INT]=NULL,
	@PRODUCT_ID[INT]=NULL,
	@ACTIVE[BIT]=NULL
)
AS
	BEGIN
		SELECT DEAL_ID, PRODUCT_ID, ACTIVE
		FROM DEAL_PRODUCT
		WHERE (DEAL_PRODUCT.DEAL_ID=@DEAL_ID OR @DEAL_ID IS NULL)
		AND (DEAL_PRODUCT.PRODUCT_ID=@PRODUCT_ID OR @PRODUCT_ID IS NULL)
		AND (DEAL_PRODUCT.ACTIVE=@ACTIVE OR @ACTIVE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_delivery_from_search'
GO
CREATE PROCEDURE sp_retrieve_delivery_from_search
(
	@DELIVERY_ID[INT]=NULL,
	@ROUTE_ID[INT]=NULL,
	@DELIVERY_DATE[DATETIME]=NULL,
	@VERIFICATION[VARBINARY]=NULL,@VERIFICATION_ESCAPE[BIT] = NULL,
	@STATUS_ID[NVARCHAR](50)=NULL,
	@DELIVERY_TYPE_ID[NVARCHAR](50)=NULL,
	@ORDER_ID[INT]=NULL
)
AS
	BEGIN
		SELECT DELIVERY_ID, ROUTE_ID, DELIVERY_DATE, VERIFICATION, STATUS_ID, DELIVERY_TYPE_ID, ORDER_ID
		FROM DELIVERY
		WHERE (DELIVERY.DELIVERY_ID=@DELIVERY_ID OR @DELIVERY_ID IS NULL)
		AND (DELIVERY.ROUTE_ID=@ROUTE_ID OR @ROUTE_ID IS NULL)
		AND (DELIVERY.DELIVERY_DATE=@DELIVERY_DATE OR @DELIVERY_DATE IS NULL)
		AND (DELIVERY.VERIFICATION=@VERIFICATION OR @VERIFICATION IS NULL OR @VERIFICATION_ESCAPE = 1)
		AND (DELIVERY.STATUS_ID=@STATUS_ID OR @STATUS_ID IS NULL)
		AND (DELIVERY.DELIVERY_TYPE_ID=@DELIVERY_TYPE_ID OR @DELIVERY_TYPE_ID IS NULL)
		AND (DELIVERY.ORDER_ID=@ORDER_ID OR @ORDER_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_delivery_type_from_search'
GO
CREATE PROCEDURE sp_retrieve_delivery_type_from_search
(
	@DELIVERY_TYPE_ID[NVARCHAR](50)=NULL,
	@ACTIVE[BIT]=NULL
)
AS
	BEGIN
		SELECT DELIVERY_TYPE_ID, ACTIVE
		FROM DELIVERY_TYPE
		WHERE (DELIVERY_TYPE.DELIVERY_TYPE_ID=@DELIVERY_TYPE_ID OR @DELIVERY_TYPE_ID IS NULL)
		AND (DELIVERY_TYPE.ACTIVE=@ACTIVE OR @ACTIVE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_dispatcher_message_from_search'
GO
CREATE PROCEDURE sp_retrieve_dispatcher_message_from_search
(
	@DISPATCHER_MESSAGE_ID[INT]=NULL,
	@EMPLOYEE_ID[INT]=NULL,
	@MESSAGE_NAME[NVARCHAR](100)=NULL,
	@DRIVER_ID[INT]=NULL
)
AS
	BEGIN
		SELECT DISPATCHER_MESSAGE_ID, EMPLOYEE_ID, MESSAGE_NAME, DRIVER_ID
		FROM DISPATCHER_MESSAGE
		WHERE (DISPATCHER_MESSAGE.DISPATCHER_MESSAGE_ID=@DISPATCHER_MESSAGE_ID OR @DISPATCHER_MESSAGE_ID IS NULL)
		AND (DISPATCHER_MESSAGE.EMPLOYEE_ID=@EMPLOYEE_ID OR @EMPLOYEE_ID IS NULL)
		AND (DISPATCHER_MESSAGE.MESSAGE_NAME=@MESSAGE_NAME OR @MESSAGE_NAME IS NULL)
		AND (DISPATCHER_MESSAGE.DRIVER_ID=@DRIVER_ID OR @DRIVER_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_driver_from_search'
GO
CREATE PROCEDURE sp_retrieve_driver_from_search
(
	@DRIVER_ID[INT]=NULL,
	@DRIVER_LICENSE_NUMBER[NVARCHAR](9)=NULL,
	@LICENSE_EXPIRATION[DATETIME]=NULL,
	@ACTIVE[BIT]=NULL
)
AS
	BEGIN
		SELECT DRIVER_ID, DRIVER_LICENSE_NUMBER, LICENSE_EXPIRATION, ACTIVE
		FROM DRIVER
		WHERE (DRIVER.DRIVER_ID=@DRIVER_ID OR @DRIVER_ID IS NULL)
		AND (DRIVER.DRIVER_LICENSE_NUMBER=@DRIVER_LICENSE_NUMBER OR @DRIVER_LICENSE_NUMBER IS NULL)
		AND (DRIVER.LICENSE_EXPIRATION=@LICENSE_EXPIRATION OR @LICENSE_EXPIRATION IS NULL)
		AND (DRIVER.ACTIVE=@ACTIVE OR @ACTIVE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_from_search'
GO
CREATE PROCEDURE sp_retrieve_employee_from_search
(
	@EMPLOYEE_ID[INT]=NULL,
	@USER_ID[INT]=NULL,
	@SALARY[DECIMAL](8)=NULL,@SALARY_ESCAPE[BIT] = NULL,
	@ACTIVE[BIT]=NULL,
	@DATE_OF_BIRTH[DATE]=NULL
)
AS
	BEGIN
		SELECT EMPLOYEE_ID, USER_ID, SALARY, ACTIVE, DATE_OF_BIRTH
		FROM EMPLOYEE
		WHERE (EMPLOYEE.EMPLOYEE_ID=@EMPLOYEE_ID OR @EMPLOYEE_ID IS NULL)
		AND (EMPLOYEE.USER_ID=@USER_ID OR @USER_ID IS NULL)
		AND (EMPLOYEE.SALARY=@SALARY OR @SALARY IS NULL OR @SALARY_ESCAPE = 1)
		AND (EMPLOYEE.ACTIVE=@ACTIVE OR @ACTIVE IS NULL)
		AND (EMPLOYEE.DATE_OF_BIRTH=@DATE_OF_BIRTH OR @DATE_OF_BIRTH IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_message_from_search'
GO
CREATE PROCEDURE sp_retrieve_employee_message_from_search
(
	@MESSAGE_ID[INT]=NULL,
	@SENDER_ID[INT]=NULL,
	@RECEIVER_ID[INT]=NULL,
	@SENT[DATETIME]=NULL,
	@VIEWED[BIT]=NULL,
	@MESSAGE[NVARCHAR](4000)=NULL
)
AS
	BEGIN
		SELECT MESSAGE_ID, SENDER_ID, RECEIVER_ID, SENT, VIEWED, MESSAGE
		FROM EMPLOYEE_MESSAGE
		WHERE (EMPLOYEE_MESSAGE.MESSAGE_ID=@MESSAGE_ID OR @MESSAGE_ID IS NULL)
		AND (EMPLOYEE_MESSAGE.SENDER_ID=@SENDER_ID OR @SENDER_ID IS NULL)
		AND (EMPLOYEE_MESSAGE.RECEIVER_ID=@RECEIVER_ID OR @RECEIVER_ID IS NULL)
		AND (EMPLOYEE_MESSAGE.SENT=@SENT OR @SENT IS NULL)
		AND (EMPLOYEE_MESSAGE.VIEWED=@VIEWED OR @VIEWED IS NULL)
		AND (EMPLOYEE_MESSAGE.MESSAGE=@MESSAGE OR @MESSAGE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_order_responsibility_from_search'
GO
CREATE PROCEDURE sp_retrieve_employee_order_responsibility_from_search
(
	@ORDER_ID[INT]=NULL,
	@EMPLOYEE_ID[INT]=NULL,
	@DESCRIPTION[NVARCHAR](200)=NULL
)
AS
	BEGIN
		SELECT ORDER_ID, EMPLOYEE_ID, DESCRIPTION
		FROM EMPLOYEE_ORDER_RESPONSIBILITY
		WHERE (EMPLOYEE_ORDER_RESPONSIBILITY.ORDER_ID=@ORDER_ID OR @ORDER_ID IS NULL)
		AND (EMPLOYEE_ORDER_RESPONSIBILITY.EMPLOYEE_ID=@EMPLOYEE_ID OR @EMPLOYEE_ID IS NULL)
		AND (EMPLOYEE_ORDER_RESPONSIBILITY.DESCRIPTION=@DESCRIPTION OR @DESCRIPTION IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_employee_role_from_search'
GO
CREATE PROCEDURE sp_retrieve_employee_role_from_search
(
	@EMPLOYEE_ID[INT]=NULL,
	@ROLE_ID[NVARCHAR](250)=NULL
)
AS
	BEGIN
		SELECT EMPLOYEE_ID, ROLE_ID
		FROM EMPLOYEE_ROLE
		WHERE (EMPLOYEE_ROLE.EMPLOYEE_ID=@EMPLOYEE_ID OR @EMPLOYEE_ID IS NULL)
		AND (EMPLOYEE_ROLE.ROLE_ID=@ROLE_ID OR @ROLE_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_grade_from_search'
GO
CREATE PROCEDURE sp_retrieve_grade_from_search
(
	@GRADE_ID[NVARCHAR](250)=NULL
)
AS
	BEGIN
		SELECT GRADE_ID
		FROM GRADE
		WHERE (GRADE.GRADE_ID=@GRADE_ID OR @GRADE_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_inspection_from_search'
GO
CREATE PROCEDURE sp_retrieve_inspection_from_search
(
	@INSPECTION_ID[INT]=NULL,
	@EMPLOYEE_ID[INT]=NULL,
	@PRODUCT_LOT_ID[INT]=NULL,
	@GRADE_ID[NVARCHAR](250)=NULL,
	@DATE_PERFORMED[DATETIME]=NULL,
	@EXPIRATION_DATE[DATETIME]=NULL
)
AS
	BEGIN
		SELECT INSPECTION_ID, EMPLOYEE_ID, PRODUCT_LOT_ID, GRADE_ID, DATE_PERFORMED, EXPIRATION_DATE
		FROM INSPECTION
		WHERE (INSPECTION.INSPECTION_ID=@INSPECTION_ID OR @INSPECTION_ID IS NULL)
		AND (INSPECTION.EMPLOYEE_ID=@EMPLOYEE_ID OR @EMPLOYEE_ID IS NULL)
		AND (INSPECTION.PRODUCT_LOT_ID=@PRODUCT_LOT_ID OR @PRODUCT_LOT_ID IS NULL)
		AND (INSPECTION.GRADE_ID=@GRADE_ID OR @GRADE_ID IS NULL)
		AND (INSPECTION.DATE_PERFORMED=@DATE_PERFORMED OR @DATE_PERFORMED IS NULL)
		AND (INSPECTION.EXPIRATION_DATE=@EXPIRATION_DATE OR @EXPIRATION_DATE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_location_from_search'
GO
CREATE PROCEDURE sp_retrieve_location_from_search
(
	@LOCATION_ID[INT]=NULL,
	@DESCRIPTION[NVARCHAR](250)=NULL
)
AS
	BEGIN
		SELECT LOCATION_ID, DESCRIPTION
		FROM LOCATION
		WHERE (LOCATION.LOCATION_ID=@LOCATION_ID OR @LOCATION_ID IS NULL)
		AND (LOCATION.DESCRIPTION=@DESCRIPTION OR @DESCRIPTION IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_maintenance_schedule_from_search'
GO
CREATE PROCEDURE sp_retrieve_maintenance_schedule_from_search
(
	@MAINTENANCE_SCHEDULE_ID[INT]=NULL,
	@VEHICLE_ID[INT]=NULL
)
AS
	BEGIN
		SELECT MAINTENANCE_SCHEDULE_ID, VEHICLE_ID
		FROM MAINTENANCE_SCHEDULE
		WHERE (MAINTENANCE_SCHEDULE.MAINTENANCE_SCHEDULE_ID=@MAINTENANCE_SCHEDULE_ID OR @MAINTENANCE_SCHEDULE_ID IS NULL)
		AND (MAINTENANCE_SCHEDULE.VEHICLE_ID=@VEHICLE_ID OR @VEHICLE_ID IS NULL)
	END
GO


print '' print  '*** Creating procedure sp_retrieve_maintenance_schedule_line_from_search'
GO
CREATE PROCEDURE sp_retrieve_maintenance_schedule_line_from_search
(
	@MAINTENANCE_SCHEDULE_LINE_ID[INT]=NULL,
	@MAINTENANCE_SCHEDULE_ID[INT]=NULL,
	@DESCRIPTION[NVARCHAR](250)=NULL,
	@MAINTENANCE_DATE[DATE]=NULL
)
AS
	BEGIN
		SELECT MAINTENANCE_SCHEDULE_LINE_ID, MAINTENANCE_SCHEDULE_ID, DESCRIPTION, MAINTENANCE_DATE
		FROM MAINTENANCE_SCHEDULE_LINE
		WHERE (MAINTENANCE_SCHEDULE_LINE.MAINTENANCE_SCHEDULE_LINE_ID=@MAINTENANCE_SCHEDULE_LINE_ID OR @MAINTENANCE_SCHEDULE_LINE_ID IS NULL)
		AND (MAINTENANCE_SCHEDULE_LINE.MAINTENANCE_SCHEDULE_ID=@MAINTENANCE_SCHEDULE_ID OR @MAINTENANCE_SCHEDULE_ID IS NULL)
		AND (MAINTENANCE_SCHEDULE_LINE.DESCRIPTION=@DESCRIPTION OR @DESCRIPTION IS NULL)
		AND (MAINTENANCE_SCHEDULE_LINE.MAINTENANCE_DATE=@MAINTENANCE_DATE OR @MAINTENANCE_DATE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_message_line_from_search'
GO
CREATE PROCEDURE sp_retrieve_message_line_from_search
(
	@MESSAGE_LINE_ID[INT]=NULL,
	@DISPATCHER_MESSAGE_ID[INT]=NULL,
	@MESSAGE_LINE_TEXT[NVARCHAR](250)=NULL
)
AS
	BEGIN
		SELECT MESSAGE_LINE_ID, DISPATCHER_MESSAGE_ID, MESSAGE_LINE_TEXT
		FROM MESSAGE_LINE
		WHERE (MESSAGE_LINE.MESSAGE_LINE_ID=@MESSAGE_LINE_ID OR @MESSAGE_LINE_ID IS NULL)
		AND (MESSAGE_LINE.DISPATCHER_MESSAGE_ID=@DISPATCHER_MESSAGE_ID OR @DISPATCHER_MESSAGE_ID IS NULL)
		AND (MESSAGE_LINE.MESSAGE_LINE_TEXT=@MESSAGE_LINE_TEXT OR @MESSAGE_LINE_TEXT IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_order_status_from_search'
GO
CREATE PROCEDURE sp_retrieve_order_status_from_search
(
	@ORDER_STATUS_ID[NVARCHAR](50)=NULL
)
AS
	BEGIN
		SELECT ORDER_STATUS_ID
		FROM ORDER_STATUS
		WHERE (ORDER_STATUS.ORDER_STATUS_ID=@ORDER_STATUS_ID OR @ORDER_STATUS_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_order_type_from_search'
GO
CREATE PROCEDURE sp_retrieve_order_type_from_search
(
	@ORDER_TYPE_ID[NVARCHAR](250)=NULL
)
AS
	BEGIN
		SELECT ORDER_TYPE_ID
		FROM ORDER_TYPE
		WHERE (ORDER_TYPE.ORDER_TYPE_ID=@ORDER_TYPE_ID OR @ORDER_TYPE_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_package_from_search'
GO
CREATE PROCEDURE sp_retrieve_package_from_search
(
	@PACKAGE_ID[INT]=NULL,
	@DELIVERY_ID[INT]=NULL,
	@ORDER_ID[INT]=NULL
)
AS
	BEGIN
		SELECT PACKAGE_ID, DELIVERY_ID, ORDER_ID
		FROM PACKAGE
		WHERE (PACKAGE.PACKAGE_ID=@PACKAGE_ID OR @PACKAGE_ID IS NULL)
		AND (PACKAGE.DELIVERY_ID=@DELIVERY_ID OR @DELIVERY_ID IS NULL)
		AND (PACKAGE.ORDER_ID=@ORDER_ID OR @ORDER_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_package_line_from_search'
GO
CREATE PROCEDURE sp_retrieve_package_line_from_search
(
	@PACKAGE_LINE_ID[INT]=NULL,
	@PACKAGE_ID[INT]=NULL,
	@PRODUCT_LOT_ID[INT]=NULL,
	@QUANTITY[INT]=NULL,
	@PRICE_PAID[DECIMAL](5)=NULL
)
AS
	BEGIN
		SELECT PACKAGE_LINE_ID, PACKAGE_ID, PRODUCT_LOT_ID, QUANTITY, PRICE_PAID
		FROM PACKAGE_LINE
		WHERE (PACKAGE_LINE.PACKAGE_LINE_ID=@PACKAGE_LINE_ID OR @PACKAGE_LINE_ID IS NULL)
		AND (PACKAGE_LINE.PACKAGE_ID=@PACKAGE_ID OR @PACKAGE_ID IS NULL)
		AND (PACKAGE_LINE.PRODUCT_LOT_ID=@PRODUCT_LOT_ID OR @PRODUCT_LOT_ID IS NULL)
		AND (PACKAGE_LINE.QUANTITY=@QUANTITY OR @QUANTITY IS NULL)
		AND (PACKAGE_LINE.PRICE_PAID=@PRICE_PAID OR @PRICE_PAID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_pickup_from_search'
GO
CREATE PROCEDURE sp_retrieve_pickup_from_search
(
	@PICKUP_ID[INT]=NULL,
	@SUPPLIER_ID[INT]=NULL,
	@WAREHOUSE_ID[INT]=NULL,
	@DRIVER_ID[INT]=NULL,@DRIVER_ID_ESCAPE[BIT] = NULL,
	@EMPLOYEE_ID[INT]=NULL,@EMPLOYEE_ID_ESCAPE[BIT] = NULL
)
AS
	BEGIN
		SELECT PICKUP_ID, SUPPLIER_ID, WAREHOUSE_ID, DRIVER_ID, EMPLOYEE_ID
		FROM PICKUP
		WHERE (PICKUP.PICKUP_ID=@PICKUP_ID OR @PICKUP_ID IS NULL)
		AND (PICKUP.SUPPLIER_ID=@SUPPLIER_ID OR @SUPPLIER_ID IS NULL)
		AND (PICKUP.WAREHOUSE_ID=@WAREHOUSE_ID OR @WAREHOUSE_ID IS NULL)
		AND (PICKUP.DRIVER_ID=@DRIVER_ID OR @DRIVER_ID IS NULL OR @DRIVER_ID_ESCAPE = 1)
		AND (PICKUP.EMPLOYEE_ID=@EMPLOYEE_ID OR @EMPLOYEE_ID IS NULL OR @EMPLOYEE_ID_ESCAPE = 1)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_pickup_line_from_search'
GO
CREATE PROCEDURE sp_retrieve_pickup_line_from_search
(
	@PICKUP_LINE_ID[INT]=NULL,
	@PICKUP_ID[INT]=NULL,
	@PRODUCT_LOT_ID[INT]=NULL,
	@QUANTITY[INT]=NULL,
	@PICK_UP_STATUS[BIT]=NULL
)
AS
	BEGIN
		SELECT PICKUP_LINE_ID, PICKUP_ID, PRODUCT_LOT_ID, QUANTITY, PICK_UP_STATUS
		FROM PICKUP_LINE
		WHERE (PICKUP_LINE.PICKUP_LINE_ID=@PICKUP_LINE_ID OR @PICKUP_LINE_ID IS NULL)
		AND (PICKUP_LINE.PICKUP_ID=@PICKUP_ID OR @PICKUP_ID IS NULL)
		AND (PICKUP_LINE.PRODUCT_LOT_ID=@PRODUCT_LOT_ID OR @PRODUCT_LOT_ID IS NULL)
		AND (PICKUP_LINE.QUANTITY=@QUANTITY OR @QUANTITY IS NULL)
		AND (PICKUP_LINE.PICK_UP_STATUS=@PICK_UP_STATUS OR @PICK_UP_STATUS IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_category_from_search'
GO
CREATE PROCEDURE sp_retrieve_product_category_from_search
(
	@PRODUCT_ID[INT]=NULL,
	@CATEGORY_ID[NVARCHAR](200)=NULL
)
AS
	BEGIN
		SELECT PRODUCT_ID, CATEGORY_ID
		FROM PRODUCT_CATEGORY
		WHERE (PRODUCT_CATEGORY.PRODUCT_ID=@PRODUCT_ID OR @PRODUCT_ID IS NULL)
		AND (PRODUCT_CATEGORY.CATEGORY_ID=@CATEGORY_ID OR @CATEGORY_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_from_search'
GO
CREATE PROCEDURE sp_retrieve_product_from_search
(
	@PRODUCT_ID[INT]=NULL,
	@NAME[NVARCHAR](50)=NULL,
	@DESCRIPTION[NVARCHAR](200)=NULL,
	@UNIT_PRICE[DECIMAL](10)=NULL,
	@IMAGE_NAME[VARCHAR](50)=NULL,@IMAGE_NAME_ESCAPE[BIT] = NULL,
	@ACTIVE[BIT]=NULL,
	@UNIT_OF_MEASUREMENT[NVARCHAR](20)=NULL,
	@DELIVERY_CHARGE_PER_UNIT[DECIMAL](5)=NULL
)
AS
	BEGIN
		SELECT PRODUCT_ID, NAME, DESCRIPTION, UNIT_PRICE, IMAGE_NAME, ACTIVE, UNIT_OF_MEASUREMENT, DELIVERY_CHARGE_PER_UNIT
		FROM PRODUCT
		WHERE (PRODUCT.PRODUCT_ID=@PRODUCT_ID OR @PRODUCT_ID IS NULL)
		AND (PRODUCT.NAME=@NAME OR @NAME IS NULL)
		AND (PRODUCT.DESCRIPTION=@DESCRIPTION OR @DESCRIPTION IS NULL)
		AND (PRODUCT.UNIT_PRICE=@UNIT_PRICE OR @UNIT_PRICE IS NULL)
		AND (PRODUCT.IMAGE_NAME=@IMAGE_NAME OR @IMAGE_NAME IS NULL OR @IMAGE_NAME_ESCAPE = 1)
		AND (PRODUCT.ACTIVE=@ACTIVE OR @ACTIVE IS NULL)
		AND (PRODUCT.UNIT_OF_MEASUREMENT=@UNIT_OF_MEASUREMENT OR @UNIT_OF_MEASUREMENT IS NULL)
		AND (PRODUCT.DELIVERY_CHARGE_PER_UNIT=@DELIVERY_CHARGE_PER_UNIT OR @DELIVERY_CHARGE_PER_UNIT IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_grade_price_from_search'
GO
CREATE PROCEDURE sp_retrieve_product_grade_price_from_search
(
	@PRODUCT_ID[INT]=NULL,
	@GRADE_ID[NVARCHAR](250)=NULL,
	@PRICE[DECIMAL](5)=NULL
)
AS
	BEGIN
		SELECT PRODUCT_ID, GRADE_ID, PRICE
		FROM PRODUCT_GRADE_PRICE
		WHERE (PRODUCT_GRADE_PRICE.PRODUCT_ID=@PRODUCT_ID OR @PRODUCT_ID IS NULL)
		AND (PRODUCT_GRADE_PRICE.GRADE_ID=@GRADE_ID OR @GRADE_ID IS NULL)
		AND (PRODUCT_GRADE_PRICE.PRICE=@PRICE OR @PRICE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_lot_from_search'
GO
CREATE PROCEDURE sp_retrieve_product_lot_from_search
(
	@PRODUCT_LOT_ID[INT]=NULL,
	@WAREHOUSE_ID[INT]=NULL,
	@SUPPLIER_ID[INT]=NULL,
	@LOCATION_ID[INT]=NULL,
	@PRODUCT_ID[INT]=NULL,
	@SUPPLY_MANAGER_ID[INT]=NULL,
	@QUANTITY[INT]=NULL,
	@AVAILABLE_QUANTITY[INT]=NULL,
	@DATE_RECEIVED[DATETIME]=NULL,
	@EXPIRATION_DATE[DATETIME]=NULL
)
AS
	BEGIN
		SELECT PRODUCT_LOT_ID, WAREHOUSE_ID, SUPPLIER_ID, LOCATION_ID, PRODUCT_ID, SUPPLY_MANAGER_ID, QUANTITY, AVAILABLE_QUANTITY, DATE_RECEIVED, EXPIRATION_DATE
		FROM PRODUCT_LOT
		WHERE (PRODUCT_LOT.PRODUCT_LOT_ID=@PRODUCT_LOT_ID OR @PRODUCT_LOT_ID IS NULL)
		AND (PRODUCT_LOT.WAREHOUSE_ID=@WAREHOUSE_ID OR @WAREHOUSE_ID IS NULL)
		AND (PRODUCT_LOT.SUPPLIER_ID=@SUPPLIER_ID OR @SUPPLIER_ID IS NULL)
		AND (PRODUCT_LOT.LOCATION_ID=@LOCATION_ID OR @LOCATION_ID IS NULL)
		AND (PRODUCT_LOT.PRODUCT_ID=@PRODUCT_ID OR @PRODUCT_ID IS NULL)
		AND (PRODUCT_LOT.SUPPLY_MANAGER_ID=@SUPPLY_MANAGER_ID OR @SUPPLY_MANAGER_ID IS NULL)
		AND (PRODUCT_LOT.QUANTITY=@QUANTITY OR @QUANTITY IS NULL)
		AND (PRODUCT_LOT.AVAILABLE_QUANTITY=@AVAILABLE_QUANTITY OR @AVAILABLE_QUANTITY IS NULL)
		AND (PRODUCT_LOT.DATE_RECEIVED=@DATE_RECEIVED OR @DATE_RECEIVED IS NULL)
		AND (PRODUCT_LOT.EXPIRATION_DATE=@EXPIRATION_DATE OR @EXPIRATION_DATE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_order_from_search'
GO
CREATE PROCEDURE sp_retrieve_product_order_from_search
(
	@ORDER_ID[INT]=NULL,
	@CUSTOMER_ID[INT]=NULL,
	@ORDER_TYPE_ID[NVARCHAR](250)=NULL,
	@ADDRESS_TYPE[NVARCHAR]=NULL,
	@DELIVERY_TYPE_ID[NVARCHAR](50)=NULL,
	@AMOUNT[DECIMAL](6)=NULL,
	@ORDER_DATE[DATETIME]=NULL,
	@DATE_EXPECTED[DATETIME]=NULL,
	@DISCOUNT[DECIMAL](5)=NULL,
	@ORDER_STATUS_ID[NVARCHAR](50)=NULL,
	@USER_ADDRESS_ID[INT]=NULL,
	@HAS_ARRIVED[BIT]=NULL
)
AS
	BEGIN
		SELECT ORDER_ID, CUSTOMER_ID, ORDER_TYPE_ID, ADDRESS_TYPE, DELIVERY_TYPE_ID, AMOUNT, ORDER_DATE, DATE_EXPECTED, DISCOUNT, ORDER_STATUS_ID, USER_ADDRESS_ID, HAS_ARRIVED
		FROM PRODUCT_ORDER
		WHERE (PRODUCT_ORDER.ORDER_ID=@ORDER_ID OR @ORDER_ID IS NULL)
		AND (PRODUCT_ORDER.CUSTOMER_ID=@CUSTOMER_ID OR @CUSTOMER_ID IS NULL)
		AND (PRODUCT_ORDER.ORDER_TYPE_ID=@ORDER_TYPE_ID OR @ORDER_TYPE_ID IS NULL)
		AND (PRODUCT_ORDER.ADDRESS_TYPE=@ADDRESS_TYPE OR @ADDRESS_TYPE IS NULL)
		AND (PRODUCT_ORDER.DELIVERY_TYPE_ID=@DELIVERY_TYPE_ID OR @DELIVERY_TYPE_ID IS NULL)
		AND (PRODUCT_ORDER.AMOUNT=@AMOUNT OR @AMOUNT IS NULL)
		AND (PRODUCT_ORDER.ORDER_DATE=@ORDER_DATE OR @ORDER_DATE IS NULL)
		AND (PRODUCT_ORDER.DATE_EXPECTED=@DATE_EXPECTED OR @DATE_EXPECTED IS NULL)
		AND (PRODUCT_ORDER.DISCOUNT=@DISCOUNT OR @DISCOUNT IS NULL)
		AND (PRODUCT_ORDER.ORDER_STATUS_ID=@ORDER_STATUS_ID OR @ORDER_STATUS_ID IS NULL)
		AND (PRODUCT_ORDER.USER_ADDRESS_ID=@USER_ADDRESS_ID OR @USER_ADDRESS_ID IS NULL)
		AND (PRODUCT_ORDER.HAS_ARRIVED=@HAS_ARRIVED OR @HAS_ARRIVED IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_product_review_from_search'
GO
CREATE PROCEDURE sp_retrieve_product_review_from_search
(
	@REVIEW_ID[INT]=NULL,
	@PRODUCT_ID[INT]=NULL,
	@USER_ID[INT]=NULL,
	@SUPPLIER_ID[INT]=NULL,
	@RATING[INT]=NULL,
	@NOTES[NVARCHAR](1000)=NULL
)
AS
	BEGIN
		SELECT REVIEW_ID, PRODUCT_ID, USER_ID, SUPPLIER_ID, RATING, NOTES
		FROM PRODUCT_REVIEW
		WHERE (PRODUCT_REVIEW.REVIEW_ID=@REVIEW_ID OR @REVIEW_ID IS NULL)
		AND (PRODUCT_REVIEW.PRODUCT_ID=@PRODUCT_ID OR @PRODUCT_ID IS NULL)
		AND (PRODUCT_REVIEW.USER_ID=@USER_ID OR @USER_ID IS NULL)
		AND (PRODUCT_REVIEW.SUPPLIER_ID=@SUPPLIER_ID OR @SUPPLIER_ID IS NULL)
		AND (PRODUCT_REVIEW.RATING=@RATING OR @RATING IS NULL)
		AND (PRODUCT_REVIEW.NOTES=@NOTES OR @NOTES IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_repair_from_search'
GO
CREATE PROCEDURE sp_retrieve_repair_from_search
(
	@REPAIR_ID[INT]=NULL,
	@VEHICLE_ID[INT]=NULL
)
AS
	BEGIN
		SELECT REPAIR_ID, VEHICLE_ID
		FROM REPAIR
		WHERE (REPAIR.REPAIR_ID=@REPAIR_ID OR @REPAIR_ID IS NULL)
		AND (REPAIR.VEHICLE_ID=@VEHICLE_ID OR @VEHICLE_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_repair_line_from_search'
GO
CREATE PROCEDURE sp_retrieve_repair_line_from_search
(
	@REPAIR_LINE_ID[INT]=NULL,
	@REPAIR_ID[INT]=NULL,
	@REPAIR_DESCRIPTION[NVARCHAR](250)=NULL
)
AS
	BEGIN
		SELECT REPAIR_LINE_ID, REPAIR_ID, REPAIR_DESCRIPTION
		FROM REPAIR_LINE
		WHERE (REPAIR_LINE.REPAIR_LINE_ID=@REPAIR_LINE_ID OR @REPAIR_LINE_ID IS NULL)
		AND (REPAIR_LINE.REPAIR_ID=@REPAIR_ID OR @REPAIR_ID IS NULL)
		AND (REPAIR_LINE.REPAIR_DESCRIPTION=@REPAIR_DESCRIPTION OR @REPAIR_DESCRIPTION IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_role_from_search'
GO
CREATE PROCEDURE sp_retrieve_role_from_search
(
	@ROLE_ID[NVARCHAR](250)=NULL,
	@DESCRIPTION[NVARCHAR](1000)=NULL
)
AS
	BEGIN
		SELECT ROLE_ID, DESCRIPTION
		FROM ROLE
		WHERE (ROLE.ROLE_ID=@ROLE_ID OR @ROLE_ID IS NULL)
		AND (ROLE.DESCRIPTION=@DESCRIPTION OR @DESCRIPTION IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_route_from_search'
GO
CREATE PROCEDURE sp_retrieve_route_from_search
(
	@ROUTE_ID[INT]=NULL,
	@VEHICLE_ID[INT]=NULL,
	@DRIVER_ID[INT]=NULL,
	@ASSIGNED_DATE[DATETIME]=NULL
)
AS
	BEGIN
		SELECT ROUTE_ID, VEHICLE_ID, DRIVER_ID, ASSIGNED_DATE
		FROM ROUTE
		WHERE (ROUTE.ROUTE_ID=@ROUTE_ID OR @ROUTE_ID IS NULL)
		AND (ROUTE.VEHICLE_ID=@VEHICLE_ID OR @VEHICLE_ID IS NULL)
		AND (ROUTE.DRIVER_ID=@DRIVER_ID OR @DRIVER_ID IS NULL)
		AND (ROUTE.ASSIGNED_DATE=@ASSIGNED_DATE OR @ASSIGNED_DATE IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_shipping_address_from_search'
GO
CREATE PROCEDURE sp_retrieve_shipping_address_from_search
(
	@ADDRESS_ID[INT]=NULL,
	@USER_ID[INT]=NULL,
	@ADDRESS1[NVARCHAR](100)=NULL,
	@ADDRESS2[NVARCHAR](100)=NULL,@ADDRESS2_ESCAPE[BIT] = NULL,
	@CITY[NVARCHAR](50)=NULL,
	@STATE[NCHAR](2)=NULL,
	@ZIP[NVARCHAR](10)=NULL,
	@ADDRESS_NAME[NVARCHAR](50)=NULL
)
AS
	BEGIN
		SELECT ADDRESS_ID, USER_ID, ADDRESS1, ADDRESS2, CITY, STATE, ZIP, ADDRESS_NAME
		FROM SHIPPING_ADDRESS
		WHERE (SHIPPING_ADDRESS.ADDRESS_ID=@ADDRESS_ID OR @ADDRESS_ID IS NULL)
		AND (SHIPPING_ADDRESS.USER_ID=@USER_ID OR @USER_ID IS NULL)
		AND (SHIPPING_ADDRESS.ADDRESS1=@ADDRESS1 OR @ADDRESS1 IS NULL)
		AND (SHIPPING_ADDRESS.ADDRESS2=@ADDRESS2 OR @ADDRESS2 IS NULL OR @ADDRESS2_ESCAPE = 1)
		AND (SHIPPING_ADDRESS.CITY=@CITY OR @CITY IS NULL)
		AND (SHIPPING_ADDRESS.STATE=@STATE OR @STATE IS NULL)
		AND (SHIPPING_ADDRESS.ZIP=@ZIP OR @ZIP IS NULL)
		AND (SHIPPING_ADDRESS.ADDRESS_NAME=@ADDRESS_NAME OR @ADDRESS_NAME IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_status_from_search'
GO
CREATE PROCEDURE sp_retrieve_status_from_search
(
	@STATUS_ID[NVARCHAR](50)=NULL
)
AS
	BEGIN
		SELECT STATUS_ID
		FROM STATUS
		WHERE (STATUS.STATUS_ID=@STATUS_ID OR @STATUS_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_supplier_from_search'
GO
CREATE PROCEDURE sp_retrieve_supplier_from_search
(
	@SUPPLIER_ID[INT]=NULL,
	@USER_ID[INT]=NULL,
	@IS_APPROVED[BIT]=NULL,
	@APPROVED_BY[INT]=NULL,
	@FARM_TAX_ID[NVARCHAR](64)=NULL
)
AS
	BEGIN
		SELECT SUPPLIER_ID, USER_ID, IS_APPROVED, APPROVED_BY, FARM_TAX_ID
		FROM SUPPLIER
		WHERE (SUPPLIER.SUPPLIER_ID=@SUPPLIER_ID OR @SUPPLIER_ID IS NULL)
		AND (SUPPLIER.USER_ID=@USER_ID OR @USER_ID IS NULL)
		AND (SUPPLIER.IS_APPROVED=@IS_APPROVED OR @IS_APPROVED IS NULL)
		AND (SUPPLIER.APPROVED_BY=@APPROVED_BY OR @APPROVED_BY IS NULL)
		AND (SUPPLIER.FARM_TAX_ID=@FARM_TAX_ID OR @FARM_TAX_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_user_address_from_search'
GO
CREATE PROCEDURE sp_retrieve_user_address_from_search
(
	@USER_ADDRESS_ID[INT]=NULL,
	@USER_ID[INT]=NULL,
	@ADDRESS_LINE_1[NVARCHAR](50)=NULL,
	@ADDRESS_LINE_2[NVARCHAR](50)=NULL,
	@CITY[NVARCHAR](50)=NULL,
	@STATE[NCHAR](2)=NULL,
	@ZIP[NVARCHAR](10)=NULL
)
AS
	BEGIN
		SELECT USER_ADDRESS_ID, USER_ID, ADDRESS_LINE_1, ADDRESS_LINE_2, CITY, STATE, ZIP
		FROM USER_ADDRESS
		WHERE (USER_ADDRESS.USER_ADDRESS_ID=@USER_ADDRESS_ID OR @USER_ADDRESS_ID IS NULL)
		AND (USER_ADDRESS.USER_ID=@USER_ID OR @USER_ID IS NULL)
		AND (USER_ADDRESS.ADDRESS_LINE_1=@ADDRESS_LINE_1 OR @ADDRESS_LINE_1 IS NULL)
		AND (USER_ADDRESS.ADDRESS_LINE_2=@ADDRESS_LINE_2 OR @ADDRESS_LINE_2 IS NULL)
		AND (USER_ADDRESS.CITY=@CITY OR @CITY IS NULL)
		AND (USER_ADDRESS.STATE=@STATE OR @STATE IS NULL)
		AND (USER_ADDRESS.ZIP=@ZIP OR @ZIP IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_user_cart_line_from_search'
GO
CREATE PROCEDURE sp_retrieve_user_cart_line_from_search
(
	@PRODUCT_ID[INT]=NULL,
    @GRADE_ID[NVARCHAR](250)=NULL,
    @QUANTITY[INT]=NULL,
	@USER_ID[INT]=NULL
)
AS
	BEGIN
		SELECT PRODUCT_ID, USER_ID
		FROM USER_CART_LINE
		WHERE (USER_CART_LINE.PRODUCT_ID=@PRODUCT_ID OR @PRODUCT_ID IS NULL)
		AND (USER_CART_LINE.USER_ID=@USER_ID OR @USER_ID IS NULL)
		AND (USER_CART_LINE.GRADE_ID=@GRADE_ID OR @GRADE_ID IS NULL)
		AND (USER_CART_LINE.QUANTITY=@QUANTITY OR @QUANTITY IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_vehicle_from_search'
GO
CREATE PROCEDURE sp_retrieve_vehicle_from_search
(
	@VEHICLE_ID[INT]=NULL,
	@VIN[NVARCHAR](20)=NULL,
	@MAKE[NVARCHAR](15)=NULL,
	@MODEL[NVARCHAR](20)=NULL,
	@MILEAGE[INT]=NULL,
	@YEAR[NVARCHAR](4)=NULL,
	@COLOR[NVARCHAR](20)=NULL,
	@ACTIVE[BIT]=NULL,
	@LATEST_REPAIR_DATE[DATE]=NULL,@LATEST_REPAIR_DATE_ESCAPE[BIT] = NULL,
	@LAST_DRIVER_ID[INT]=NULL,@LAST_DRIVER_ID_ESCAPE[BIT] = NULL,
	@VEHICLE_TYPE_ID[NVARCHAR](50)=NULL
)
AS
	BEGIN
		SELECT VEHICLE_ID, VIN, MAKE, MODEL, MILEAGE, YEAR, COLOR, ACTIVE, LATEST_REPAIR_DATE, LAST_DRIVER_ID, VEHICLE_TYPE_ID
		FROM VEHICLE
		WHERE (VEHICLE.VEHICLE_ID=@VEHICLE_ID OR @VEHICLE_ID IS NULL)
		AND (VEHICLE.VIN=@VIN OR @VIN IS NULL)
		AND (VEHICLE.MAKE=@MAKE OR @MAKE IS NULL)
		AND (VEHICLE.MODEL=@MODEL OR @MODEL IS NULL)
		AND (VEHICLE.MILEAGE=@MILEAGE OR @MILEAGE IS NULL)
		AND (VEHICLE.YEAR=@YEAR OR @YEAR IS NULL)
		AND (VEHICLE.COLOR=@COLOR OR @COLOR IS NULL)
		AND (VEHICLE.ACTIVE=@ACTIVE OR @ACTIVE IS NULL)
		AND (VEHICLE.LATEST_REPAIR_DATE=@LATEST_REPAIR_DATE OR @LATEST_REPAIR_DATE IS NULL OR @LATEST_REPAIR_DATE_ESCAPE = 1)
		AND (VEHICLE.LAST_DRIVER_ID=@LAST_DRIVER_ID OR @LAST_DRIVER_ID IS NULL OR @LAST_DRIVER_ID_ESCAPE = 1)
		AND (VEHICLE.VEHICLE_TYPE_ID=@VEHICLE_TYPE_ID OR @VEHICLE_TYPE_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_vehicle_type_from_search'
GO
CREATE PROCEDURE sp_retrieve_vehicle_type_from_search
(
	@VEHICLE_TYPE_ID[NVARCHAR](50)=NULL
)
AS
	BEGIN
		SELECT VEHICLE_TYPE_ID
		FROM VEHICLE_TYPE
		WHERE (VEHICLE_TYPE.VEHICLE_TYPE_ID=@VEHICLE_TYPE_ID OR @VEHICLE_TYPE_ID IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_warehouse_from_search'
GO
CREATE PROCEDURE sp_retrieve_warehouse_from_search
(
	@WAREHOUSE_ID[INT]=NULL,
	@ADDRESS_1[NVARCHAR](50)=NULL,
	@ADDRESS_2[NVARCHAR](50)=NULL,
	@CITY[NVARCHAR](50)=NULL,
	@STATE[NCHAR](2)=NULL,
	@ZIP[NVARCHAR](10)=NULL
)
AS
	BEGIN
		SELECT WAREHOUSE_ID, ADDRESS_1, ADDRESS_2, CITY, STATE, ZIP
		FROM WAREHOUSE
		WHERE (WAREHOUSE.WAREHOUSE_ID=@WAREHOUSE_ID OR @WAREHOUSE_ID IS NULL)
		AND (WAREHOUSE.ADDRESS_1=@ADDRESS_1 OR @ADDRESS_1 IS NULL)
		AND (WAREHOUSE.ADDRESS_2=@ADDRESS_2 OR @ADDRESS_2 IS NULL)
		AND (WAREHOUSE.CITY=@CITY OR @CITY IS NULL)
		AND (WAREHOUSE.STATE=@STATE OR @STATE IS NULL)
		AND (WAREHOUSE.ZIP=@ZIP OR @ZIP IS NULL)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_wishlist_line_from_search'
GO
CREATE PROCEDURE sp_retrieve_wishlist_line_from_search
(
	@CUSTOMER_ID[INT]=NULL,
	@PRODUCT_ID[INT]=NULL
)
AS
	BEGIN
		SELECT CUSTOMER_ID, PRODUCT_ID
		FROM WISHLIST_LINE
		WHERE (WISHLIST_LINE.CUSTOMER_ID=@CUSTOMER_ID OR @CUSTOMER_ID IS NULL)
		AND (WISHLIST_LINE.PRODUCT_ID=@PRODUCT_ID OR @PRODUCT_ID IS NULL)
	END
GO

print '' print '*** Creating UPDATE stored procedures'
GO

print '' print  '*** Creating procedure sp_reset_user_password'
GO
CREATE PROCEDURE sp_reset_user_password
(
	@USERNAME[NVARCHAR](50),
	@PASSWORD_SALT[NVARCHAR](64),
	@PASSWORD_HASH[NVARCHAR](64)
)
AS
    UPDATE APP_USER
    SET PASSWORD_SALT = @PASSWORD_SALT,PASSWORD_HASH = @PASSWORD_HASH
    WHERE USER_NAME = @USERNAME
	RETURN @@ROWCOUNT
GO

print '' print  '*** Creating procedure sp_update_agreement'
GO
CREATE PROCEDURE sp_update_agreement
(
	@AGREEMENT_ID[INT],
	@old_PRODUCT_ID[INT],
	@new_PRODUCT_ID[INT],
	@old_SUPPLIER_ID[INT],
	@new_SUPPLIER_ID[INT],
	@old_DATE_SUBMITTED[DATETIME],
	@new_DATE_SUBMITTED[DATETIME],
	@old_IS_APPROVED[BIT],
	@new_IS_APPROVED[BIT],
	@old_APPROVED_BY[INT] = NULL,
	@new_APPROVED_BY[INT] = NULL,
	@old_ACTIVE[BIT],
	@new_ACTIVE[BIT]
)
AS
	BEGIN
		UPDATE agreement
		SET PRODUCT_ID = @new_PRODUCT_ID, SUPPLIER_ID = @new_SUPPLIER_ID, DATE_SUBMITTED = @new_DATE_SUBMITTED, IS_APPROVED = @new_IS_APPROVED, APPROVED_BY = @new_APPROVED_BY, ACTIVE = @new_ACTIVE
		WHERE (AGREEMENT_ID = @AGREEMENT_ID)
		AND (PRODUCT_ID = @old_PRODUCT_ID)
		AND (SUPPLIER_ID = @old_SUPPLIER_ID)
		AND (DATE_SUBMITTED = @old_DATE_SUBMITTED)
		AND (IS_APPROVED = @old_IS_APPROVED)
		AND (ACTIVE = @old_ACTIVE)
		AND ((APPROVED_BY = @old_APPROVED_BY) OR (APPROVED_BY IS NULL))
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_app_user'
GO
CREATE PROCEDURE sp_update_app_user
(
	@old_USER_ID[INT],
	@old_FIRST_NAME[NVARCHAR](150),
	@new_FIRST_NAME[NVARCHAR](150),
	@old_LAST_NAME[NVARCHAR](100)=null,
	@new_LAST_NAME[NVARCHAR](100),
	@old_PHONE[NVARCHAR](15),
	@new_PHONE[NVARCHAR](15),
	@old_PREFERRED_ADDRESS_ID[INT],
	@new_PREFERRED_ADDRESS_ID[INT],
	@old_E_MAIL_ADDRESS[NVARCHAR](50),
	@new_E_MAIL_ADDRESS[NVARCHAR](50),
	@old_E_MAIL_PREFERENCES[BIT],
	@new_E_MAIL_PREFERENCES[BIT],
	@old_PASSWORD_HASH[NVARCHAR](64),
	@new_PASSWORD_HASH[NVARCHAR](64),
	@old_PASSWORD_SALT[NVARCHAR](64),
	@new_PASSWORD_SALT[NVARCHAR](64),
	@old_USER_NAME[NVARCHAR](50),
	@new_USER_NAME[NVARCHAR](50),
	@old_ACTIVE[BIT],
	@new_ACTIVE[BIT]
)
AS
	BEGIN
		UPDATE app_user
		SET FIRST_NAME = @new_FIRST_NAME, LAST_NAME = @new_LAST_NAME, PHONE = @new_PHONE, PREFERRED_ADDRESS_ID = @new_PREFERRED_ADDRESS_ID, E_MAIL_ADDRESS = @new_E_MAIL_ADDRESS, E_MAIL_PREFERENCES = @new_E_MAIL_PREFERENCES, PASSWORD_HASH = @new_PASSWORD_HASH, PASSWORD_SALT = @new_PASSWORD_SALT, USER_NAME = @new_USER_NAME, ACTIVE = @new_ACTIVE
		WHERE (USER_ID = @old_USER_ID)
		AND (FIRST_NAME = @old_FIRST_NAME)
		AND (LAST_NAME = @old_LAST_NAME OR ISNULL(LAST_NAME, @old_LAST_NAME) IS NULL)
		AND (PHONE = @old_PHONE)
		AND (PREFERRED_ADDRESS_ID = @old_PREFERRED_ADDRESS_ID)
		AND (E_MAIL_ADDRESS = @old_E_MAIL_ADDRESS)
		AND (E_MAIL_PREFERENCES = @old_E_MAIL_PREFERENCES)
		AND (PASSWORD_HASH = @old_PASSWORD_HASH)
		AND (PASSWORD_SALT = @old_PASSWORD_SALT)
		AND (USER_NAME = @old_USER_NAME)
		AND (ACTIVE = @old_ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_backorder_preorder'
GO
CREATE PROCEDURE sp_update_backorder_preorder
(
	@old_BACKORDER_PREORDER_ID[INT]=null,
	@old_ORDER_ID[INT],
	@new_ORDER_ID[INT],
	@old_CUSTOMER_ID[INT],
	@new_CUSTOMER_ID[INT],
	@old_AMOUNT[DECIMAL](10,2),
	@new_AMOUNT[DECIMAL](10,2),
	@old_DATE_PLACED[DATETIME],
	@new_DATE_PLACED[DATETIME],
	@old_DATE_EXPECTED[DATETIME],
	@new_DATE_EXPECTED[DATETIME],
	@old_HAS_ARRIVED[BIT],
	@new_HAS_ARRIVED[BIT],
	@old_ADDRESS_1[NVARCHAR](50),
	@new_ADDRESS_1[NVARCHAR](50),
	@old_ADDRESS_2[NVARCHAR](50),
	@new_ADDRESS_2[NVARCHAR](50),
	@old_CITY[NVARCHAR](50),
	@new_CITY[NVARCHAR](50),
	@old_STATE[NCHAR](2),
	@new_STATE[NCHAR](2),
	@old_ZIP[NVARCHAR](10),
	@new_ZIP[NVARCHAR](10)
)
AS
	BEGIN
		UPDATE backorder_preorder
		SET ORDER_ID = @new_ORDER_ID, CUSTOMER_ID = @new_CUSTOMER_ID, AMOUNT = @new_AMOUNT, DATE_PLACED = @new_DATE_PLACED, DATE_EXPECTED = @new_DATE_EXPECTED, HAS_ARRIVED = @new_HAS_ARRIVED, ADDRESS_1 = @new_ADDRESS_1, ADDRESS_2 = @new_ADDRESS_2, CITY = @new_CITY, STATE = @new_STATE, ZIP = @new_ZIP
		WHERE (BACKORDER_PREORDER_ID = @old_BACKORDER_PREORDER_ID OR ISNULL(BACKORDER_PREORDER_ID, @old_BACKORDER_PREORDER_ID) IS NULL)
		AND (ORDER_ID = @old_ORDER_ID)
		AND (CUSTOMER_ID = @old_CUSTOMER_ID)
		AND (AMOUNT = @old_AMOUNT)
		AND (DATE_PLACED = @old_DATE_PLACED)
		AND (DATE_EXPECTED = @old_DATE_EXPECTED)
		AND (HAS_ARRIVED = @old_HAS_ARRIVED)
		AND (ADDRESS_1 = @old_ADDRESS_1)
		AND (ADDRESS_2 = @old_ADDRESS_2)
		AND (CITY = @old_CITY)
		AND (STATE = @old_STATE)
		AND (ZIP = @old_ZIP)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_charity'
GO
CREATE PROCEDURE sp_update_charity
(
	@old_CHARITY_ID[INT],
	@old_USER_ID[INT],
	@new_USER_ID[INT],
	@old_EMPLOYEE_ID[INT],
	@new_EMPLOYEE_ID[INT],
	@old_CHARITY_NAME[NVARCHAR](200),
	@new_CHARITY_NAME[NVARCHAR](200),
	@old_CONTACT_FIRST_NAME[NVARCHAR](150),
	@new_CONTACT_FIRST_NAME[NVARCHAR](150),
	@old_CONTACT_LAST_NAME[NVARCHAR](150),
	@new_CONTACT_LAST_NAME[NVARCHAR](150),
	@old_PHONE_NUMBER[NVARCHAR](20),
	@new_PHONE_NUMBER[NVARCHAR](20),
	@old_EMAIL[NVARCHAR](100),
	@new_EMAIL[NVARCHAR](100),
	@old_CONTACT_HOURS[NVARCHAR](150),
	@new_CONTACT_HOURS[NVARCHAR](150),
	@old_STATUS[NVARCHAR](10),
	@new_STATUS[NVARCHAR](10)

)
AS
	BEGIN
		UPDATE charity
		SET USER_ID = @new_USER_ID, EMPLOYEE_ID = @new_EMPLOYEE_ID, CHARITY_NAME = @new_CHARITY_NAME, CONTACT_FIRST_NAME = @new_CONTACT_FIRST_NAME, CONTACT_LAST_NAME = @new_CONTACT_LAST_NAME, PHONE_NUMBER = @new_PHONE_NUMBER, EMAIL = @new_EMAIL, CONTACT_HOURS = @new_CONTACT_HOURS, STATUS = @new_STATUS
		WHERE (CHARITY_ID = @old_CHARITY_ID)
		AND (USER_ID = @old_USER_ID)
		AND (EMPLOYEE_ID = @old_EMPLOYEE_ID)
		AND (CHARITY_NAME = @old_CHARITY_NAME)
		AND (CONTACT_FIRST_NAME = @old_CONTACT_FIRST_NAME)
		AND (CONTACT_LAST_NAME = @old_CONTACT_LAST_NAME)
		AND (PHONE_NUMBER = @old_PHONE_NUMBER)
		AND (EMAIL = @old_EMAIL)
		AND (CONTACT_HOURS = @old_CONTACT_HOURS)
		AND (STATUS = @old_STATUS)
		RETURN @@ROWCOUNT
	END
GO


print '' print  '*** Creating procedure sp_update_commercial_customer_approval'
GO
CREATE PROCEDURE [dbo].[sp_update_commercial_customer_approval]
(
@old_COMMERCIAL_ID		[INT],
@approvedBy				[INT],
@isApproved				[bit]
)
AS
	BEGIN
		UPDATE [commercial]
		SET IS_APPROVED = @isApproved,
			APPROVED_BY = @approvedBy,
			ACTIVE = @isApproved
		WHERE COMMERCIAL_ID = @old_COMMERCIAL_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_commercial_customer_approval'
GO
CREATE PROCEDURE [dbo].[sp_update_supplier_approval]
(
@old_SUPPLIER_ID		[INT],
@approvedBy				[INT],
@isApproved				[bit]
)
AS
	BEGIN
		UPDATE [SUPPLIER]
		SET IS_APPROVED = @isApproved,
			APPROVED_BY = @approvedBy,
			ACTIVE = @isApproved
		WHERE SUPPLIER_ID = @old_SUPPLIER_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_charity_approve'
GO
CREATE PROCEDURE [dbo].[sp_update_charity_approve]
(
@old_CHARITY_ID[INT]
)
AS
	BEGIN
		UPDATE [CHARITY]
		SET STATUS = "Approved"
		WHERE CHARITY_ID = @old_CHARITY_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_charity_deny'
GO
CREATE PROCEDURE [dbo].[sp_update_charity_deny]
(
@old_CHARITY_ID[INT]
)
AS
	BEGIN
		UPDATE [CHARITY]
		SET STATUS = "Denied"
		WHERE CHARITY_ID = @old_CHARITY_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_charity_products'
GO
CREATE PROCEDURE sp_update_charity_products
(
	@old_CHARITY_ID[INT],
	@old_PRODUCT_LOT_ID[INT],
	@old_QUANTITY[INT],
	@new_QUANTITY[INT]
)
AS
	BEGIN
		UPDATE charity_products
		SET QUANTITY = @new_QUANTITY
		WHERE (CHARITY_ID = @old_CHARITY_ID)
		AND (PRODUCT_LOT_ID = @old_PRODUCT_LOT_ID)
		AND (QUANTITY = @old_QUANTITY)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_commercial'
GO
CREATE PROCEDURE sp_update_commercial
(
	@old_COMMERCIAL_ID[INT],
	@old_USER_ID[INT],
	@new_USER_ID[INT]
)
AS
	BEGIN
		UPDATE commercial
		SET USER_ID = @new_USER_ID
		WHERE (COMMERCIAL_ID = @old_COMMERCIAL_ID)
		AND (USER_ID = @old_USER_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_deal'
GO
CREATE PROCEDURE sp_update_deal
	(
	@old_DEAL_ID[INT],
	@old_DESCRIPTION[NVARCHAR](200),
	@new_DESCRIPTION[NVARCHAR](200),
	@old_CODE[NCHAR](10)=null,
	@new_CODE[NCHAR](10),
	@old_AMOUNT[DECIMAL](5,2)=null,
	@new_AMOUNT[DECIMAL](5,2),
	@old_PERCENT_OFF[DECIMAL](5,2)=null,
	@new_PERCENT_OFF[DECIMAL](5,2)
)
AS
	BEGIN
		UPDATE deal
		SET DESCRIPTION = @new_DESCRIPTION, CODE = @new_CODE, AMOUNT = @new_AMOUNT, PERCENT_OFF = @new_PERCENT_OFF
		WHERE (DEAL_ID = @old_DEAL_ID)
		AND (DESCRIPTION = @old_DESCRIPTION)
		AND (CODE = @old_CODE OR ISNULL(CODE, @old_CODE) IS NULL)
		AND (AMOUNT = @old_AMOUNT OR ISNULL(AMOUNT, @old_AMOUNT) IS NULL)
		AND (PERCENT_OFF = @old_PERCENT_OFF OR ISNULL(PERCENT_OFF, @old_PERCENT_OFF) IS NULL)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_deal_category'
GO
CREATE PROCEDURE sp_update_deal_category
(
	@old_DEAL_ID[INT],
	@old_CATEGORY_ID[NVARCHAR](200),
	@old_ACTIVE[BIT],
	@new_ACTIVE[BIT]
)
AS
	BEGIN
		UPDATE deal_category
		SET ACTIVE = @new_ACTIVE
		WHERE (DEAL_ID = @old_DEAL_ID)
		AND (CATEGORY_ID = @old_CATEGORY_ID)
		AND (ACTIVE = @old_ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_deal_product'
GO
CREATE PROCEDURE sp_update_deal_product
(
	@old_DEAL_ID[INT],
	@old_PRODUCT_ID[INT],
	@old_ACTIVE[BIT],
	@new_ACTIVE[BIT]
)
AS
	BEGIN
		UPDATE deal_product
		SET ACTIVE = @new_ACTIVE
		WHERE (DEAL_ID = @old_DEAL_ID)
		AND (PRODUCT_ID = @old_PRODUCT_ID)
		AND (ACTIVE = @old_ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_delivery'
GO
CREATE PROCEDURE sp_update_delivery
(
	@DELIVERY_ID[INT],
	@old_ROUTE_ID[INT],
	@new_ROUTE_ID[INT],
	@old_DELIVERY_DATE[DATETIME],
	@new_DELIVERY_DATE[DATETIME],
	@old_VERIFICATION[VARBINARY]=null,
	@new_VERIFICATION[VARBINARY],
	@old_STATUS_ID[NVARCHAR](50),
	@new_STATUS_ID[NVARCHAR](50),
	@old_DELIVERY_TYPE_ID[NVARCHAR](50),
	@new_DELIVERY_TYPE_ID[NVARCHAR](50),
	@old_ORDER_ID[INT],
	@new_ORDER_ID[INT]
)
AS
	BEGIN
		UPDATE delivery
		SET ROUTE_ID = @new_ROUTE_ID, DELIVERY_DATE = @new_DELIVERY_DATE, VERIFICATION = @new_VERIFICATION, STATUS_ID = @new_STATUS_ID, DELIVERY_TYPE_ID = @new_DELIVERY_TYPE_ID, ORDER_ID = @new_ORDER_ID
		WHERE (DELIVERY_ID = @DELIVERY_ID)
		AND (ROUTE_ID = @old_ROUTE_ID)
		AND (DELIVERY_DATE = @old_DELIVERY_DATE)
		AND (VERIFICATION = @old_VERIFICATION OR ISNULL(VERIFICATION, @old_VERIFICATION) IS NULL)
		AND (STATUS_ID = @old_STATUS_ID)
		AND (DELIVERY_TYPE_ID = @old_DELIVERY_TYPE_ID)
		AND (ORDER_ID = @old_ORDER_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_delivery_type'
GO
CREATE PROCEDURE sp_update_delivery_type
(
	@old_DELIVERY_TYPE_ID[NVARCHAR](50),
	@old_ACTIVE[BIT],
	@new_ACTIVE[BIT]
)
AS
	BEGIN
		UPDATE delivery_type
		SET ACTIVE = @new_ACTIVE
		WHERE (DELIVERY_TYPE_ID = @old_DELIVERY_TYPE_ID)
		AND (ACTIVE = @old_ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_dispatcher_message'
GO
CREATE PROCEDURE sp_update_dispatcher_message
(
	@old_DISPATCHER_MESSAGE_ID[INT],
	@old_EMPLOYEE_ID[INT],
	@new_EMPLOYEE_ID[INT],
	@old_MESSAGE_NAME[NVARCHAR](100),
	@new_MESSAGE_NAME[NVARCHAR](100),
	@old_DRIVER_ID[INT],
	@new_DRIVER_ID[INT]
)
AS
	BEGIN
		UPDATE dispatcher_message
		SET EMPLOYEE_ID = @new_EMPLOYEE_ID, MESSAGE_NAME = @new_MESSAGE_NAME, DRIVER_ID = @new_DRIVER_ID
		WHERE (DISPATCHER_MESSAGE_ID = @old_DISPATCHER_MESSAGE_ID)
		AND (EMPLOYEE_ID = @old_EMPLOYEE_ID)
		AND (MESSAGE_NAME = @old_MESSAGE_NAME)
		AND (DRIVER_ID = @old_DRIVER_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_driver'
GO
CREATE PROCEDURE sp_update_driver
(
	@old_DRIVER_ID[INT],
	@old_DRIVER_LICENSE_NUMBER[NVARCHAR](9),
	@new_DRIVER_LICENSE_NUMBER[NVARCHAR](9),
	@old_LICENSE_EXPIRATION[DATETIME],
	@new_LICENSE_EXPIRATION[DATETIME],
	@old_ACTIVE[BIT],
	@new_ACTIVE[BIT]
)
AS
	BEGIN
		UPDATE driver
		SET DRIVER_LICENSE_NUMBER = @new_DRIVER_LICENSE_NUMBER, LICENSE_EXPIRATION = @new_LICENSE_EXPIRATION, ACTIVE = @new_ACTIVE
		WHERE (DRIVER_ID = @old_DRIVER_ID)
		AND (DRIVER_LICENSE_NUMBER = @old_DRIVER_LICENSE_NUMBER)
		AND (LICENSE_EXPIRATION = @old_LICENSE_EXPIRATION)
		AND (ACTIVE = @old_ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_employee'
GO
CREATE PROCEDURE sp_update_employee
(
	@EMPLOYEE_ID[INT],
	@old_USER_ID[INT],
	@new_USER_ID[INT],
	@old_SALARY[DECIMAL](8,2)=null,
	@new_SALARY[DECIMAL](8,2),
	@old_ACTIVE[BIT],
	@new_ACTIVE[BIT],
	@old_DATE_OF_BIRTH[DATE],
	@new_DATE_OF_BIRTH[DATE]
)
AS
	BEGIN
		UPDATE employee
		SET USER_ID = @new_USER_ID, SALARY = @new_SALARY, ACTIVE = @new_ACTIVE, DATE_OF_BIRTH = @new_DATE_OF_BIRTH
		WHERE (EMPLOYEE_ID = @EMPLOYEE_ID)
		AND (USER_ID = @old_USER_ID)
		AND (SALARY = @old_SALARY OR ISNULL(SALARY, @old_SALARY) IS NULL)
		AND (ACTIVE = @old_ACTIVE)
		AND (DATE_OF_BIRTH = @old_DATE_OF_BIRTH)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_employee_message'
GO
CREATE PROCEDURE sp_update_employee_message
(
	@old_MESSAGE_ID[INT],
	@old_SENDER_ID[INT],
	@new_SENDER_ID[INT],
	@old_RECEIVER_ID[INT],
	@new_RECEIVER_ID[INT],
	@old_SENT[DATETIME],
	@new_SENT[DATETIME],
	@old_VIEWED[BIT],
	@new_VIEWED[BIT],
	@old_MESSAGE[NVARCHAR](4000),
	@new_MESSAGE[NVARCHAR](4000)
)
AS
	BEGIN
		UPDATE employee_message
		SET SENDER_ID = @new_SENDER_ID, RECEIVER_ID = @new_RECEIVER_ID, SENT = @new_SENT, VIEWED = @new_VIEWED, MESSAGE = @new_MESSAGE
		WHERE (MESSAGE_ID = @old_MESSAGE_ID)
		AND (SENDER_ID = @old_SENDER_ID)
		AND (RECEIVER_ID = @old_RECEIVER_ID)
		AND (SENT = @old_SENT)
		AND (VIEWED = @old_VIEWED)
		AND (MESSAGE = @old_MESSAGE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_employee_order_responsibility'
GO
CREATE PROCEDURE sp_update_employee_order_responsibility
(
	@old_ORDER_ID[INT],
	@old_EMPLOYEE_ID[INT],
	@old_DESCRIPTION[NVARCHAR](200),
	@new_DESCRIPTION[NVARCHAR](200)
)
AS
	BEGIN
		UPDATE employee_order_responsibility
		SET DESCRIPTION = @new_DESCRIPTION
		WHERE (ORDER_ID = @old_ORDER_ID)
		AND (EMPLOYEE_ID = @old_EMPLOYEE_ID)
		AND (DESCRIPTION = @old_DESCRIPTION)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_inspection'
GO
CREATE PROCEDURE sp_update_inspection
(
	@old_INSPECTION_ID[INT],
	@old_EMPLOYEE_ID[INT],
	@new_EMPLOYEE_ID[INT],
	@old_PRODUCT_LOT_ID[INT],
	@new_PRODUCT_LOT_ID[INT],
	@old_GRADE_ID[NVARCHAR](250),
	@new_GRADE_ID[NVARCHAR](250),
	@old_DATE_PERFORMED[DATETIME],
	@new_DATE_PERFORMED[DATETIME],
	@old_EXPIRATION_DATE[DATETIME],
	@new_EXPIRATION_DATE[DATETIME]
)
AS
	BEGIN
		UPDATE inspection
		SET EMPLOYEE_ID = @new_EMPLOYEE_ID, PRODUCT_LOT_ID = @new_PRODUCT_LOT_ID, GRADE_ID = @new_GRADE_ID, DATE_PERFORMED = @new_DATE_PERFORMED, EXPIRATION_DATE = @new_EXPIRATION_DATE
		WHERE (INSPECTION_ID = @old_INSPECTION_ID)
		AND (EMPLOYEE_ID = @old_EMPLOYEE_ID)
		AND (PRODUCT_LOT_ID = @old_PRODUCT_LOT_ID)
		AND (GRADE_ID = @old_GRADE_ID)
		AND (DATE_PERFORMED = @old_DATE_PERFORMED)
		AND (EXPIRATION_DATE = @old_EXPIRATION_DATE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_location'
GO
CREATE PROCEDURE sp_update_location
(
	@LOCATION_ID[INT],
	@old_DESCRIPTION[NVARCHAR](250),
	@new_DESCRIPTION[NVARCHAR](250),
	@old_IS_ACTIVE[BIT],
	@new_IS_ACTIVE[BIT]
)
AS
	BEGIN
		UPDATE location
		SET DESCRIPTION = @new_DESCRIPTION, IS_ACTIVE = @new_IS_ACTIVE
		WHERE (LOCATION_ID = @LOCATION_ID)
		AND (DESCRIPTION = @old_DESCRIPTION)
		AND (IS_ACTIVE = @old_IS_ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_maintenance_schedule'
GO
CREATE PROCEDURE sp_update_maintenance_schedule
(
	@old_MAINTENANCE_SCHEDULE_ID[INT],
	@old_VEHICLE_ID[INT],
	@new_VEHICLE_ID[INT]
)
AS
	BEGIN
		UPDATE maintenance_schedule
		SET VEHICLE_ID = @new_VEHICLE_ID
		WHERE (MAINTENANCE_SCHEDULE_ID = @old_MAINTENANCE_SCHEDULE_ID)
		AND (VEHICLE_ID = @old_VEHICLE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_maintenance_schedule_line'
GO
CREATE PROCEDURE sp_update_maintenance_schedule_line
(
	@old_MAINTENANCE_SCHEDULE_LINE_ID[INT],
	@old_MAINTENANCE_SCHEDULE_ID[INT],
	@new_MAINTENANCE_SCHEDULE_ID[INT],
	@old_DESCRIPTION[NVARCHAR](250),
	@new_DESCRIPTION[NVARCHAR](250),
	@old_MAINTENANCE_DATE[DATE],
	@new_MAINTENANCE_DATE[DATE]
)
AS
	BEGIN
		UPDATE maintenance_schedule_line
		SET MAINTENANCE_SCHEDULE_ID = @new_MAINTENANCE_SCHEDULE_ID, DESCRIPTION = @new_DESCRIPTION, MAINTENANCE_DATE = @new_MAINTENANCE_DATE
		WHERE (MAINTENANCE_SCHEDULE_LINE_ID = @old_MAINTENANCE_SCHEDULE_LINE_ID)
		AND (MAINTENANCE_SCHEDULE_ID = @old_MAINTENANCE_SCHEDULE_ID)
		AND (DESCRIPTION = @old_DESCRIPTION)
		AND (MAINTENANCE_DATE = @old_MAINTENANCE_DATE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_message_line'
GO
CREATE PROCEDURE sp_update_message_line
(
	@old_MESSAGE_LINE_ID[INT],
	@old_DISPATCHER_MESSAGE_ID[INT],
	@new_DISPATCHER_MESSAGE_ID[INT],
	@old_MESSAGE_LINE_TEXT[NVARCHAR](250),
	@new_MESSAGE_LINE_TEXT[NVARCHAR](250)
)
AS
	BEGIN
		UPDATE message_line
		SET DISPATCHER_MESSAGE_ID = @new_DISPATCHER_MESSAGE_ID, MESSAGE_LINE_TEXT = @new_MESSAGE_LINE_TEXT
		WHERE (MESSAGE_LINE_ID = @old_MESSAGE_LINE_ID)
		AND (DISPATCHER_MESSAGE_ID = @old_DISPATCHER_MESSAGE_ID)
		AND (MESSAGE_LINE_TEXT = @old_MESSAGE_LINE_TEXT)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_package'
GO
CREATE PROCEDURE sp_update_package
(
	@old_PACKAGE_ID[INT],
	@old_DELIVERY_ID[INT],
	@new_DELIVERY_ID[INT],
	@old_ORDER_ID[INT],
	@new_ORDER_ID[INT]
)
AS
	BEGIN
		UPDATE package
		SET DELIVERY_ID = @new_DELIVERY_ID, ORDER_ID = @new_ORDER_ID
		WHERE (PACKAGE_ID = @old_PACKAGE_ID)
		AND (DELIVERY_ID = @old_DELIVERY_ID)
		AND (ORDER_ID = @old_ORDER_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_package_delivery'
GO
CREATE PROCEDURE sp_update_package_delivery
(
	@PACKAGE_ID[INT],
	@new_DELIVERY_ID[INT]
)
AS
	BEGIN
		UPDATE package
		SET DELIVERY_ID = @new_DELIVERY_ID
		WHERE (PACKAGE_ID = @PACKAGE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_package_line'
GO
CREATE PROCEDURE sp_update_package_line
(
	@old_PACKAGE_LINE_ID[INT],
	@old_PACKAGE_ID[INT],
	@new_PACKAGE_ID[INT],
	@old_PRODUCT_LOT_ID[INT],
	@new_PRODUCT_LOT_ID[INT],
	@old_QUANTITY[INT],
	@new_QUANTITY[INT],
	@old_PRICE_PAID[DECIMAL](5,2),
	@new_PRICE_PAID[DECIMAL](5,2)
)
AS
	BEGIN
		UPDATE package_line
		SET PACKAGE_ID = @new_PACKAGE_ID, PRODUCT_LOT_ID = @new_PRODUCT_LOT_ID, QUANTITY = @new_QUANTITY, PRICE_PAID = @new_PRICE_PAID
		WHERE (PACKAGE_LINE_ID = @old_PACKAGE_LINE_ID)
		AND (PACKAGE_ID = @old_PACKAGE_ID)
		AND (PRODUCT_LOT_ID = @old_PRODUCT_LOT_ID)
		AND (QUANTITY = @old_QUANTITY)
		AND (PRICE_PAID = @old_PRICE_PAID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_pickup'
GO
CREATE PROCEDURE sp_update_pickup
(
	@old_PICKUP_ID[INT],
	@old_SUPPLIER_ID[INT],
	@new_SUPPLIER_ID[INT],
	@old_WAREHOUSE_ID[INT],
	@new_WAREHOUSE_ID[INT],
	@old_DRIVER_ID[INT]=null,
	@new_DRIVER_ID[INT],
	@old_EMPLOYEE_ID[INT]=null,
	@new_EMPLOYEE_ID[INT]
)
AS
	BEGIN
		UPDATE pickup
		SET SUPPLIER_ID = @new_SUPPLIER_ID, WAREHOUSE_ID = @new_WAREHOUSE_ID, DRIVER_ID = @new_DRIVER_ID, EMPLOYEE_ID = @new_EMPLOYEE_ID
		WHERE (PICKUP_ID = @old_PICKUP_ID)
		AND (SUPPLIER_ID = @old_SUPPLIER_ID)
		AND (WAREHOUSE_ID = @old_WAREHOUSE_ID)
		AND (DRIVER_ID = @old_DRIVER_ID OR ISNULL(DRIVER_ID, @old_DRIVER_ID) IS NULL)
		AND (EMPLOYEE_ID = @old_EMPLOYEE_ID OR ISNULL(EMPLOYEE_ID, @old_EMPLOYEE_ID) IS NULL)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_pickup_line'
GO
CREATE PROCEDURE sp_update_pickup_line
(
	@old_PICKUP_LINE_ID[INT],
	@old_PICKUP_ID[INT],
	@new_PICKUP_ID[INT],
	@old_PRODUCT_LOT_ID[INT],
	@new_PRODUCT_LOT_ID[INT],
	@old_QUANTITY[INT],
	@new_QUANTITY[INT],
	@old_PICK_UP_STATUS[BIT],
	@new_PICK_UP_STATUS[BIT]
)
AS
	BEGIN
		UPDATE pickup_line
		SET PICKUP_ID = @new_PICKUP_ID, PRODUCT_LOT_ID = @new_PRODUCT_LOT_ID, QUANTITY = @new_QUANTITY, PICK_UP_STATUS = @new_PICK_UP_STATUS
		WHERE (PICKUP_LINE_ID = @old_PICKUP_LINE_ID)
		AND (PICKUP_ID = @old_PICKUP_ID)
		AND (PRODUCT_LOT_ID = @old_PRODUCT_LOT_ID)
		AND (QUANTITY = @old_QUANTITY)
		AND (PICK_UP_STATUS = @old_PICK_UP_STATUS)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_product'
GO
CREATE PROCEDURE sp_update_product
(
	@old_PRODUCT_ID[INT],
	@old_NAME[NVARCHAR](50),
	@new_NAME[NVARCHAR](50),
	@old_DESCRIPTION[NVARCHAR](200),
	@new_DESCRIPTION[NVARCHAR](200),
	@old_UNIT_PRICE[DECIMAL](10,2),
	@new_UNIT_PRICE[DECIMAL](10,2),
	@old_IMAGE_NAME[VARCHAR](50)=null,
	@new_IMAGE_NAME[VARCHAR](50),
	@old_ACTIVE[BIT],
	@new_ACTIVE[BIT],
	@old_UNIT_OF_MEASUREMENT[NVARCHAR](20),
	@new_UNIT_OF_MEASUREMENT[NVARCHAR](20),
	@old_DELIVERY_CHARGE_PER_UNIT[DECIMAL](5,2),
	@new_DELIVERY_CHARGE_PER_UNIT[DECIMAL](5,2)
)
AS
	BEGIN
		UPDATE product
		SET NAME = @new_NAME, DESCRIPTION = @new_DESCRIPTION, UNIT_PRICE = @new_UNIT_PRICE, IMAGE_NAME = @new_IMAGE_NAME, ACTIVE = @new_ACTIVE, UNIT_OF_MEASUREMENT = @new_UNIT_OF_MEASUREMENT, DELIVERY_CHARGE_PER_UNIT = @new_DELIVERY_CHARGE_PER_UNIT
		WHERE (PRODUCT_ID = @old_PRODUCT_ID)
		AND (NAME = @old_NAME)
		AND (DESCRIPTION = @old_DESCRIPTION)
		AND (UNIT_PRICE = @old_UNIT_PRICE)
		AND (IMAGE_NAME = @old_IMAGE_NAME OR ISNULL(IMAGE_NAME, @old_IMAGE_NAME) IS NULL)
		AND (ACTIVE = @old_ACTIVE)
		AND (UNIT_OF_MEASUREMENT = @old_UNIT_OF_MEASUREMENT)
		AND (DELIVERY_CHARGE_PER_UNIT = @old_DELIVERY_CHARGE_PER_UNIT)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_product_grade_price'
GO
CREATE PROCEDURE sp_update_product_grade_price
(
	@old_PRODUCT_ID[INT],
	@old_GRADE_ID[NVARCHAR](250),
	@old_PRICE[DECIMAL](5,2),
	@new_PRICE[DECIMAL](5,2)
)
AS
	BEGIN
		UPDATE product_grade_price
		SET PRICE = @new_PRICE
		WHERE (PRODUCT_ID = @old_PRODUCT_ID)
		AND (GRADE_ID = @old_GRADE_ID)
		AND (PRICE = @old_PRICE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_product_lot'
GO
CREATE PROCEDURE sp_update_product_lot
(
	@old_PRODUCT_LOT_ID[INT],
	@old_WAREHOUSE_ID[INT],
	@new_WAREHOUSE_ID[INT],
	@old_SUPPLIER_ID[INT],
	@new_SUPPLIER_ID[INT],
	@old_LOCATION_ID[INT],
	@new_LOCATION_ID[INT],
	@old_PRODUCT_ID[INT],
	@new_PRODUCT_ID[INT],
	@old_SUPPLY_MANAGER_ID[INT],
	@new_SUPPLY_MANAGER_ID[INT],
	@old_QUANTITY[INT],
	@new_QUANTITY[INT],
	@old_AVAILABLE_QUANTITY[INT],
	@new_AVAILABLE_QUANTITY[INT],
	@old_DATE_RECEIVED[DATETIME],
	@new_DATE_RECEIVED[DATETIME],
	@old_EXPIRATION_DATE[DATETIME],
	@new_EXPIRATION_DATE[DATETIME]
)
AS
	BEGIN
		UPDATE product_lot
		SET WAREHOUSE_ID = @new_WAREHOUSE_ID, SUPPLIER_ID = @new_SUPPLIER_ID, LOCATION_ID = @new_LOCATION_ID, PRODUCT_ID = @new_PRODUCT_ID, SUPPLY_MANAGER_ID = @new_SUPPLY_MANAGER_ID, QUANTITY = @new_QUANTITY, AVAILABLE_QUANTITY = @new_AVAILABLE_QUANTITY, DATE_RECEIVED = @new_DATE_RECEIVED, EXPIRATION_DATE = @new_EXPIRATION_DATE
		WHERE (PRODUCT_LOT_ID = @old_PRODUCT_LOT_ID)
		AND (WAREHOUSE_ID = @old_WAREHOUSE_ID)
		AND (SUPPLIER_ID = @old_SUPPLIER_ID)
		AND (LOCATION_ID = @old_LOCATION_ID)
		AND (PRODUCT_ID = @old_PRODUCT_ID)
		AND (SUPPLY_MANAGER_ID = @old_SUPPLY_MANAGER_ID)
		AND (QUANTITY = @old_QUANTITY)
		AND (AVAILABLE_QUANTITY = @old_AVAILABLE_QUANTITY)
		AND (DATE_RECEIVED = @old_DATE_RECEIVED)
		AND (EXPIRATION_DATE = @old_EXPIRATION_DATE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_product_lot_available_quantity'
GO
CREATE PROCEDURE sp_update_product_lot_available_quantity
(
	@PRODUCT_LOT_ID[INT],
	@old_AVAILABLE_QUANTITY[INT],
	@new_AVAILABLE_QUANTITY[INT]
)
AS
	BEGIN
		UPDATE product_lot
		SET AVAILABLE_QUANTITY = @new_AVAILABLE_QUANTITY
		WHERE (PRODUCT_LOT_ID = @PRODUCT_LOT_ID)
		AND AVAILABLE_QUANTITY = @old_AVAILABLE_QUANTITY
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_product_order'
GO
CREATE PROCEDURE sp_update_product_order
(
	@old_ORDER_ID[INT],
	@old_CUSTOMER_ID[INT],
	@new_CUSTOMER_ID[INT],
	@old_ORDER_TYPE_ID[NVARCHAR](250),
	@new_ORDER_TYPE_ID[NVARCHAR](250),
	@old_ADDRESS_TYPE[NVARCHAR],
	@new_ADDRESS_TYPE[NVARCHAR],
	@old_DELIVERY_TYPE_ID[NVARCHAR](50),
	@new_DELIVERY_TYPE_ID[NVARCHAR](50),
	@old_AMOUNT[DECIMAL](6,2),
	@new_AMOUNT[DECIMAL](6,2),
	@old_ORDER_DATE[DATETIME],
	@new_ORDER_DATE[DATETIME],
	@old_DATE_EXPECTED[DATETIME],
	@new_DATE_EXPECTED[DATETIME],
	@old_DISCOUNT[DECIMAL](5,2),
	@new_DISCOUNT[DECIMAL](5,2),
	@old_ORDER_STATUS_ID[NVARCHAR](50),
	@new_ORDER_STATUS_ID[NVARCHAR](50),
	@old_USER_ADDRESS_ID[INT],
	@new_USER_ADDRESS_ID[INT],
	@old_HAS_ARRIVED[BIT],
	@new_HAS_ARRIVED[BIT]
)
AS
	BEGIN
		UPDATE product_order
		SET CUSTOMER_ID = @new_CUSTOMER_ID, ORDER_TYPE_ID = @new_ORDER_TYPE_ID, ADDRESS_TYPE = @new_ADDRESS_TYPE, DELIVERY_TYPE_ID = @new_DELIVERY_TYPE_ID, AMOUNT = @new_AMOUNT, ORDER_DATE = @new_ORDER_DATE, DATE_EXPECTED = @new_DATE_EXPECTED, DISCOUNT = @new_DISCOUNT, ORDER_STATUS_ID = @new_ORDER_STATUS_ID, USER_ADDRESS_ID = @new_USER_ADDRESS_ID, HAS_ARRIVED = @new_HAS_ARRIVED
		WHERE (ORDER_ID = @old_ORDER_ID)
		AND (CUSTOMER_ID = @old_CUSTOMER_ID)
		AND (ORDER_TYPE_ID = @old_ORDER_TYPE_ID)
		AND (ADDRESS_TYPE = @old_ADDRESS_TYPE)
		AND (DELIVERY_TYPE_ID = @old_DELIVERY_TYPE_ID)
		AND (AMOUNT = @old_AMOUNT)
		AND (ORDER_DATE = @old_ORDER_DATE)
		AND (DATE_EXPECTED = @old_DATE_EXPECTED)
		AND (DISCOUNT = @old_DISCOUNT)
		AND (ORDER_STATUS_ID = @old_ORDER_STATUS_ID)
		AND (USER_ADDRESS_ID = @old_USER_ADDRESS_ID)
		AND (HAS_ARRIVED = @old_HAS_ARRIVED)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_product_order_status'
GO
CREATE PROCEDURE sp_update_product_order_status
(
	@ORDER_ID[INT],
	@NEW_ORDER_STATUS_ID[NVARCHAR](50)
)
AS
	BEGIN
		UPDATE product_order
		SET ORDER_STATUS_ID = @NEW_ORDER_STATUS_ID
		WHERE (ORDER_ID = @ORDER_ID)
		RETURN @@ROWCOUNT
	END
GO

Print '' print  ' *** creating procedure sp_update_product_price'
GO
Create PROCEDURE sp_update_product_price
(
	@PRODUCT_LOT_ID[INT],
	@new_PRICE[DECIMAL](5,2)
)
AS
	BEGIN
		UPDATE product_lot
		SET PRICE = @new_PRICE
		WHERE (PRODUCT_LOT_ID = @PRODUCT_LOT_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_product_review'
GO
CREATE PROCEDURE sp_update_product_review
(
	@old_REVIEW_ID[INT],
	@old_PRODUCT_ID[INT],
	@new_PRODUCT_ID[INT],
	@old_USER_ID[INT],
	@new_USER_ID[INT],
	@old_SUPPLIER_ID[INT],
	@new_SUPPLIER_ID[INT],
	@old_RATING[INT],
	@new_RATING[INT],
	@old_NOTES[NVARCHAR](1000),
	@new_NOTES[NVARCHAR](1000)
)
AS
	BEGIN
		UPDATE product_review
		SET PRODUCT_ID = @new_PRODUCT_ID, USER_ID = @new_USER_ID, SUPPLIER_ID = @new_SUPPLIER_ID, RATING = @new_RATING, NOTES = @new_NOTES
		WHERE (REVIEW_ID = @old_REVIEW_ID)
		AND (PRODUCT_ID = @old_PRODUCT_ID)
		AND (USER_ID = @old_USER_ID)
		AND (SUPPLIER_ID = @old_SUPPLIER_ID)
		AND (RATING = @old_RATING)
		AND (NOTES = @old_NOTES)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_repair'
GO
CREATE PROCEDURE sp_update_repair
(
	@old_REPAIR_ID[INT],
	@old_VEHICLE_ID[INT],
	@new_VEHICLE_ID[INT]
)
AS
	BEGIN
		UPDATE repair
		SET VEHICLE_ID = @new_VEHICLE_ID
		WHERE (REPAIR_ID = @old_REPAIR_ID)
		AND (VEHICLE_ID = @old_VEHICLE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_repair_line'
GO
CREATE PROCEDURE sp_update_repair_line
(
	@old_REPAIR_LINE_ID[INT],
	@old_REPAIR_ID[INT],
	@new_REPAIR_ID[INT],
	@old_REPAIR_DESCRIPTION[NVARCHAR](250),
	@new_REPAIR_DESCRIPTION[NVARCHAR](250)
)
AS
	BEGIN
		UPDATE repair_line
		SET REPAIR_ID = @new_REPAIR_ID, REPAIR_DESCRIPTION = @new_REPAIR_DESCRIPTION
		WHERE (REPAIR_LINE_ID = @old_REPAIR_LINE_ID)
		AND (REPAIR_ID = @old_REPAIR_ID)
		AND (REPAIR_DESCRIPTION = @old_REPAIR_DESCRIPTION)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_role'
GO
CREATE PROCEDURE sp_update_role
(
	@old_ROLE_ID[NVARCHAR](250),
	@old_DESCRIPTION[NVARCHAR](1000),
	@new_DESCRIPTION[NVARCHAR](1000)
)
AS
	BEGIN
		UPDATE role
		SET DESCRIPTION = @new_DESCRIPTION
		WHERE (ROLE_ID = @old_ROLE_ID)
		AND (DESCRIPTION = @old_DESCRIPTION)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_route'
GO
CREATE PROCEDURE sp_update_route
(
	@old_ROUTE_ID[INT],
	@old_VEHICLE_ID[INT],
	@new_VEHICLE_ID[INT],
	@old_DRIVER_ID[INT],
	@new_DRIVER_ID[INT],
	@old_ASSIGNED_DATE[DATETIME],
	@new_ASSIGNED_DATE[DATETIME]
)
AS
	BEGIN
		UPDATE route
		SET VEHICLE_ID = @new_VEHICLE_ID, DRIVER_ID = @new_DRIVER_ID, ASSIGNED_DATE = @new_ASSIGNED_DATE
		WHERE (ROUTE_ID = @old_ROUTE_ID)
		AND (VEHICLE_ID = @old_VEHICLE_ID)
		AND (DRIVER_ID = @old_DRIVER_ID)
		AND (ASSIGNED_DATE = @old_ASSIGNED_DATE)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_shipping_address'
GO
CREATE PROCEDURE sp_update_shipping_address
(
	@old_ADDRESS_ID[INT],
	@old_USER_ID[INT],
	@new_USER_ID[INT],
	@old_ADDRESS1[NVARCHAR](100),
	@new_ADDRESS1[NVARCHAR](100),
	@old_ADDRESS2[NVARCHAR](100)=null,
	@new_ADDRESS2[NVARCHAR](100),
	@old_CITY[NVARCHAR](50),
	@new_CITY[NVARCHAR](50),
	@old_STATE[NCHAR](2),
	@new_STATE[NCHAR](2),
	@old_ZIP[NVARCHAR](10),
	@new_ZIP[NVARCHAR](10),
	@old_ADDRESS_NAME[NVARCHAR](50),
	@new_ADDRESS_NAME[NVARCHAR](50)
)
AS
	BEGIN
		UPDATE shipping_address
		SET USER_ID = @new_USER_ID, ADDRESS1 = @new_ADDRESS1, ADDRESS2 = @new_ADDRESS2, CITY = @new_CITY, STATE = @new_STATE, ZIP = @new_ZIP, ADDRESS_NAME = @new_ADDRESS_NAME
		WHERE (ADDRESS_ID = @old_ADDRESS_ID)
		AND (USER_ID = @old_USER_ID)
		AND (ADDRESS1 = @old_ADDRESS1)
		AND (ADDRESS2 = @old_ADDRESS2 OR ISNULL(ADDRESS2, @old_ADDRESS2) IS NULL)
		AND (CITY = @old_CITY)
		AND (STATE = @old_STATE)
		AND (ZIP = @old_ZIP)
		AND (ADDRESS_NAME = @old_ADDRESS_NAME)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_supplier'
GO
CREATE PROCEDURE sp_update_supplier
(
	@old_SUPPLIER_ID[INT],
	@old_USER_ID[INT],
	@new_USER_ID[INT],
	@old_IS_APPROVED[BIT],
	@new_IS_APPROVED[BIT],
	@old_APPROVED_BY[INT],
	@new_APPROVED_BY[INT],
	@old_FARM_NAME[NVARCHAR](300),
	@new_FARM_NAME[NVARCHAR](300),
	@old_FARM_ADDRESS[NVARCHAR](300),
	@new_FARM_ADDRESS[NVARCHAR](300),
	@old_FARM_CITY[NVARCHAR](50),
	@new_FARM_CITY[NVARCHAR](50),
	@old_FARM_STATE[NCHAR](50),
	@new_FARM_STATE[NCHAR](50),
	@old_FARM_TAX_ID[NVARCHAR](64),
	@new_FARM_TAX_ID[NVARCHAR](64),
	@old_ACTIVE[BIT],
	@new_ACTIVE[BIT]
)
AS
	BEGIN
		UPDATE supplier
		SET USER_ID = @new_USER_ID, IS_APPROVED = @new_IS_APPROVED, APPROVED_BY = @new_APPROVED_BY, FARM_NAME = @new_FARM_NAME, FARM_ADDRESS = @new_FARM_ADDRESS, FARM_CITY = @new_FARM_CITY, FARM_STATE = @new_FARM_STATE, FARM_TAX_ID = @new_FARM_TAX_ID, ACTIVE = @new_ACTIVE
		WHERE (SUPPLIER_ID = @old_SUPPLIER_ID)
		AND (USER_ID = @old_USER_ID)
		AND (IS_APPROVED = @old_IS_APPROVED)
		AND (APPROVED_BY = @old_APPROVED_BY)
		AND (FARM_NAME = @old_FARM_NAME)
		AND (FARM_ADDRESS = @old_FARM_ADDRESS)
		AND (FARM_CITY = @old_FARM_CITY)
		AND (FARM_STATE = @old_FARM_STATE)
		AND (FARM_TAX_ID = @old_FARM_TAX_ID)
		AND (ACTIVE = @old_ACTIVE)
		RETURN @@ROWCOUNT
	END
GO

print '' print '*** Creating procedure sp_update_approve_supplier_invoice_by_supplier_invoice_id'
GO
CREATE PROCEDURE sp_update_approve_supplier_invoice_by_supplier_invoice_id
(
@SUPPLIER_INVOICE_ID[INT]
)
AS
	BEGIN
		UPDATE supplier_invoice
		SET APPROVED = 1
		WHERE SUPPLIER_INVOICE_ID = @SUPPLIER_INVOICE_ID
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_user_address'
GO
CREATE PROCEDURE sp_update_user_address
(
	@old_USER_ADDRESS_ID[INT],
	@old_USER_ID[INT],
	@new_USER_ID[INT],
	@old_ADDRESS_LINE_1[NVARCHAR](50),
	@new_ADDRESS_LINE_1[NVARCHAR](50),
	@old_ADDRESS_LINE_2[NVARCHAR](50),
	@new_ADDRESS_LINE_2[NVARCHAR](50),
	@old_CITY[NVARCHAR](50),
	@new_CITY[NVARCHAR](50),
	@old_STATE[NCHAR](2),
	@new_STATE[NCHAR](2),
	@old_ZIP[NVARCHAR](10),
	@new_ZIP[NVARCHAR](10)
)
AS
	BEGIN
		UPDATE user_address
		SET USER_ID = @new_USER_ID, ADDRESS_LINE_1 = @new_ADDRESS_LINE_1, ADDRESS_LINE_2 = @new_ADDRESS_LINE_2, CITY = @new_CITY, STATE = @new_STATE, ZIP = @new_ZIP
		WHERE (USER_ADDRESS_ID = @old_USER_ADDRESS_ID)
		AND (USER_ID = @old_USER_ID)
		AND (ADDRESS_LINE_1 = @old_ADDRESS_LINE_1)
		AND (ADDRESS_LINE_2 = @old_ADDRESS_LINE_2)
		AND (CITY = @old_CITY)
		AND (STATE = @old_STATE)
		AND (ZIP = @old_ZIP)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_user_password'
GO
CREATE PROCEDURE sp_update_user_password
(
	@USERNAME[NVARCHAR](50),
	@OLD_SALT[NVARCHAR](64),
	@OLD_HASH[NVARCHAR](64),
	@NEW_SALT[NVARCHAR](64),
	@NEW_HASH[NVARCHAR](64)
)
AS
	BEGIN
		UPDATE APP_USER
		SET PASSWORD_SALT = @NEW_SALT ,PASSWORD_HASH = @NEW_HASH
		WHERE USER_NAME = @USERNAME
		AND PASSWORD_SALT = @OLD_SALT
		AND PASSWORD_HASH = @OLD_HASH
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_vehicle'
GO
CREATE PROCEDURE sp_update_vehicle
(
	@old_VEHICLE_ID[INT],
	@old_VIN[NVARCHAR](20),
	@new_VIN[NVARCHAR](20),
	@old_MAKE[NVARCHAR](15),
	@new_MAKE[NVARCHAR](15),
	@old_MODEL[NVARCHAR](20),
	@new_MODEL[NVARCHAR](20),
	@old_MILEAGE[INT],
	@new_MILEAGE[INT],
	@old_YEAR[NVARCHAR](4),
	@new_YEAR[NVARCHAR](4),
	@old_COLOR[NVARCHAR](20),
	@new_COLOR[NVARCHAR](20),
	@old_ACTIVE[BIT],
	@new_ACTIVE[BIT],
	@old_LATEST_REPAIR_DATE[DATE]=null,
	@new_LATEST_REPAIR_DATE[DATE],
	@old_LAST_DRIVER_ID[INT]=null,
	@new_LAST_DRIVER_ID[INT],
	@old_VEHICLE_TYPE_ID[NVARCHAR](50),
	@new_VEHICLE_TYPE_ID[NVARCHAR](50)
)
AS
	BEGIN
		UPDATE vehicle
		SET VIN = @new_VIN, MAKE = @new_MAKE, MODEL = @new_MODEL, MILEAGE = @new_MILEAGE, YEAR = @new_YEAR, COLOR = @new_COLOR, ACTIVE = @new_ACTIVE, LATEST_REPAIR_DATE = @new_LATEST_REPAIR_DATE, LAST_DRIVER_ID = @new_LAST_DRIVER_ID, VEHICLE_TYPE_ID = @new_VEHICLE_TYPE_ID
		WHERE (VEHICLE_ID = @old_VEHICLE_ID)
		AND (VIN = @old_VIN)
		AND (MAKE = @old_MAKE)
		AND (MODEL = @old_MODEL)
		AND (MILEAGE = @old_MILEAGE)
		AND (YEAR = @old_YEAR)
		AND (COLOR = @old_COLOR)
		AND (ACTIVE = @old_ACTIVE)
		AND (LATEST_REPAIR_DATE = @old_LATEST_REPAIR_DATE OR ISNULL(LATEST_REPAIR_DATE, @old_LATEST_REPAIR_DATE) IS NULL)
		AND (LAST_DRIVER_ID = @old_LAST_DRIVER_ID OR ISNULL(LAST_DRIVER_ID, @old_LAST_DRIVER_ID) IS NULL)
		AND (VEHICLE_TYPE_ID = @old_VEHICLE_TYPE_ID)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_update_warehouse'
GO
CREATE PROCEDURE sp_update_warehouse
(
	@old_WAREHOUSE_ID[INT],
	@old_ADDRESS_1[NVARCHAR](50),
	@new_ADDRESS_1[NVARCHAR](50),
	@old_ADDRESS_2[NVARCHAR](50),
	@new_ADDRESS_2[NVARCHAR](50),
	@old_CITY[NVARCHAR](50),
	@new_CITY[NVARCHAR](50),
	@old_STATE[NCHAR](2),
	@new_STATE[NCHAR](2),
	@old_ZIP[NVARCHAR](10),
	@new_ZIP[NVARCHAR](10)
)
AS
	BEGIN
		UPDATE warehouse
		SET ADDRESS_1 = @new_ADDRESS_1, ADDRESS_2 = @new_ADDRESS_2, CITY = @new_CITY, STATE = @new_STATE, ZIP = @new_ZIP
		WHERE (WAREHOUSE_ID = @old_WAREHOUSE_ID)
		AND (ADDRESS_1 = @old_ADDRESS_1)
		AND (ADDRESS_2 = @old_ADDRESS_2)
		AND (CITY = @old_CITY)
		AND (STATE = @old_STATE)
		AND (ZIP = @old_ZIP)
		RETURN @@ROWCOUNT
	END
GO

print '' print  '*** Creating procedure sp_retrieve_commercial_customer_by_user_id'
GO
CREATE PROCEDURE sp_retrieve_commercial_customer_by_user_id
(
	@USER_ID[INT]
)
AS
	BEGIN
		SELECT COMMERCIAL_ID, USER_ID, IS_APPROVED, APPROVED_BY, FEDERAL_TAX_ID, ACTIVE
		FROM COMMERCIAL
		WHERE USER_ID = @USER_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_charity_by_user_id'
GO
CREATE PROCEDURE sp_retrieve_charity_by_user_id
(
	@USER_ID[INT]
)
AS
	BEGIN
		SELECT CHARITY_ID, USER_ID, EMPLOYEE_ID, CHARITY_NAME, CONTACT_FIRST_NAME, CONTACT_LAST_NAME, PHONE_NUMBER, EMAIL, CONTACT_HOURS, STATUS
		FROM CHARITY
		WHERE USER_ID = @USER_ID
	END
GO


print '' print  '*** Creating procedure sp_retrieve_maintenance_schedule_by_vehicle_id'
GO
CREATE PROCEDURE sp_retrieve_maintenance_schedule_by_vehicle_id
(
	@VEHICLE_ID[INT]
)
AS
	BEGIN
		SELECT MAINTENANCE_SCHEDULE_ID, VEHICLE_ID
		FROM maintenance_schedule
		WHERE VEHICLE_ID = @VEHICLE_ID
	END
GO

print '' print '*** Creating procedure sp_create_supplier_inventory'
GO
CREATE PROCEDURE sp_create_supplier_inventory
(
	@AGREEMENT_ID[INT],
	@QUANTITY[INT],
    @DATE_ADDED[DATETIME]
)
AS
	BEGIN
		INSERT INTO SUPPLIER_INVENTORY 
			(AGREEMENT_ID, QUANTITY, DATE_ADDED)
		VALUES
			(@AGREEMENT_ID, @QUANTITY, @DATE_ADDED)
		RETURN @@ROWCOUNT
	END
GO

print '' print '*** Creating procedure sp_update_supplier_invoice'
GO
CREATE PROCEDURE sp_update_supplier_invoice
(
	@SUPPLIER_INVOICE_ID[INT],
	@old_SUPPLIER_ID [INT],
	@new_SUPPLIER_ID [INT],
	@old_INVOICE_DATE [DateTime],
	@new_INVOICE_DATE [DateTime],
	@old_SUB_TOTAL [DECIMAL](6,2),
	@new_SUB_TOTAL [DECIMAL](6,2),
	@old_TAX_AMOUNT [DECIMAL](6,2),
	@new_TAX_AMOUNT [DECIMAL](6,2),
	@old_TOTAL [DECIMAL](6,2),
	@new_TOTAL [DECIMAL](6,2),
	@old_AMOUNT_PAID [DECIMAL](6,2),
	@new_AMOUNT_PAID [DECIMAL](6,2),
	@old_APPROVED [BIT],
	@new_APPROVED [BIT],
	@old_ACTIVE [BIT],
	@new_ACTIVE [BIT]
)
AS
	BEGIN
		UPDATE supplier_invoice
		SET SUPPLIER_ID = @new_SUPPLIER_ID, INVOICE_DATE = @new_INVOICE_DATE, SUB_TOTAL = @new_SUB_TOTAL, TAX_AMOUNT = @new_TAX_AMOUNT, TOTAL = @new_TOTAL, AMOUNT_PAID = @new_AMOUNT_PAID, APPROVED = @new_APPROVED, ACTIVE = @new_ACTIVE
		WHERE SUPPLIER_INVOICE_ID = @SUPPLIER_INVOICE_ID
		AND SUPPLIER_ID = @old_SUPPLIER_ID
		AND INVOICE_DATE = @old_INVOICE_DATE
		AND SUB_TOTAL = @old_SUB_TOTAL
		AND TAX_AMOUNT = @old_TAX_AMOUNT
		AND TOTAL = @old_TOTAL
		AND AMOUNT_PAID = @old_AMOUNT_PAID
		AND APPROVED = @old_APPROVED
		AND ACTIVE = @old_ACTIVE
		RETURN @@ROWCOUNT
	END
GO

Print '' print  ' *** creating procedure sp_update_checked_out_status'
GO
Create PROCEDURE sp_update_checked_out_status
(
@vehicleId [int],
@old_Checked_Out_Status[BIT],
@new_Checked_Out_Status[BIT]
)
AS
BEGIN
UPDATE VEHICLE
SET CHECKED_OUT = @new_Checked_Out_Status, OUT_IN_TIME_STAMP = GETDATE()
WHERE (VEHICLE_ID = @vehicleId)
END
GO


print '' print  '*** Creating procedure sp_retrieve_product_name_from_product_lot_id'
GO
CREATE PROCEDURE sp_retrieve_product_name_from_product_lot_id
(
	@PRODUCT_LOT_ID[int]
)
AS
	BEGIN
		SELECT NAME
		FROM PRODUCT, PRODUCT_LOT
		WHERE PRODUCT_LOT.PRODUCT_LOT_ID = @PRODUCT_LOT_ID
		AND PRODUCT.PRODUCT_ID = PRODUCT_LOT.PRODUCT_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_user_address_from_supplier_id'
GO
CREATE PROCEDURE sp_retrieve_user_address_from_supplier_id
(
	@SUPPLIER_ID[int]
)
AS
	BEGIN
		SELECT USER_ADDRESS_ID, USER_ADDRESS.USER_ID, ADDRESS_LINE_1, ADDRESS_LINE_2, USER_ADDRESS.CITY, USER_ADDRESS.STATE, USER_ADDRESS.ZIP
		FROM USER_ADDRESS, APP_USER, SUPPLIER
		WHERE SUPPLIER.USER_ID = APP_USER.USER_ID
		AND APP_USER.PREFERRED_ADDRESS_ID = USER_ADDRESS.USER_ADDRESS_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_routes_for_driver_after_date'
GO
CREATE PROCEDURE sp_retrieve_routes_for_driver_after_date
(
	@DRIVER_ID[INT],
	@TODAYS_DATE[DATETIME]
)
AS
	BEGIN
		SELECT ROUTE_ID, VEHICLE_ID, DRIVER_ID, ASSIGNED_DATE
		FROM ROUTE
		WHERE DRIVER_ID = @DRIVER_ID
		AND cast(ASSIGNED_DATE as date) >= cast(@TODAYS_DATE as date)
	END
GO

print '' print  '*** Creating procedure sp_retrieve_user_address_for_delivery'
GO
CREATE PROCEDURE sp_retrieve_user_address_for_delivery
(
	@DELIVERY_ID[int]
)
AS
	BEGIN
		SELECT USER_ADDRESS.USER_ADDRESS_ID, USER_ADDRESS.USER_ID, ADDRESS_LINE_1, ADDRESS_LINE_2, CITY, STATE, ZIP
		FROM USER_ADDRESS, DELIVERY, PRODUCT_ORDER
		WHERE USER_ADDRESS.USER_ADDRESS_ID = PRODUCT_ORDER.USER_ADDRESS_ID
		AND DELIVERY.ORDER_ID = PRODUCT_ORDER.ORDER_ID
		AND DELIVERY.DELIVERY_ID = @DELIVERY_ID
	END
GO

print '' print  '*** Creating procedure sp_retrieve_vehicle_from_delivery'
GO
CREATE PROCEDURE sp_retrieve_vehicle_from_delivery
(
@DELIVERY_ID[INT]
)
AS
	BEGIN
		SELECT VEHICLE.VEHICLE_ID, VIN, MAKE, MODEL, MILEAGE, YEAR, COLOR, ACTIVE, LATEST_REPAIR_DATE, LAST_DRIVER_ID, VEHICLE_TYPE_ID
		FROM vehicle, delivery, route
		WHERE DELIVERY.DELIVERY_ID = @DELIVERY_ID
		AND DELIVERY.ROUTE_ID = ROUTE.ROUTE_ID
		AND ROUTE.VEHICLE_ID = VEHICLE.VEHICLE_ID
	END
GO
